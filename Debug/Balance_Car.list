
Balance_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cdc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08007df0  08007df0  00017df0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081a0  080081a0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080081a0  080081a0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080081a0  080081a0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081a0  080081a0  000181a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081a4  080081a4  000181a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080081a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  200001e0  08008388  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08008388  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010dbe  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002338  00000000  00000000  00030fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001000  00000000  00000000  00033300  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f10  00000000  00000000  00034300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001928c  00000000  00000000  00035210  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ca09  00000000  00000000  0004e49c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008db1a  00000000  00000000  0005aea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e89bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000517c  00000000  00000000  000e8a3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007dd4 	.word	0x08007dd4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007dd4 	.word	0x08007dd4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <initMotor>:
#include "MotorControl.h"

TIM_HandleTypeDef htim1;

void initMotor(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4804      	ldr	r0, [pc, #16]	; (8000b40 <initMotor+0x18>)
 8000b30:	f003 fa0c 	bl	8003f4c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000b34:	2108      	movs	r1, #8
 8000b36:	4802      	ldr	r0, [pc, #8]	; (8000b40 <initMotor+0x18>)
 8000b38:	f003 fa08 	bl	8003f4c <HAL_TIM_PWM_Start>
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000208 	.word	0x20000208

08000b44 <turnMotor_R>:
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
	HAL_TIM_PWM_Stop(&htim1,ENA_Pin);
	HAL_TIM_PWM_Stop(&htim1,ENB_Pin);
}
void turnMotor_R(int32_t Duty)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	if (Duty > 7200)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8000b52:	dd02      	ble.n	8000b5a <turnMotor_R+0x16>
		Duty = 7200;
 8000b54:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8000b58:	607b      	str	r3, [r7, #4]
	if (Duty < -7200)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 8000b60:	da01      	bge.n	8000b66 <turnMotor_R+0x22>
		Duty = -7200;
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <turnMotor_R+0x94>)
 8000b64:	607b      	str	r3, [r7, #4]

	if (Duty > 0)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	dd0c      	ble.n	8000b86 <turnMotor_R+0x42>
	{
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b72:	481a      	ldr	r0, [pc, #104]	; (8000bdc <turnMotor_R+0x98>)
 8000b74:	f001 fba0 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b7e:	4817      	ldr	r0, [pc, #92]	; (8000bdc <turnMotor_R+0x98>)
 8000b80:	f001 fb9a 	bl	80022b8 <HAL_GPIO_WritePin>
 8000b84:	e01b      	b.n	8000bbe <turnMotor_R+0x7a>
	}
	else if (Duty < 0)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	da0c      	bge.n	8000ba6 <turnMotor_R+0x62>
	{
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <turnMotor_R+0x98>)
 8000b94:	f001 fb90 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b9e:	480f      	ldr	r0, [pc, #60]	; (8000bdc <turnMotor_R+0x98>)
 8000ba0:	f001 fb8a 	bl	80022b8 <HAL_GPIO_WritePin>
 8000ba4:	e00b      	b.n	8000bbe <turnMotor_R+0x7a>
	}
	else {
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bac:	480b      	ldr	r0, [pc, #44]	; (8000bdc <turnMotor_R+0x98>)
 8000bae:	f001 fb83 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bb8:	4808      	ldr	r0, [pc, #32]	; (8000bdc <turnMotor_R+0x98>)
 8000bba:	f001 fb7d 	bl	80022b8 <HAL_GPIO_WritePin>
	}
	Duty = abs(Duty);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	bfb8      	it	lt
 8000bc4:	425b      	neglt	r3, r3
 8000bc6:	607b      	str	r3, [r7, #4]
	htim1.Instance->CCR1 = Duty;
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <turnMotor_R+0x9c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	ffffe3e0 	.word	0xffffe3e0
 8000bdc:	40010c00 	.word	0x40010c00
 8000be0:	20000208 	.word	0x20000208

08000be4 <turnMotor_L>:
void turnMotor_L(int32_t Duty)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	if (Duty > 7200)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8000bf2:	dd02      	ble.n	8000bfa <turnMotor_L+0x16>
		Duty = 7200;
 8000bf4:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8000bf8:	607b      	str	r3, [r7, #4]
	if (Duty < -7200)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 8000c00:	da01      	bge.n	8000c06 <turnMotor_L+0x22>
		Duty = -7200;
 8000c02:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <turnMotor_L+0x94>)
 8000c04:	607b      	str	r3, [r7, #4]

	if (Duty > 0)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	dd0c      	ble.n	8000c26 <turnMotor_L+0x42>
	{
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c12:	481a      	ldr	r0, [pc, #104]	; (8000c7c <turnMotor_L+0x98>)
 8000c14:	f001 fb50 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c1e:	4817      	ldr	r0, [pc, #92]	; (8000c7c <turnMotor_L+0x98>)
 8000c20:	f001 fb4a 	bl	80022b8 <HAL_GPIO_WritePin>
 8000c24:	e01b      	b.n	8000c5e <turnMotor_L+0x7a>
	}
	else if (Duty < 0)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	da0c      	bge.n	8000c46 <turnMotor_L+0x62>
	{
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c32:	4812      	ldr	r0, [pc, #72]	; (8000c7c <turnMotor_L+0x98>)
 8000c34:	f001 fb40 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c3e:	480f      	ldr	r0, [pc, #60]	; (8000c7c <turnMotor_L+0x98>)
 8000c40:	f001 fb3a 	bl	80022b8 <HAL_GPIO_WritePin>
 8000c44:	e00b      	b.n	8000c5e <turnMotor_L+0x7a>
	}
	else {
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c4c:	480b      	ldr	r0, [pc, #44]	; (8000c7c <turnMotor_L+0x98>)
 8000c4e:	f001 fb33 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c58:	4808      	ldr	r0, [pc, #32]	; (8000c7c <turnMotor_L+0x98>)
 8000c5a:	f001 fb2d 	bl	80022b8 <HAL_GPIO_WritePin>
	}
	Duty = abs(Duty);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	bfb8      	it	lt
 8000c64:	425b      	neglt	r3, r3
 8000c66:	607b      	str	r3, [r7, #4]
	htim1.Instance->CCR3 = Duty;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <turnMotor_L+0x9c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	ffffe3e0 	.word	0xffffe3e0
 8000c7c:	40010800 	.word	0x40010800
 8000c80:	20000208 	.word	0x20000208

08000c84 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f023 030f 	bic.w	r3, r3, #15
 8000c94:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	011b      	lsls	r3, r3, #4
 8000c9a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	f043 030c 	orr.w	r3, r3, #12
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000cb0:	7bbb      	ldrb	r3, [r7, #14]
 8000cb2:	f043 030c 	orr.w	r3, r3, #12
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000cba:	7bbb      	ldrb	r3, [r7, #14]
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000cc4:	f107 0208 	add.w	r2, r7, #8
 8000cc8:	2364      	movs	r3, #100	; 0x64
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	2304      	movs	r3, #4
 8000cce:	214e      	movs	r1, #78	; 0x4e
 8000cd0:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <lcd_send_cmd+0x5c>)
 8000cd2:	f001 fc41 	bl	8002558 <HAL_I2C_Master_Transmit>
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000258 	.word	0x20000258

08000ce4 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	f023 030f 	bic.w	r3, r3, #15
 8000cf4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	f043 030d 	orr.w	r3, r3, #13
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	f043 0309 	orr.w	r3, r3, #9
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000d10:	7bbb      	ldrb	r3, [r7, #14]
 8000d12:	f043 030d 	orr.w	r3, r3, #13
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000d1a:	7bbb      	ldrb	r3, [r7, #14]
 8000d1c:	f043 0309 	orr.w	r3, r3, #9
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d24:	f107 0208 	add.w	r2, r7, #8
 8000d28:	2364      	movs	r3, #100	; 0x64
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	214e      	movs	r1, #78	; 0x4e
 8000d30:	4803      	ldr	r0, [pc, #12]	; (8000d40 <lcd_send_data+0x5c>)
 8000d32:	f001 fc11 	bl	8002558 <HAL_I2C_Master_Transmit>
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000258 	.word	0x20000258

08000d44 <lcd_init>:

void lcd_init (void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000d48:	2033      	movs	r0, #51	; 0x33
 8000d4a:	f7ff ff9b 	bl	8000c84 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000d4e:	2032      	movs	r0, #50	; 0x32
 8000d50:	f7ff ff98 	bl	8000c84 <lcd_send_cmd>
	HAL_Delay(50);
 8000d54:	2032      	movs	r0, #50	; 0x32
 8000d56:	f000 ffaf 	bl	8001cb8 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000d5a:	2028      	movs	r0, #40	; 0x28
 8000d5c:	f7ff ff92 	bl	8000c84 <lcd_send_cmd>
	HAL_Delay(50);
 8000d60:	2032      	movs	r0, #50	; 0x32
 8000d62:	f000 ffa9 	bl	8001cb8 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000d66:	2001      	movs	r0, #1
 8000d68:	f7ff ff8c 	bl	8000c84 <lcd_send_cmd>
	HAL_Delay(50);
 8000d6c:	2032      	movs	r0, #50	; 0x32
 8000d6e:	f000 ffa3 	bl	8001cb8 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000d72:	2006      	movs	r0, #6
 8000d74:	f7ff ff86 	bl	8000c84 <lcd_send_cmd>
	HAL_Delay(50);
 8000d78:	2032      	movs	r0, #50	; 0x32
 8000d7a:	f000 ff9d 	bl	8001cb8 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000d7e:	200c      	movs	r0, #12
 8000d80:	f7ff ff80 	bl	8000c84 <lcd_send_cmd>
	HAL_Delay(50);
 8000d84:	2032      	movs	r0, #50	; 0x32
 8000d86:	f000 ff97 	bl	8001cb8 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f7ff ff7a 	bl	8000c84 <lcd_send_cmd>
	HAL_Delay(50);
 8000d90:	2032      	movs	r0, #50	; 0x32
 8000d92:	f000 ff91 	bl	8001cb8 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000d96:	2080      	movs	r0, #128	; 0x80
 8000d98:	f7ff ff74 	bl	8000c84 <lcd_send_cmd>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000da8:	e006      	b.n	8000db8 <lcd_send_string+0x18>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	1c5a      	adds	r2, r3, #1
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ff96 	bl	8000ce4 <lcd_send_data>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d1f4      	bne.n	8000daa <lcd_send_string+0xa>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f7ff ff59 	bl	8000c84 <lcd_send_cmd>
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000de0:	1d39      	adds	r1, r7, #4
 8000de2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000de6:	2201      	movs	r2, #1
 8000de8:	4803      	ldr	r0, [pc, #12]	; (8000df8 <__io_putchar+0x20>)
 8000dea:	f004 f8fd 	bl	8004fe8 <HAL_UART_Transmit>

  return ch;
 8000dee:	687b      	ldr	r3, [r7, #4]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000308 	.word	0x20000308
 8000dfc:	00000000 	.word	0x00000000

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b598      	push	{r3, r4, r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e04:	f000 fef6 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e08:	f000 f878 	bl	8000efc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0c:	f000 fa68 	bl	80012e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e10:	f000 f8ba 	bl	8000f88 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000e14:	f000 f8e6 	bl	8000fe4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000e18:	f000 fa38 	bl	800128c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000e1c:	f000 f98e 	bl	800113c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e20:	f000 f9e0 	bl	80011e4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	  lcd_init();
 8000e24:	f7ff ff8e 	bl	8000d44 <lcd_init>
	  MPU6050_Init();
 8000e28:	f000 fabc 	bl	80013a4 <MPU6050_Init>

	  lcd_send_string("initialized");
 8000e2c:	482a      	ldr	r0, [pc, #168]	; (8000ed8 <main+0xd8>)
 8000e2e:	f7ff ffb7 	bl	8000da0 <lcd_send_string>
	  HAL_Delay(3000);
 8000e32:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e36:	f000 ff3f 	bl	8001cb8 <HAL_Delay>
	  lcd_clear_display();
 8000e3a:	f7ff ffc5 	bl	8000dc8 <lcd_clear_display>
  initMotor();
 8000e3e:	f7ff fe73 	bl	8000b28 <initMotor>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000e42:	213c      	movs	r1, #60	; 0x3c
 8000e44:	4825      	ldr	r0, [pc, #148]	; (8000edc <main+0xdc>)
 8000e46:	f003 f9c5 	bl	80041d4 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000e4a:	213c      	movs	r1, #60	; 0x3c
 8000e4c:	4824      	ldr	r0, [pc, #144]	; (8000ee0 <main+0xe0>)
 8000e4e:	f003 f9c1 	bl	80041d4 <HAL_TIM_Encoder_Start_IT>

  MPU6050_Read_Accel();
 8000e52:	f000 fafd 	bl	8001450 <MPU6050_Read_Accel>
  MPU6050_Read_Gyro();
 8000e56:	f000 fb77 	bl	8001548 <MPU6050_Read_Gyro>
  turnMotor_R(MotorA_Duty*0.7);
 8000e5a:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <main+0xe4>)
 8000e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff facf 	bl	8000404 <__aeabi_i2d>
 8000e66:	a31a      	add	r3, pc, #104	; (adr r3, 8000ed0 <main+0xd0>)
 8000e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6c:	f7ff fb34 	bl	80004d8 <__aeabi_dmul>
 8000e70:	4603      	mov	r3, r0
 8000e72:	460c      	mov	r4, r1
 8000e74:	4618      	mov	r0, r3
 8000e76:	4621      	mov	r1, r4
 8000e78:	f7ff fdde 	bl	8000a38 <__aeabi_d2iz>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fe60 	bl	8000b44 <turnMotor_R>
  turnMotor_L(MotorB_Duty*0.7);
 8000e84:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <main+0xe8>)
 8000e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff faba 	bl	8000404 <__aeabi_i2d>
 8000e90:	a30f      	add	r3, pc, #60	; (adr r3, 8000ed0 <main+0xd0>)
 8000e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e96:	f7ff fb1f 	bl	80004d8 <__aeabi_dmul>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	460c      	mov	r4, r1
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	4621      	mov	r1, r4
 8000ea2:	f7ff fdc9 	bl	8000a38 <__aeabi_d2iz>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fe9b 	bl	8000be4 <turnMotor_L>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  printAccelValues();
//	  printGyroValues();
	  printf("Encoder value left: %d\n", Encoder_Value_A);
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <main+0xec>)
 8000eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480e      	ldr	r0, [pc, #56]	; (8000ef0 <main+0xf0>)
 8000eb8:	f005 f8b6 	bl	8006028 <iprintf>
	  printf("Encoder value Right: %d\n", Encoder_Value_B);
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <main+0xf4>)
 8000ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <main+0xf8>)
 8000ec6:	f005 f8af 	bl	8006028 <iprintf>
	  printf("Encoder value left: %d\n", Encoder_Value_A);
 8000eca:	e7f0      	b.n	8000eae <main+0xae>
 8000ecc:	f3af 8000 	nop.w
 8000ed0:	66666666 	.word	0x66666666
 8000ed4:	3fe66666 	.word	0x3fe66666
 8000ed8:	08007e70 	.word	0x08007e70
 8000edc:	20000358 	.word	0x20000358
 8000ee0:	200002b4 	.word	0x200002b4
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000002 	.word	0x20000002
 8000eec:	200003a8 	.word	0x200003a8
 8000ef0:	08007e7c 	.word	0x08007e7c
 8000ef4:	200003aa 	.word	0x200003aa
 8000ef8:	08007e94 	.word	0x08007e94

08000efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b090      	sub	sp, #64	; 0x40
 8000f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 0318 	add.w	r3, r7, #24
 8000f06:	2228      	movs	r2, #40	; 0x28
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f004 fc34 	bl	8005778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f30:	2302      	movs	r3, #2
 8000f32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f3a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	f107 0318 	add.w	r3, r7, #24
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 fb3d 	bl	80035c4 <HAL_RCC_OscConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f50:	f000 fb78 	bl	8001644 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f54:	230f      	movs	r3, #15
 8000f56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 fda8 	bl	8003ac4 <HAL_RCC_ClockConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f7a:	f000 fb63 	bl	8001644 <Error_Handler>
  }
}
 8000f7e:	bf00      	nop
 8000f80:	3740      	adds	r7, #64	; 0x40
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000f8e:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <MX_I2C1_Init+0x54>)
 8000f90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000f94:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <MX_I2C1_Init+0x58>)
 8000f96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000faa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fc6:	f001 f98f 	bl	80022e8 <HAL_I2C_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fd0:	f000 fb38 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000258 	.word	0x20000258
 8000fdc:	40005400 	.word	0x40005400
 8000fe0:	000186a0 	.word	0x000186a0

08000fe4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b096      	sub	sp, #88	; 0x58
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]
 8001012:	615a      	str	r2, [r3, #20]
 8001014:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2220      	movs	r2, #32
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f004 fbab 	bl	8005778 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001022:	4b44      	ldr	r3, [pc, #272]	; (8001134 <MX_TIM1_Init+0x150>)
 8001024:	4a44      	ldr	r2, [pc, #272]	; (8001138 <MX_TIM1_Init+0x154>)
 8001026:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001028:	4b42      	ldr	r3, [pc, #264]	; (8001134 <MX_TIM1_Init+0x150>)
 800102a:	2200      	movs	r2, #0
 800102c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102e:	4b41      	ldr	r3, [pc, #260]	; (8001134 <MX_TIM1_Init+0x150>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8001034:	4b3f      	ldr	r3, [pc, #252]	; (8001134 <MX_TIM1_Init+0x150>)
 8001036:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800103a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103c:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <MX_TIM1_Init+0x150>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001042:	4b3c      	ldr	r3, [pc, #240]	; (8001134 <MX_TIM1_Init+0x150>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001048:	4b3a      	ldr	r3, [pc, #232]	; (8001134 <MX_TIM1_Init+0x150>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800104e:	4839      	ldr	r0, [pc, #228]	; (8001134 <MX_TIM1_Init+0x150>)
 8001050:	f002 fed4 	bl	8003dfc <HAL_TIM_Base_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800105a:	f000 faf3 	bl	8001644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001062:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001064:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001068:	4619      	mov	r1, r3
 800106a:	4832      	ldr	r0, [pc, #200]	; (8001134 <MX_TIM1_Init+0x150>)
 800106c:	f003 fb26 	bl	80046bc <HAL_TIM_ConfigClockSource>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001076:	f000 fae5 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800107a:	482e      	ldr	r0, [pc, #184]	; (8001134 <MX_TIM1_Init+0x150>)
 800107c:	f002 ff0d 	bl	8003e9a <HAL_TIM_PWM_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001086:	f000 fadd 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800108a:	2300      	movs	r3, #0
 800108c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001092:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001096:	4619      	mov	r1, r3
 8001098:	4826      	ldr	r0, [pc, #152]	; (8001134 <MX_TIM1_Init+0x150>)
 800109a:	f003 fe97 	bl	8004dcc <HAL_TIMEx_MasterConfigSynchronization>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010a4:	f000 face 	bl	8001644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a8:	2360      	movs	r3, #96	; 0x60
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010b4:	2300      	movs	r3, #0
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	4819      	ldr	r0, [pc, #100]	; (8001134 <MX_TIM1_Init+0x150>)
 80010ce:	f003 fa37 	bl	8004540 <HAL_TIM_PWM_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80010d8:	f000 fab4 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e0:	2208      	movs	r2, #8
 80010e2:	4619      	mov	r1, r3
 80010e4:	4813      	ldr	r0, [pc, #76]	; (8001134 <MX_TIM1_Init+0x150>)
 80010e6:	f003 fa2b 	bl	8004540 <HAL_TIM_PWM_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80010f0:	f000 faa8 	bl	8001644 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4619      	mov	r1, r3
 8001116:	4807      	ldr	r0, [pc, #28]	; (8001134 <MX_TIM1_Init+0x150>)
 8001118:	f003 feb6 	bl	8004e88 <HAL_TIMEx_ConfigBreakDeadTime>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001122:	f000 fa8f 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001126:	4803      	ldr	r0, [pc, #12]	; (8001134 <MX_TIM1_Init+0x150>)
 8001128:	f000 fbaa 	bl	8001880 <HAL_TIM_MspPostInit>

}
 800112c:	bf00      	nop
 800112e:	3758      	adds	r7, #88	; 0x58
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000208 	.word	0x20000208
 8001138:	40012c00 	.word	0x40012c00

0800113c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	; 0x30
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	2224      	movs	r2, #36	; 0x24
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f004 fb14 	bl	8005778 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <MX_TIM2_Init+0xa4>)
 800115a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800115e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <MX_TIM2_Init+0xa4>)
 8001162:	2200      	movs	r2, #0
 8001164:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <MX_TIM2_Init+0xa4>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <MX_TIM2_Init+0xa4>)
 800116e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001172:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <MX_TIM2_Init+0xa4>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <MX_TIM2_Init+0xa4>)
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001180:	2303      	movs	r3, #3
 8001182:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001188:	2301      	movs	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001198:	2301      	movs	r3, #1
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4619      	mov	r1, r3
 80011aa:	480d      	ldr	r0, [pc, #52]	; (80011e0 <MX_TIM2_Init+0xa4>)
 80011ac:	f002 ff70 	bl	8004090 <HAL_TIM_Encoder_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80011b6:	f000 fa45 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	4619      	mov	r1, r3
 80011c6:	4806      	ldr	r0, [pc, #24]	; (80011e0 <MX_TIM2_Init+0xa4>)
 80011c8:	f003 fe00 	bl	8004dcc <HAL_TIMEx_MasterConfigSynchronization>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80011d2:	f000 fa37 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	3730      	adds	r7, #48	; 0x30
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000358 	.word	0x20000358

080011e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08c      	sub	sp, #48	; 0x30
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	2224      	movs	r2, #36	; 0x24
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f004 fac0 	bl	8005778 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001200:	4b20      	ldr	r3, [pc, #128]	; (8001284 <MX_TIM3_Init+0xa0>)
 8001202:	4a21      	ldr	r2, [pc, #132]	; (8001288 <MX_TIM3_Init+0xa4>)
 8001204:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <MX_TIM3_Init+0xa0>)
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <MX_TIM3_Init+0xa0>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <MX_TIM3_Init+0xa0>)
 8001214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001218:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_TIM3_Init+0xa0>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_TIM3_Init+0xa0>)
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001226:	2303      	movs	r3, #3
 8001228:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800122e:	2301      	movs	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800123e:	2301      	movs	r3, #1
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	4619      	mov	r1, r3
 8001250:	480c      	ldr	r0, [pc, #48]	; (8001284 <MX_TIM3_Init+0xa0>)
 8001252:	f002 ff1d 	bl	8004090 <HAL_TIM_Encoder_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800125c:	f000 f9f2 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_TIM3_Init+0xa0>)
 800126e:	f003 fdad 	bl	8004dcc <HAL_TIMEx_MasterConfigSynchronization>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001278:	f000 f9e4 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	3730      	adds	r7, #48	; 0x30
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200002b4 	.word	0x200002b4
 8001288:	40000400 	.word	0x40000400

0800128c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_USART1_UART_Init+0x4c>)
 8001292:	4a12      	ldr	r2, [pc, #72]	; (80012dc <MX_USART1_UART_Init+0x50>)
 8001294:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_USART1_UART_Init+0x4c>)
 8001298:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800129c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_USART1_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_USART1_UART_Init+0x4c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <MX_USART1_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_USART1_UART_Init+0x4c>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <MX_USART1_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <MX_USART1_UART_Init+0x4c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_USART1_UART_Init+0x4c>)
 80012c4:	f003 fe43 	bl	8004f4e <HAL_UART_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012ce:	f000 f9b9 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000308 	.word	0x20000308
 80012dc:	40013800 	.word	0x40013800

080012e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f4:	4b28      	ldr	r3, [pc, #160]	; (8001398 <MX_GPIO_Init+0xb8>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a27      	ldr	r2, [pc, #156]	; (8001398 <MX_GPIO_Init+0xb8>)
 80012fa:	f043 0320 	orr.w	r3, r3, #32
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b25      	ldr	r3, [pc, #148]	; (8001398 <MX_GPIO_Init+0xb8>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0320 	and.w	r3, r3, #32
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b22      	ldr	r3, [pc, #136]	; (8001398 <MX_GPIO_Init+0xb8>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a21      	ldr	r2, [pc, #132]	; (8001398 <MX_GPIO_Init+0xb8>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <MX_GPIO_Init+0xb8>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001324:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <MX_GPIO_Init+0xb8>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <MX_GPIO_Init+0xb8>)
 800132a:	f043 0308 	orr.w	r3, r3, #8
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <MX_GPIO_Init+0xb8>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0308 	and.w	r3, r3, #8
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001342:	4816      	ldr	r0, [pc, #88]	; (800139c <MX_GPIO_Init+0xbc>)
 8001344:	f000 ffb8 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800134e:	4814      	ldr	r0, [pc, #80]	; (80013a0 <MX_GPIO_Init+0xc0>)
 8001350:	f000 ffb2 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN2_Pin|IN1_Pin;
 8001354:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2302      	movs	r3, #2
 8001364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	4619      	mov	r1, r3
 800136c:	480b      	ldr	r0, [pc, #44]	; (800139c <MX_GPIO_Init+0xbc>)
 800136e:	f000 fe49 	bl	8002004 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin;
 8001372:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2302      	movs	r3, #2
 8001382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	4619      	mov	r1, r3
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_GPIO_Init+0xc0>)
 800138c:	f000 fe3a 	bl	8002004 <HAL_GPIO_Init>

}
 8001390:	bf00      	nop
 8001392:	3720      	adds	r7, #32
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000
 800139c:	40010c00 	.word	0x40010c00
 80013a0:	40010800 	.word	0x40010800

080013a4 <MPU6050_Init>:

/* USER CODE BEGIN 4 */
void MPU6050_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af04      	add	r7, sp, #16
	uint8_t check, Data;
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I, 1, &check, 1, 1000);
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	2301      	movs	r3, #1
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	1dfb      	adds	r3, r7, #7
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2301      	movs	r3, #1
 80013ba:	2275      	movs	r2, #117	; 0x75
 80013bc:	21d0      	movs	r1, #208	; 0xd0
 80013be:	4823      	ldr	r0, [pc, #140]	; (800144c <MPU6050_Init+0xa8>)
 80013c0:	f001 fac2 	bl	8002948 <HAL_I2C_Mem_Read>
	if (check == 104)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	2b68      	cmp	r3, #104	; 0x68
 80013c8:	d13b      	bne.n	8001442 <MPU6050_Init+0x9e>
	{
		Data = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 80013ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d2:	9302      	str	r3, [sp, #8]
 80013d4:	2301      	movs	r3, #1
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	1dbb      	adds	r3, r7, #6
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2301      	movs	r3, #1
 80013de:	226b      	movs	r2, #107	; 0x6b
 80013e0:	21d0      	movs	r1, #208	; 0xd0
 80013e2:	481a      	ldr	r0, [pc, #104]	; (800144c <MPU6050_Init+0xa8>)
 80013e4:	f001 f9b6 	bl	8002754 <HAL_I2C_Mem_Write>
		Data = 0x07;
 80013e8:	2307      	movs	r3, #7
 80013ea:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_CONFIG_REG, 1, &Data, 1, 1000);
 80013ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f0:	9302      	str	r3, [sp, #8]
 80013f2:	2301      	movs	r3, #1
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	1dbb      	adds	r3, r7, #6
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2301      	movs	r3, #1
 80013fc:	2219      	movs	r2, #25
 80013fe:	21d0      	movs	r1, #208	; 0xd0
 8001400:	4812      	ldr	r0, [pc, #72]	; (800144c <MPU6050_Init+0xa8>)
 8001402:	f001 f9a7 	bl	8002754 <HAL_I2C_Mem_Write>
		Data = 0x00;
 8001406:	2300      	movs	r3, #0
 8001408:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 800140a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140e:	9302      	str	r3, [sp, #8]
 8001410:	2301      	movs	r3, #1
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	1dbb      	adds	r3, r7, #6
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2301      	movs	r3, #1
 800141a:	221b      	movs	r2, #27
 800141c:	21d0      	movs	r1, #208	; 0xd0
 800141e:	480b      	ldr	r0, [pc, #44]	; (800144c <MPU6050_Init+0xa8>)
 8001420:	f001 f998 	bl	8002754 <HAL_I2C_Mem_Write>
		Data = 0x00;
 8001424:	2300      	movs	r3, #0
 8001426:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8001428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	2301      	movs	r3, #1
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	1dbb      	adds	r3, r7, #6
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	2301      	movs	r3, #1
 8001438:	221c      	movs	r2, #28
 800143a:	21d0      	movs	r1, #208	; 0xd0
 800143c:	4803      	ldr	r0, [pc, #12]	; (800144c <MPU6050_Init+0xa8>)
 800143e:	f001 f989 	bl	8002754 <HAL_I2C_Mem_Write>
	}
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000258 	.word	0x20000258

08001450 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void)
{
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b087      	sub	sp, #28
 8001454:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145a:	9302      	str	r3, [sp, #8]
 800145c:	2306      	movs	r3, #6
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	463b      	mov	r3, r7
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2301      	movs	r3, #1
 8001466:	223b      	movs	r2, #59	; 0x3b
 8001468:	21d0      	movs	r1, #208	; 0xd0
 800146a:	482f      	ldr	r0, [pc, #188]	; (8001528 <MPU6050_Read_Accel+0xd8>)
 800146c:	f001 fa6c 	bl	8002948 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (uint16_t)(Rec_Data[0] << 8) | Rec_Data[1];
 8001470:	783b      	ldrb	r3, [r7, #0]
 8001472:	b29b      	uxth	r3, r3
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	b29a      	uxth	r2, r3
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	b29b      	uxth	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b29a      	uxth	r2, r3
 8001480:	4b2a      	ldr	r3, [pc, #168]	; (800152c <MPU6050_Read_Accel+0xdc>)
 8001482:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (uint16_t)(Rec_Data[2] << 8) | Rec_Data[3];
 8001484:	78bb      	ldrb	r3, [r7, #2]
 8001486:	b29b      	uxth	r3, r3
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	b29a      	uxth	r2, r3
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	b29b      	uxth	r3, r3
 8001490:	4313      	orrs	r3, r2
 8001492:	b29a      	uxth	r2, r3
 8001494:	4b26      	ldr	r3, [pc, #152]	; (8001530 <MPU6050_Read_Accel+0xe0>)
 8001496:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (uint16_t)(Rec_Data[4] << 8) | Rec_Data[5];
 8001498:	793b      	ldrb	r3, [r7, #4]
 800149a:	b29b      	uxth	r3, r3
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	b29a      	uxth	r2, r3
 80014a0:	797b      	ldrb	r3, [r7, #5]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <MPU6050_Read_Accel+0xe4>)
 80014aa:	801a      	strh	r2, [r3, #0]

	// Convert the RAW
	Ax = Accel_X_RAW/16384.0;
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <MPU6050_Read_Accel+0xdc>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe ffa7 	bl	8000404 <__aeabi_i2d>
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <MPU6050_Read_Accel+0xe8>)
 80014bc:	f7ff f936 	bl	800072c <__aeabi_ddiv>
 80014c0:	4603      	mov	r3, r0
 80014c2:	460c      	mov	r4, r1
 80014c4:	4618      	mov	r0, r3
 80014c6:	4621      	mov	r1, r4
 80014c8:	f7ff fade 	bl	8000a88 <__aeabi_d2f>
 80014cc:	4602      	mov	r2, r0
 80014ce:	4b1b      	ldr	r3, [pc, #108]	; (800153c <MPU6050_Read_Accel+0xec>)
 80014d0:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW/16384.0;
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <MPU6050_Read_Accel+0xe0>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe ff94 	bl	8000404 <__aeabi_i2d>
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <MPU6050_Read_Accel+0xe8>)
 80014e2:	f7ff f923 	bl	800072c <__aeabi_ddiv>
 80014e6:	4603      	mov	r3, r0
 80014e8:	460c      	mov	r4, r1
 80014ea:	4618      	mov	r0, r3
 80014ec:	4621      	mov	r1, r4
 80014ee:	f7ff facb 	bl	8000a88 <__aeabi_d2f>
 80014f2:	4602      	mov	r2, r0
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <MPU6050_Read_Accel+0xf0>)
 80014f6:	601a      	str	r2, [r3, #0]
	Az = Accel_Z_RAW/16384.0;
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MPU6050_Read_Accel+0xe4>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe ff81 	bl	8000404 <__aeabi_i2d>
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MPU6050_Read_Accel+0xe8>)
 8001508:	f7ff f910 	bl	800072c <__aeabi_ddiv>
 800150c:	4603      	mov	r3, r0
 800150e:	460c      	mov	r4, r1
 8001510:	4618      	mov	r0, r3
 8001512:	4621      	mov	r1, r4
 8001514:	f7ff fab8 	bl	8000a88 <__aeabi_d2f>
 8001518:	4602      	mov	r2, r0
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <MPU6050_Read_Accel+0xf4>)
 800151c:	601a      	str	r2, [r3, #0]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	bd90      	pop	{r4, r7, pc}
 8001526:	bf00      	nop
 8001528:	20000258 	.word	0x20000258
 800152c:	20000254 	.word	0x20000254
 8001530:	200002b2 	.word	0x200002b2
 8001534:	20000300 	.word	0x20000300
 8001538:	40d00000 	.word	0x40d00000
 800153c:	20000348 	.word	0x20000348
 8001540:	200002fc 	.word	0x200002fc
 8001544:	20000350 	.word	0x20000350

08001548 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void)
{
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b087      	sub	sp, #28
 800154c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800154e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001552:	9302      	str	r3, [sp, #8]
 8001554:	2306      	movs	r3, #6
 8001556:	9301      	str	r3, [sp, #4]
 8001558:	463b      	mov	r3, r7
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	2301      	movs	r3, #1
 800155e:	2243      	movs	r2, #67	; 0x43
 8001560:	21d0      	movs	r1, #208	; 0xd0
 8001562:	4831      	ldr	r0, [pc, #196]	; (8001628 <MPU6050_Read_Gyro+0xe0>)
 8001564:	f001 f9f0 	bl	8002948 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (uint16_t)(Rec_Data[0] << 8) | Rec_Data[1];
 8001568:	783b      	ldrb	r3, [r7, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	b29a      	uxth	r2, r3
 8001570:	787b      	ldrb	r3, [r7, #1]
 8001572:	b29b      	uxth	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b2c      	ldr	r3, [pc, #176]	; (800162c <MPU6050_Read_Gyro+0xe4>)
 800157a:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (uint16_t)(Rec_Data[2] << 8) | Rec_Data[3];
 800157c:	78bb      	ldrb	r3, [r7, #2]
 800157e:	b29b      	uxth	r3, r3
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b29a      	uxth	r2, r3
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	b29b      	uxth	r3, r3
 8001588:	4313      	orrs	r3, r2
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <MPU6050_Read_Gyro+0xe8>)
 800158e:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (uint16_t)(Rec_Data[4] << 8) | Rec_Data[5];
 8001590:	793b      	ldrb	r3, [r7, #4]
 8001592:	b29b      	uxth	r3, r3
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b29a      	uxth	r2, r3
 8001598:	797b      	ldrb	r3, [r7, #5]
 800159a:	b29b      	uxth	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b24      	ldr	r3, [pc, #144]	; (8001634 <MPU6050_Read_Gyro+0xec>)
 80015a2:	801a      	strh	r2, [r3, #0]

	// Convert the RAW
	Gx = Gyro_X_RAW/131.0;
 80015a4:	4b21      	ldr	r3, [pc, #132]	; (800162c <MPU6050_Read_Gyro+0xe4>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ff2b 	bl	8000404 <__aeabi_i2d>
 80015ae:	a31c      	add	r3, pc, #112	; (adr r3, 8001620 <MPU6050_Read_Gyro+0xd8>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f8ba 	bl	800072c <__aeabi_ddiv>
 80015b8:	4603      	mov	r3, r0
 80015ba:	460c      	mov	r4, r1
 80015bc:	4618      	mov	r0, r3
 80015be:	4621      	mov	r1, r4
 80015c0:	f7ff fa62 	bl	8000a88 <__aeabi_d2f>
 80015c4:	4602      	mov	r2, r0
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <MPU6050_Read_Gyro+0xf0>)
 80015c8:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <MPU6050_Read_Gyro+0xe8>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ff18 	bl	8000404 <__aeabi_i2d>
 80015d4:	a312      	add	r3, pc, #72	; (adr r3, 8001620 <MPU6050_Read_Gyro+0xd8>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7ff f8a7 	bl	800072c <__aeabi_ddiv>
 80015de:	4603      	mov	r3, r0
 80015e0:	460c      	mov	r4, r1
 80015e2:	4618      	mov	r0, r3
 80015e4:	4621      	mov	r1, r4
 80015e6:	f7ff fa4f 	bl	8000a88 <__aeabi_d2f>
 80015ea:	4602      	mov	r2, r0
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <MPU6050_Read_Gyro+0xf4>)
 80015ee:	601a      	str	r2, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <MPU6050_Read_Gyro+0xec>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ff05 	bl	8000404 <__aeabi_i2d>
 80015fa:	a309      	add	r3, pc, #36	; (adr r3, 8001620 <MPU6050_Read_Gyro+0xd8>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7ff f894 	bl	800072c <__aeabi_ddiv>
 8001604:	4603      	mov	r3, r0
 8001606:	460c      	mov	r4, r1
 8001608:	4618      	mov	r0, r3
 800160a:	4621      	mov	r1, r4
 800160c:	f7ff fa3c 	bl	8000a88 <__aeabi_d2f>
 8001610:	4602      	mov	r2, r0
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <MPU6050_Read_Gyro+0xf8>)
 8001614:	601a      	str	r2, [r3, #0]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bd90      	pop	{r4, r7, pc}
 800161e:	bf00      	nop
 8001620:	00000000 	.word	0x00000000
 8001624:	40606000 	.word	0x40606000
 8001628:	20000258 	.word	0x20000258
 800162c:	200002ac 	.word	0x200002ac
 8001630:	200003a0 	.word	0x200003a0
 8001634:	2000034c 	.word	0x2000034c
 8001638:	20000250 	.word	0x20000250
 800163c:	20000304 	.word	0x20000304
 8001640:	200003a4 	.word	0x200003a4

08001644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_MspInit+0x5c>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	4a14      	ldr	r2, [pc, #80]	; (80016ac <HAL_MspInit+0x5c>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6193      	str	r3, [r2, #24]
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_MspInit+0x5c>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <HAL_MspInit+0x5c>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <HAL_MspInit+0x5c>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001678:	61d3      	str	r3, [r2, #28]
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_MspInit+0x5c>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_MspInit+0x60>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <HAL_MspInit+0x60>)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010000 	.word	0x40010000

080016b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a1d      	ldr	r2, [pc, #116]	; (8001744 <HAL_I2C_MspInit+0x90>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d132      	bne.n	800173a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_I2C_MspInit+0x94>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <HAL_I2C_MspInit+0x94>)
 80016da:	f043 0308 	orr.w	r3, r3, #8
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_I2C_MspInit+0x94>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f2:	2312      	movs	r3, #18
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f6:	2303      	movs	r3, #3
 80016f8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	4812      	ldr	r0, [pc, #72]	; (800174c <HAL_I2C_MspInit+0x98>)
 8001702:	f000 fc7f 	bl	8002004 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_I2C_MspInit+0x9c>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	f043 0302 	orr.w	r3, r3, #2
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
 800171c:	4a0c      	ldr	r2, [pc, #48]	; (8001750 <HAL_I2C_MspInit+0x9c>)
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_I2C_MspInit+0x94>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	4a08      	ldr	r2, [pc, #32]	; (8001748 <HAL_I2C_MspInit+0x94>)
 8001728:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800172c:	61d3      	str	r3, [r2, #28]
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_I2C_MspInit+0x94>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800173a:	bf00      	nop
 800173c:	3728      	adds	r7, #40	; 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40005400 	.word	0x40005400
 8001748:	40021000 	.word	0x40021000
 800174c:	40010c00 	.word	0x40010c00
 8001750:	40010000 	.word	0x40010000

08001754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a09      	ldr	r2, [pc, #36]	; (8001788 <HAL_TIM_Base_MspInit+0x34>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d10b      	bne.n	800177e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_TIM_Base_MspInit+0x38>)
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_TIM_Base_MspInit+0x38>)
 800176c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001770:	6193      	str	r3, [r2, #24]
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_TIM_Base_MspInit+0x38>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	40012c00 	.word	0x40012c00
 800178c:	40021000 	.word	0x40021000

08001790 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0318 	add.w	r3, r7, #24
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ae:	d12c      	bne.n	800180a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <HAL_TIM_Encoder_MspInit+0xe4>)
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	4a2f      	ldr	r2, [pc, #188]	; (8001874 <HAL_TIM_Encoder_MspInit+0xe4>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	61d3      	str	r3, [r2, #28]
 80017bc:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <HAL_TIM_Encoder_MspInit+0xe4>)
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <HAL_TIM_Encoder_MspInit+0xe4>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a29      	ldr	r2, [pc, #164]	; (8001874 <HAL_TIM_Encoder_MspInit+0xe4>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	6193      	str	r3, [r2, #24]
 80017d4:	4b27      	ldr	r3, [pc, #156]	; (8001874 <HAL_TIM_Encoder_MspInit+0xe4>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017e0:	2303      	movs	r3, #3
 80017e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f107 0318 	add.w	r3, r7, #24
 80017f0:	4619      	mov	r1, r3
 80017f2:	4821      	ldr	r0, [pc, #132]	; (8001878 <HAL_TIM_Encoder_MspInit+0xe8>)
 80017f4:	f000 fc06 	bl	8002004 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	201c      	movs	r0, #28
 80017fe:	f000 fb54 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001802:	201c      	movs	r0, #28
 8001804:	f000 fb6d 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001808:	e030      	b.n	800186c <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM3)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a1b      	ldr	r2, [pc, #108]	; (800187c <HAL_TIM_Encoder_MspInit+0xec>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d12b      	bne.n	800186c <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	4a16      	ldr	r2, [pc, #88]	; (8001874 <HAL_TIM_Encoder_MspInit+0xe4>)
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	61d3      	str	r3, [r2, #28]
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_TIM_Encoder_MspInit+0xe4>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a10      	ldr	r2, [pc, #64]	; (8001874 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_TIM_Encoder_MspInit+0xe4>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001844:	23c0      	movs	r3, #192	; 0xc0
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001850:	f107 0318 	add.w	r3, r7, #24
 8001854:	4619      	mov	r1, r3
 8001856:	4808      	ldr	r0, [pc, #32]	; (8001878 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001858:	f000 fbd4 	bl	8002004 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	201d      	movs	r0, #29
 8001862:	f000 fb22 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001866:	201d      	movs	r0, #29
 8001868:	f000 fb3b 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
}
 800186c:	bf00      	nop
 800186e:	3728      	adds	r7, #40	; 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	40010800 	.word	0x40010800
 800187c:	40000400 	.word	0x40000400

08001880 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a10      	ldr	r2, [pc, #64]	; (80018dc <HAL_TIM_MspPostInit+0x5c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d118      	bne.n	80018d2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_TIM_MspPostInit+0x60>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <HAL_TIM_MspPostInit+0x60>)
 80018a6:	f043 0304 	orr.w	r3, r3, #4
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <HAL_TIM_MspPostInit+0x60>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = ENA_Pin|ENB_Pin;
 80018b8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80018bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2302      	movs	r3, #2
 80018c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c6:	f107 0310 	add.w	r3, r7, #16
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	; (80018e4 <HAL_TIM_MspPostInit+0x64>)
 80018ce:	f000 fb99 	bl	8002004 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018d2:	bf00      	nop
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40012c00 	.word	0x40012c00
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40010800 	.word	0x40010800

080018e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a26      	ldr	r2, [pc, #152]	; (800199c <HAL_UART_MspInit+0xb4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d145      	bne.n	8001994 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001908:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <HAL_UART_MspInit+0xb8>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a24      	ldr	r2, [pc, #144]	; (80019a0 <HAL_UART_MspInit+0xb8>)
 800190e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <HAL_UART_MspInit+0xb8>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001920:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <HAL_UART_MspInit+0xb8>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a1e      	ldr	r2, [pc, #120]	; (80019a0 <HAL_UART_MspInit+0xb8>)
 8001926:	f043 0308 	orr.w	r3, r3, #8
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <HAL_UART_MspInit+0xb8>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001938:	2340      	movs	r3, #64	; 0x40
 800193a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4619      	mov	r1, r3
 800194a:	4816      	ldr	r0, [pc, #88]	; (80019a4 <HAL_UART_MspInit+0xbc>)
 800194c:	f000 fb5a 	bl	8002004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	4810      	ldr	r0, [pc, #64]	; (80019a4 <HAL_UART_MspInit+0xbc>)
 8001964:	f000 fb4e 	bl	8002004 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <HAL_UART_MspInit+0xc0>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <HAL_UART_MspInit+0xc0>)
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001984:	2200      	movs	r2, #0
 8001986:	2100      	movs	r1, #0
 8001988:	2025      	movs	r0, #37	; 0x25
 800198a:	f000 fa8e 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800198e:	2025      	movs	r0, #37	; 0x25
 8001990:	f000 faa7 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001994:	bf00      	nop
 8001996:	3728      	adds	r7, #40	; 0x28
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40013800 	.word	0x40013800
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010c00 	.word	0x40010c00
 80019a8:	40010000 	.word	0x40010000

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <HardFault_Handler+0x4>

080019be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <MemManage_Handler+0x4>

080019c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <BusFault_Handler+0x4>

080019ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <UsageFault_Handler+0x4>

080019d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f8:	f000 f942 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a04:	4805      	ldr	r0, [pc, #20]	; (8001a1c <TIM2_IRQHandler+0x1c>)
 8001a06:	f002 fc92 	bl	800432e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  Encoder_Value_A = htim2.Instance->CNT;
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <TIM2_IRQHandler+0x1c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	b21a      	sxth	r2, r3
 8001a12:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <TIM2_IRQHandler+0x20>)
 8001a14:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000358 	.word	0x20000358
 8001a20:	200003a8 	.word	0x200003a8

08001a24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a28:	4805      	ldr	r0, [pc, #20]	; (8001a40 <TIM3_IRQHandler+0x1c>)
 8001a2a:	f002 fc80 	bl	800432e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  Encoder_Value_B = htim3.Instance->CNT;
 8001a2e:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <TIM3_IRQHandler+0x1c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	b21a      	sxth	r2, r3
 8001a36:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <TIM3_IRQHandler+0x20>)
 8001a38:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200002b4 	.word	0x200002b4
 8001a44:	200003aa 	.word	0x200003aa

08001a48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <USART1_IRQHandler+0x10>)
 8001a4e:	f003 fb5d 	bl	800510c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000308 	.word	0x20000308

08001a5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	e00a      	b.n	8001a84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a6e:	f3af 8000 	nop.w
 8001a72:	4601      	mov	r1, r0
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	60ba      	str	r2, [r7, #8]
 8001a7a:	b2ca      	uxtb	r2, r1
 8001a7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3301      	adds	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dbf0      	blt.n	8001a6e <_read+0x12>
	}

return len;
 8001a8c:	687b      	ldr	r3, [r7, #4]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	e009      	b.n	8001abc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	60ba      	str	r2, [r7, #8]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff f991 	bl	8000dd8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf1      	blt.n	8001aa8 <_write+0x12>
	}
	return len;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_close>:

int _close(int file)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af4:	605a      	str	r2, [r3, #4]
	return 0;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <_isatty>:

int _isatty(int file)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
	return 1;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
	return 0;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
	...

08001b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b38:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <_sbrk+0x5c>)
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <_sbrk+0x60>)
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <_sbrk+0x64>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <_sbrk+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d207      	bcs.n	8001b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b60:	f003 fde0 	bl	8005724 <__errno>
 8001b64:	4602      	mov	r2, r0
 8001b66:	230c      	movs	r3, #12
 8001b68:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e009      	b.n	8001b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <_sbrk+0x64>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20005000 	.word	0x20005000
 8001b90:	00000400 	.word	0x00000400
 8001b94:	200001fc 	.word	0x200001fc
 8001b98:	200003b8 	.word	0x200003b8

08001b9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ba8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001baa:	e003      	b.n	8001bb4 <LoopCopyDataInit>

08001bac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001bae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001bb0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001bb2:	3104      	adds	r1, #4

08001bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001bb4:	480a      	ldr	r0, [pc, #40]	; (8001be0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001bb8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001bba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001bbc:	d3f6      	bcc.n	8001bac <CopyDataInit>
  ldr r2, =_sbss
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001bc0:	e002      	b.n	8001bc8 <LoopFillZerobss>

08001bc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001bc4:	f842 3b04 	str.w	r3, [r2], #4

08001bc8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001bca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001bcc:	d3f9      	bcc.n	8001bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bce:	f7ff ffe5 	bl	8001b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f003 fdad 	bl	8005730 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bd6:	f7ff f913 	bl	8000e00 <main>
  bx lr
 8001bda:	4770      	bx	lr
  ldr r3, =_sidata
 8001bdc:	080081a8 	.word	0x080081a8
  ldr r0, =_sdata
 8001be0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001be4:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001be8:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001bec:	200003b4 	.word	0x200003b4

08001bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC1_2_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_Init+0x28>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <HAL_Init+0x28>)
 8001bfe:	f043 0310 	orr.w	r3, r3, #16
 8001c02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f000 f945 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f000 f808 	bl	8001c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c10:	f7ff fd1e 	bl	8001650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40022000 	.word	0x40022000

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_InitTick+0x54>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x58>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f95d 	bl	8001efe <HAL_SYSTICK_Config>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00e      	b.n	8001c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	d80a      	bhi.n	8001c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c54:	2200      	movs	r2, #0
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f000 f925 	bl	8001eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c60:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <HAL_InitTick+0x5c>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000004 	.word	0x20000004
 8001c78:	2000000c 	.word	0x2000000c
 8001c7c:	20000008 	.word	0x20000008

08001c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_IncTick+0x1c>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_IncTick+0x20>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a03      	ldr	r2, [pc, #12]	; (8001ca0 <HAL_IncTick+0x20>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	2000000c 	.word	0x2000000c
 8001ca0:	200003ac 	.word	0x200003ac

08001ca4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca8:	4b02      	ldr	r3, [pc, #8]	; (8001cb4 <HAL_GetTick+0x10>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	200003ac 	.word	0x200003ac

08001cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc0:	f7ff fff0 	bl	8001ca4 <HAL_GetTick>
 8001cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd0:	d005      	beq.n	8001cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_Delay+0x40>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cde:	bf00      	nop
 8001ce0:	f7ff ffe0 	bl	8001ca4 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d8f7      	bhi.n	8001ce0 <HAL_Delay+0x28>
  {
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	2000000c 	.word	0x2000000c

08001cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	60d3      	str	r3, [r2, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <__NVIC_GetPriorityGrouping+0x18>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	f003 0307 	and.w	r3, r3, #7
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	db0b      	blt.n	8001d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	f003 021f 	and.w	r2, r3, #31
 8001d78:	4906      	ldr	r1, [pc, #24]	; (8001d94 <__NVIC_EnableIRQ+0x34>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	2001      	movs	r0, #1
 8001d82:	fa00 f202 	lsl.w	r2, r0, r2
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100

08001d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6039      	str	r1, [r7, #0]
 8001da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db0a      	blt.n	8001dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	490c      	ldr	r1, [pc, #48]	; (8001de4 <__NVIC_SetPriority+0x4c>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	0112      	lsls	r2, r2, #4
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc0:	e00a      	b.n	8001dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4908      	ldr	r1, [pc, #32]	; (8001de8 <__NVIC_SetPriority+0x50>)
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	3b04      	subs	r3, #4
 8001dd0:	0112      	lsls	r2, r2, #4
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	761a      	strb	r2, [r3, #24]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000e100 	.word	0xe000e100
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	; 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f1c3 0307 	rsb	r3, r3, #7
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	bf28      	it	cs
 8001e0a:	2304      	movcs	r3, #4
 8001e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3304      	adds	r3, #4
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d902      	bls.n	8001e1c <NVIC_EncodePriority+0x30>
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3b03      	subs	r3, #3
 8001e1a:	e000      	b.n	8001e1e <NVIC_EncodePriority+0x32>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	401a      	ands	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43d9      	mvns	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	4313      	orrs	r3, r2
         );
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3724      	adds	r7, #36	; 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e60:	d301      	bcc.n	8001e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00f      	b.n	8001e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e66:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <SysTick_Config+0x40>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6e:	210f      	movs	r1, #15
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f7ff ff90 	bl	8001d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <SysTick_Config+0x40>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <SysTick_Config+0x40>)
 8001e80:	2207      	movs	r2, #7
 8001e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	e000e010 	.word	0xe000e010

08001e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff2d 	bl	8001cfc <__NVIC_SetPriorityGrouping>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ebc:	f7ff ff42 	bl	8001d44 <__NVIC_GetPriorityGrouping>
 8001ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	6978      	ldr	r0, [r7, #20]
 8001ec8:	f7ff ff90 	bl	8001dec <NVIC_EncodePriority>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff5f 	bl	8001d98 <__NVIC_SetPriority>
}
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff35 	bl	8001d60 <__NVIC_EnableIRQ>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffa2 	bl	8001e50 <SysTick_Config>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d005      	beq.n	8001f3a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2204      	movs	r2, #4
 8001f32:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
 8001f38:	e051      	b.n	8001fde <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 020e 	bic.w	r2, r2, #14
 8001f48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0201 	bic.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a22      	ldr	r2, [pc, #136]	; (8001fe8 <HAL_DMA_Abort_IT+0xd0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d029      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0xa0>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a20      	ldr	r2, [pc, #128]	; (8001fec <HAL_DMA_Abort_IT+0xd4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d022      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x9c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <HAL_DMA_Abort_IT+0xd8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d01a      	beq.n	8001fae <HAL_DMA_Abort_IT+0x96>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1d      	ldr	r2, [pc, #116]	; (8001ff4 <HAL_DMA_Abort_IT+0xdc>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d012      	beq.n	8001fa8 <HAL_DMA_Abort_IT+0x90>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1c      	ldr	r2, [pc, #112]	; (8001ff8 <HAL_DMA_Abort_IT+0xe0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_DMA_Abort_IT+0x8a>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1a      	ldr	r2, [pc, #104]	; (8001ffc <HAL_DMA_Abort_IT+0xe4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d102      	bne.n	8001f9c <HAL_DMA_Abort_IT+0x84>
 8001f96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f9a:	e00e      	b.n	8001fba <HAL_DMA_Abort_IT+0xa2>
 8001f9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fa0:	e00b      	b.n	8001fba <HAL_DMA_Abort_IT+0xa2>
 8001fa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fa6:	e008      	b.n	8001fba <HAL_DMA_Abort_IT+0xa2>
 8001fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fac:	e005      	b.n	8001fba <HAL_DMA_Abort_IT+0xa2>
 8001fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb2:	e002      	b.n	8001fba <HAL_DMA_Abort_IT+0xa2>
 8001fb4:	2310      	movs	r3, #16
 8001fb6:	e000      	b.n	8001fba <HAL_DMA_Abort_IT+0xa2>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	4a11      	ldr	r2, [pc, #68]	; (8002000 <HAL_DMA_Abort_IT+0xe8>)
 8001fbc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	4798      	blx	r3
    } 
  }
  return status;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40020008 	.word	0x40020008
 8001fec:	4002001c 	.word	0x4002001c
 8001ff0:	40020030 	.word	0x40020030
 8001ff4:	40020044 	.word	0x40020044
 8001ff8:	40020058 	.word	0x40020058
 8001ffc:	4002006c 	.word	0x4002006c
 8002000:	40020000 	.word	0x40020000

08002004 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002004:	b480      	push	{r7}
 8002006:	b08b      	sub	sp, #44	; 0x2c
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002012:	2300      	movs	r3, #0
 8002014:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002016:	e127      	b.n	8002268 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002018:	2201      	movs	r2, #1
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	429a      	cmp	r2, r3
 8002032:	f040 8116 	bne.w	8002262 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b12      	cmp	r3, #18
 800203c:	d034      	beq.n	80020a8 <HAL_GPIO_Init+0xa4>
 800203e:	2b12      	cmp	r3, #18
 8002040:	d80d      	bhi.n	800205e <HAL_GPIO_Init+0x5a>
 8002042:	2b02      	cmp	r3, #2
 8002044:	d02b      	beq.n	800209e <HAL_GPIO_Init+0x9a>
 8002046:	2b02      	cmp	r3, #2
 8002048:	d804      	bhi.n	8002054 <HAL_GPIO_Init+0x50>
 800204a:	2b00      	cmp	r3, #0
 800204c:	d031      	beq.n	80020b2 <HAL_GPIO_Init+0xae>
 800204e:	2b01      	cmp	r3, #1
 8002050:	d01c      	beq.n	800208c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002052:	e048      	b.n	80020e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002054:	2b03      	cmp	r3, #3
 8002056:	d043      	beq.n	80020e0 <HAL_GPIO_Init+0xdc>
 8002058:	2b11      	cmp	r3, #17
 800205a:	d01b      	beq.n	8002094 <HAL_GPIO_Init+0x90>
          break;
 800205c:	e043      	b.n	80020e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800205e:	4a89      	ldr	r2, [pc, #548]	; (8002284 <HAL_GPIO_Init+0x280>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d026      	beq.n	80020b2 <HAL_GPIO_Init+0xae>
 8002064:	4a87      	ldr	r2, [pc, #540]	; (8002284 <HAL_GPIO_Init+0x280>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d806      	bhi.n	8002078 <HAL_GPIO_Init+0x74>
 800206a:	4a87      	ldr	r2, [pc, #540]	; (8002288 <HAL_GPIO_Init+0x284>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d020      	beq.n	80020b2 <HAL_GPIO_Init+0xae>
 8002070:	4a86      	ldr	r2, [pc, #536]	; (800228c <HAL_GPIO_Init+0x288>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01d      	beq.n	80020b2 <HAL_GPIO_Init+0xae>
          break;
 8002076:	e036      	b.n	80020e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002078:	4a85      	ldr	r2, [pc, #532]	; (8002290 <HAL_GPIO_Init+0x28c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d019      	beq.n	80020b2 <HAL_GPIO_Init+0xae>
 800207e:	4a85      	ldr	r2, [pc, #532]	; (8002294 <HAL_GPIO_Init+0x290>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d016      	beq.n	80020b2 <HAL_GPIO_Init+0xae>
 8002084:	4a84      	ldr	r2, [pc, #528]	; (8002298 <HAL_GPIO_Init+0x294>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <HAL_GPIO_Init+0xae>
          break;
 800208a:	e02c      	b.n	80020e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	623b      	str	r3, [r7, #32]
          break;
 8002092:	e028      	b.n	80020e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	3304      	adds	r3, #4
 800209a:	623b      	str	r3, [r7, #32]
          break;
 800209c:	e023      	b.n	80020e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	3308      	adds	r3, #8
 80020a4:	623b      	str	r3, [r7, #32]
          break;
 80020a6:	e01e      	b.n	80020e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	330c      	adds	r3, #12
 80020ae:	623b      	str	r3, [r7, #32]
          break;
 80020b0:	e019      	b.n	80020e6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d102      	bne.n	80020c0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020ba:	2304      	movs	r3, #4
 80020bc:	623b      	str	r3, [r7, #32]
          break;
 80020be:	e012      	b.n	80020e6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d105      	bne.n	80020d4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020c8:	2308      	movs	r3, #8
 80020ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	611a      	str	r2, [r3, #16]
          break;
 80020d2:	e008      	b.n	80020e6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020d4:	2308      	movs	r3, #8
 80020d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	615a      	str	r2, [r3, #20]
          break;
 80020de:	e002      	b.n	80020e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020e0:	2300      	movs	r3, #0
 80020e2:	623b      	str	r3, [r7, #32]
          break;
 80020e4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2bff      	cmp	r3, #255	; 0xff
 80020ea:	d801      	bhi.n	80020f0 <HAL_GPIO_Init+0xec>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	e001      	b.n	80020f4 <HAL_GPIO_Init+0xf0>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3304      	adds	r3, #4
 80020f4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2bff      	cmp	r3, #255	; 0xff
 80020fa:	d802      	bhi.n	8002102 <HAL_GPIO_Init+0xfe>
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	e002      	b.n	8002108 <HAL_GPIO_Init+0x104>
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	3b08      	subs	r3, #8
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	210f      	movs	r1, #15
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	401a      	ands	r2, r3
 800211a:	6a39      	ldr	r1, [r7, #32]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	fa01 f303 	lsl.w	r3, r1, r3
 8002122:	431a      	orrs	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 8096 	beq.w	8002262 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002136:	4b59      	ldr	r3, [pc, #356]	; (800229c <HAL_GPIO_Init+0x298>)
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	4a58      	ldr	r2, [pc, #352]	; (800229c <HAL_GPIO_Init+0x298>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6193      	str	r3, [r2, #24]
 8002142:	4b56      	ldr	r3, [pc, #344]	; (800229c <HAL_GPIO_Init+0x298>)
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800214e:	4a54      	ldr	r2, [pc, #336]	; (80022a0 <HAL_GPIO_Init+0x29c>)
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	3302      	adds	r3, #2
 8002156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	220f      	movs	r2, #15
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4013      	ands	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4b      	ldr	r2, [pc, #300]	; (80022a4 <HAL_GPIO_Init+0x2a0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <HAL_GPIO_Init+0x19e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4a      	ldr	r2, [pc, #296]	; (80022a8 <HAL_GPIO_Init+0x2a4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00d      	beq.n	800219e <HAL_GPIO_Init+0x19a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a49      	ldr	r2, [pc, #292]	; (80022ac <HAL_GPIO_Init+0x2a8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d007      	beq.n	800219a <HAL_GPIO_Init+0x196>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a48      	ldr	r2, [pc, #288]	; (80022b0 <HAL_GPIO_Init+0x2ac>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d101      	bne.n	8002196 <HAL_GPIO_Init+0x192>
 8002192:	2303      	movs	r3, #3
 8002194:	e006      	b.n	80021a4 <HAL_GPIO_Init+0x1a0>
 8002196:	2304      	movs	r3, #4
 8002198:	e004      	b.n	80021a4 <HAL_GPIO_Init+0x1a0>
 800219a:	2302      	movs	r3, #2
 800219c:	e002      	b.n	80021a4 <HAL_GPIO_Init+0x1a0>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <HAL_GPIO_Init+0x1a0>
 80021a2:	2300      	movs	r3, #0
 80021a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a6:	f002 0203 	and.w	r2, r2, #3
 80021aa:	0092      	lsls	r2, r2, #2
 80021ac:	4093      	lsls	r3, r2
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021b4:	493a      	ldr	r1, [pc, #232]	; (80022a0 <HAL_GPIO_Init+0x29c>)
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	3302      	adds	r3, #2
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d006      	beq.n	80021dc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021ce:	4b39      	ldr	r3, [pc, #228]	; (80022b4 <HAL_GPIO_Init+0x2b0>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4938      	ldr	r1, [pc, #224]	; (80022b4 <HAL_GPIO_Init+0x2b0>)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]
 80021da:	e006      	b.n	80021ea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021dc:	4b35      	ldr	r3, [pc, #212]	; (80022b4 <HAL_GPIO_Init+0x2b0>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	4933      	ldr	r1, [pc, #204]	; (80022b4 <HAL_GPIO_Init+0x2b0>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d006      	beq.n	8002204 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021f6:	4b2f      	ldr	r3, [pc, #188]	; (80022b4 <HAL_GPIO_Init+0x2b0>)
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	492e      	ldr	r1, [pc, #184]	; (80022b4 <HAL_GPIO_Init+0x2b0>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	604b      	str	r3, [r1, #4]
 8002202:	e006      	b.n	8002212 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002204:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <HAL_GPIO_Init+0x2b0>)
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	43db      	mvns	r3, r3
 800220c:	4929      	ldr	r1, [pc, #164]	; (80022b4 <HAL_GPIO_Init+0x2b0>)
 800220e:	4013      	ands	r3, r2
 8002210:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d006      	beq.n	800222c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800221e:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <HAL_GPIO_Init+0x2b0>)
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	4924      	ldr	r1, [pc, #144]	; (80022b4 <HAL_GPIO_Init+0x2b0>)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	608b      	str	r3, [r1, #8]
 800222a:	e006      	b.n	800223a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800222c:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <HAL_GPIO_Init+0x2b0>)
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	43db      	mvns	r3, r3
 8002234:	491f      	ldr	r1, [pc, #124]	; (80022b4 <HAL_GPIO_Init+0x2b0>)
 8002236:	4013      	ands	r3, r2
 8002238:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d006      	beq.n	8002254 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002246:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <HAL_GPIO_Init+0x2b0>)
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	491a      	ldr	r1, [pc, #104]	; (80022b4 <HAL_GPIO_Init+0x2b0>)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	60cb      	str	r3, [r1, #12]
 8002252:	e006      	b.n	8002262 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002254:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <HAL_GPIO_Init+0x2b0>)
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	43db      	mvns	r3, r3
 800225c:	4915      	ldr	r1, [pc, #84]	; (80022b4 <HAL_GPIO_Init+0x2b0>)
 800225e:	4013      	ands	r3, r2
 8002260:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	3301      	adds	r3, #1
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	fa22 f303 	lsr.w	r3, r2, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	f47f aed0 	bne.w	8002018 <HAL_GPIO_Init+0x14>
  }
}
 8002278:	bf00      	nop
 800227a:	372c      	adds	r7, #44	; 0x2c
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	10210000 	.word	0x10210000
 8002288:	10110000 	.word	0x10110000
 800228c:	10120000 	.word	0x10120000
 8002290:	10310000 	.word	0x10310000
 8002294:	10320000 	.word	0x10320000
 8002298:	10220000 	.word	0x10220000
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010000 	.word	0x40010000
 80022a4:	40010800 	.word	0x40010800
 80022a8:	40010c00 	.word	0x40010c00
 80022ac:	40011000 	.word	0x40011000
 80022b0:	40011400 	.word	0x40011400
 80022b4:	40010400 	.word	0x40010400

080022b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
 80022c4:	4613      	mov	r3, r2
 80022c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022c8:	787b      	ldrb	r3, [r7, #1]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ce:	887a      	ldrh	r2, [r7, #2]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022d4:	e003      	b.n	80022de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022d6:	887b      	ldrh	r3, [r7, #2]
 80022d8:	041a      	lsls	r2, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	611a      	str	r2, [r3, #16]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e11f      	b.n	800253a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d106      	bne.n	8002314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff f9d0 	bl	80016b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2224      	movs	r2, #36	; 0x24
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800233a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800234a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800234c:	f001 fd10 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 8002350:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4a7b      	ldr	r2, [pc, #492]	; (8002544 <HAL_I2C_Init+0x25c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d807      	bhi.n	800236c <HAL_I2C_Init+0x84>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4a7a      	ldr	r2, [pc, #488]	; (8002548 <HAL_I2C_Init+0x260>)
 8002360:	4293      	cmp	r3, r2
 8002362:	bf94      	ite	ls
 8002364:	2301      	movls	r3, #1
 8002366:	2300      	movhi	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	e006      	b.n	800237a <HAL_I2C_Init+0x92>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4a77      	ldr	r2, [pc, #476]	; (800254c <HAL_I2C_Init+0x264>)
 8002370:	4293      	cmp	r3, r2
 8002372:	bf94      	ite	ls
 8002374:	2301      	movls	r3, #1
 8002376:	2300      	movhi	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e0db      	b.n	800253a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4a72      	ldr	r2, [pc, #456]	; (8002550 <HAL_I2C_Init+0x268>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	0c9b      	lsrs	r3, r3, #18
 800238c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	430a      	orrs	r2, r1
 80023a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4a64      	ldr	r2, [pc, #400]	; (8002544 <HAL_I2C_Init+0x25c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d802      	bhi.n	80023bc <HAL_I2C_Init+0xd4>
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	3301      	adds	r3, #1
 80023ba:	e009      	b.n	80023d0 <HAL_I2C_Init+0xe8>
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023c2:	fb02 f303 	mul.w	r3, r2, r3
 80023c6:	4a63      	ldr	r2, [pc, #396]	; (8002554 <HAL_I2C_Init+0x26c>)
 80023c8:	fba2 2303 	umull	r2, r3, r2, r3
 80023cc:	099b      	lsrs	r3, r3, #6
 80023ce:	3301      	adds	r3, #1
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	430b      	orrs	r3, r1
 80023d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4956      	ldr	r1, [pc, #344]	; (8002544 <HAL_I2C_Init+0x25c>)
 80023ec:	428b      	cmp	r3, r1
 80023ee:	d80d      	bhi.n	800240c <HAL_I2C_Init+0x124>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1e59      	subs	r1, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80023fe:	3301      	adds	r3, #1
 8002400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002404:	2b04      	cmp	r3, #4
 8002406:	bf38      	it	cc
 8002408:	2304      	movcc	r3, #4
 800240a:	e04f      	b.n	80024ac <HAL_I2C_Init+0x1c4>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d111      	bne.n	8002438 <HAL_I2C_Init+0x150>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1e58      	subs	r0, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6859      	ldr	r1, [r3, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	440b      	add	r3, r1
 8002422:	fbb0 f3f3 	udiv	r3, r0, r3
 8002426:	3301      	adds	r3, #1
 8002428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	e012      	b.n	800245e <HAL_I2C_Init+0x176>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1e58      	subs	r0, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	0099      	lsls	r1, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	fbb0 f3f3 	udiv	r3, r0, r3
 800244e:	3301      	adds	r3, #1
 8002450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf0c      	ite	eq
 8002458:	2301      	moveq	r3, #1
 800245a:	2300      	movne	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_Init+0x17e>
 8002462:	2301      	movs	r3, #1
 8002464:	e022      	b.n	80024ac <HAL_I2C_Init+0x1c4>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10e      	bne.n	800248c <HAL_I2C_Init+0x1a4>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1e58      	subs	r0, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6859      	ldr	r1, [r3, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	440b      	add	r3, r1
 800247c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002480:	3301      	adds	r3, #1
 8002482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800248a:	e00f      	b.n	80024ac <HAL_I2C_Init+0x1c4>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1e58      	subs	r0, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	0099      	lsls	r1, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a2:	3301      	adds	r3, #1
 80024a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	6809      	ldr	r1, [r1, #0]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69da      	ldr	r2, [r3, #28]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6911      	ldr	r1, [r2, #16]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68d2      	ldr	r2, [r2, #12]
 80024e6:	4311      	orrs	r1, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6812      	ldr	r2, [r2, #0]
 80024ec:	430b      	orrs	r3, r1
 80024ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2220      	movs	r2, #32
 8002526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	000186a0 	.word	0x000186a0
 8002548:	001e847f 	.word	0x001e847f
 800254c:	003d08ff 	.word	0x003d08ff
 8002550:	431bde83 	.word	0x431bde83
 8002554:	10624dd3 	.word	0x10624dd3

08002558 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	461a      	mov	r2, r3
 8002564:	460b      	mov	r3, r1
 8002566:	817b      	strh	r3, [r7, #10]
 8002568:	4613      	mov	r3, r2
 800256a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800256c:	f7ff fb9a 	bl	8001ca4 <HAL_GetTick>
 8002570:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b20      	cmp	r3, #32
 800257c:	f040 80e0 	bne.w	8002740 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2319      	movs	r3, #25
 8002586:	2201      	movs	r2, #1
 8002588:	4970      	ldr	r1, [pc, #448]	; (800274c <HAL_I2C_Master_Transmit+0x1f4>)
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 fe3e 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002596:	2302      	movs	r3, #2
 8002598:	e0d3      	b.n	8002742 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_I2C_Master_Transmit+0x50>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e0cc      	b.n	8002742 <HAL_I2C_Master_Transmit+0x1ea>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d007      	beq.n	80025ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0201 	orr.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2221      	movs	r2, #33	; 0x21
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2210      	movs	r2, #16
 80025ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	893a      	ldrh	r2, [r7, #8]
 80025fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4a50      	ldr	r2, [pc, #320]	; (8002750 <HAL_I2C_Master_Transmit+0x1f8>)
 800260e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002610:	8979      	ldrh	r1, [r7, #10]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	6a3a      	ldr	r2, [r7, #32]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fbf8 	bl	8002e0c <I2C_MasterRequestWrite>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e08d      	b.n	8002742 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800263c:	e066      	b.n	800270c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	6a39      	ldr	r1, [r7, #32]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 feb8 	bl	80033b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00d      	beq.n	800266a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	2b04      	cmp	r3, #4
 8002654:	d107      	bne.n	8002666 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002664:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e06b      	b.n	8002742 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	781a      	ldrb	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d11b      	bne.n	80026e0 <HAL_I2C_Master_Transmit+0x188>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d017      	beq.n	80026e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	781a      	ldrb	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	6a39      	ldr	r1, [r7, #32]
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 fea8 	bl	800343a <I2C_WaitOnBTFFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00d      	beq.n	800270c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d107      	bne.n	8002708 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002706:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e01a      	b.n	8002742 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002710:	2b00      	cmp	r3, #0
 8002712:	d194      	bne.n	800263e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	e000      	b.n	8002742 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002740:	2302      	movs	r3, #2
  }
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	00100002 	.word	0x00100002
 8002750:	ffff0000 	.word	0xffff0000

08002754 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af02      	add	r7, sp, #8
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	4608      	mov	r0, r1
 800275e:	4611      	mov	r1, r2
 8002760:	461a      	mov	r2, r3
 8002762:	4603      	mov	r3, r0
 8002764:	817b      	strh	r3, [r7, #10]
 8002766:	460b      	mov	r3, r1
 8002768:	813b      	strh	r3, [r7, #8]
 800276a:	4613      	mov	r3, r2
 800276c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800276e:	f7ff fa99 	bl	8001ca4 <HAL_GetTick>
 8002772:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b20      	cmp	r3, #32
 800277e:	f040 80d9 	bne.w	8002934 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	2319      	movs	r3, #25
 8002788:	2201      	movs	r2, #1
 800278a:	496d      	ldr	r1, [pc, #436]	; (8002940 <HAL_I2C_Mem_Write+0x1ec>)
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fd3d 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002798:	2302      	movs	r3, #2
 800279a:	e0cc      	b.n	8002936 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_I2C_Mem_Write+0x56>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e0c5      	b.n	8002936 <HAL_I2C_Mem_Write+0x1e2>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d007      	beq.n	80027d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0201 	orr.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2221      	movs	r2, #33	; 0x21
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2240      	movs	r2, #64	; 0x40
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a3a      	ldr	r2, [r7, #32]
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002800:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4a4d      	ldr	r2, [pc, #308]	; (8002944 <HAL_I2C_Mem_Write+0x1f0>)
 8002810:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002812:	88f8      	ldrh	r0, [r7, #6]
 8002814:	893a      	ldrh	r2, [r7, #8]
 8002816:	8979      	ldrh	r1, [r7, #10]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	9301      	str	r3, [sp, #4]
 800281c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	4603      	mov	r3, r0
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 fb74 	bl	8002f10 <I2C_RequestMemoryWrite>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d052      	beq.n	80028d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e081      	b.n	8002936 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 fdbe 	bl	80033b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00d      	beq.n	800285e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	2b04      	cmp	r3, #4
 8002848:	d107      	bne.n	800285a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002858:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e06b      	b.n	8002936 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	781a      	ldrb	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b04      	cmp	r3, #4
 800289a:	d11b      	bne.n	80028d4 <HAL_I2C_Mem_Write+0x180>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d017      	beq.n	80028d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	781a      	ldrb	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1aa      	bne.n	8002832 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fdaa 	bl	800343a <I2C_WaitOnBTFFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00d      	beq.n	8002908 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d107      	bne.n	8002904 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002902:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e016      	b.n	8002936 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	e000      	b.n	8002936 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002934:	2302      	movs	r3, #2
  }
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	00100002 	.word	0x00100002
 8002944:	ffff0000 	.word	0xffff0000

08002948 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08c      	sub	sp, #48	; 0x30
 800294c:	af02      	add	r7, sp, #8
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	4608      	mov	r0, r1
 8002952:	4611      	mov	r1, r2
 8002954:	461a      	mov	r2, r3
 8002956:	4603      	mov	r3, r0
 8002958:	817b      	strh	r3, [r7, #10]
 800295a:	460b      	mov	r3, r1
 800295c:	813b      	strh	r3, [r7, #8]
 800295e:	4613      	mov	r3, r2
 8002960:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002966:	f7ff f99d 	bl	8001ca4 <HAL_GetTick>
 800296a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b20      	cmp	r3, #32
 8002976:	f040 823d 	bne.w	8002df4 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2319      	movs	r3, #25
 8002980:	2201      	movs	r2, #1
 8002982:	4981      	ldr	r1, [pc, #516]	; (8002b88 <HAL_I2C_Mem_Read+0x240>)
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fc41 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002990:	2302      	movs	r3, #2
 8002992:	e230      	b.n	8002df6 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_I2C_Mem_Read+0x5a>
 800299e:	2302      	movs	r3, #2
 80029a0:	e229      	b.n	8002df6 <HAL_I2C_Mem_Read+0x4ae>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d007      	beq.n	80029c8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2222      	movs	r2, #34	; 0x22
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2240      	movs	r2, #64	; 0x40
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80029f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4a61      	ldr	r2, [pc, #388]	; (8002b8c <HAL_I2C_Mem_Read+0x244>)
 8002a08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a0a:	88f8      	ldrh	r0, [r7, #6]
 8002a0c:	893a      	ldrh	r2, [r7, #8]
 8002a0e:	8979      	ldrh	r1, [r7, #10]
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	9301      	str	r3, [sp, #4]
 8002a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	4603      	mov	r3, r0
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 fb0e 	bl	800303c <I2C_RequestMemoryRead>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e1e5      	b.n	8002df6 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d113      	bne.n	8002a5a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	e1b9      	b.n	8002dce <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d11d      	bne.n	8002a9e <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a70:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a72:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a74:	2300      	movs	r3, #0
 8002a76:	61bb      	str	r3, [r7, #24]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	61bb      	str	r3, [r7, #24]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	61bb      	str	r3, [r7, #24]
 8002a88:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a9a:	b662      	cpsie	i
 8002a9c:	e197      	b.n	8002dce <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d11d      	bne.n	8002ae2 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ab4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ab6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002adc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ade:	b662      	cpsie	i
 8002ae0:	e175      	b.n	8002dce <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002af0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b08:	e161      	b.n	8002dce <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	f200 811a 	bhi.w	8002d48 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d123      	bne.n	8002b64 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 fccb 	bl	80034bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e162      	b.n	8002df6 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691a      	ldr	r2, [r3, #16]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b62:	e134      	b.n	8002dce <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d150      	bne.n	8002c0e <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b72:	2200      	movs	r2, #0
 8002b74:	4906      	ldr	r1, [pc, #24]	; (8002b90 <HAL_I2C_Mem_Read+0x248>)
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 fb48 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e137      	b.n	8002df6 <HAL_I2C_Mem_Read+0x4ae>
 8002b86:	bf00      	nop
 8002b88:	00100002 	.word	0x00100002
 8002b8c:	ffff0000 	.word	0xffff0000
 8002b90:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002b94:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bd8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c0c:	e0df      	b.n	8002dce <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c14:	2200      	movs	r2, #0
 8002c16:	497a      	ldr	r1, [pc, #488]	; (8002e00 <HAL_I2C_Mem_Read+0x4b8>)
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 faf7 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0e6      	b.n	8002df6 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c38:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c6c:	4b65      	ldr	r3, [pc, #404]	; (8002e04 <HAL_I2C_Mem_Read+0x4bc>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	08db      	lsrs	r3, r3, #3
 8002c72:	4a65      	ldr	r2, [pc, #404]	; (8002e08 <HAL_I2C_Mem_Read+0x4c0>)
 8002c74:	fba2 2303 	umull	r2, r3, r2, r3
 8002c78:	0a1a      	lsrs	r2, r3, #8
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	00da      	lsls	r2, r3, #3
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d117      	bne.n	8002cc2 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	f043 0220 	orr.w	r2, r3, #32
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002cb4:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e099      	b.n	8002df6 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d1da      	bne.n	8002c86 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d12:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d46:	e042      	b.n	8002dce <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fbb5 	bl	80034bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e04c      	b.n	8002df6 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d118      	bne.n	8002dce <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f47f ae99 	bne.w	8002b0a <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3728      	adds	r7, #40	; 0x28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	00010004 	.word	0x00010004
 8002e04:	20000004 	.word	0x20000004
 8002e08:	14f8b589 	.word	0x14f8b589

08002e0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	607a      	str	r2, [r7, #4]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d006      	beq.n	8002e36 <I2C_MasterRequestWrite+0x2a>
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d003      	beq.n	8002e36 <I2C_MasterRequestWrite+0x2a>
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e34:	d108      	bne.n	8002e48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	e00b      	b.n	8002e60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	2b12      	cmp	r3, #18
 8002e4e:	d107      	bne.n	8002e60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f9cd 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00d      	beq.n	8002e94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e86:	d103      	bne.n	8002e90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e035      	b.n	8002f00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e9c:	d108      	bne.n	8002eb0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e9e:	897b      	ldrh	r3, [r7, #10]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002eac:	611a      	str	r2, [r3, #16]
 8002eae:	e01b      	b.n	8002ee8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002eb0:	897b      	ldrh	r3, [r7, #10]
 8002eb2:	11db      	asrs	r3, r3, #7
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	f003 0306 	and.w	r3, r3, #6
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	f063 030f 	orn	r3, r3, #15
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	490e      	ldr	r1, [pc, #56]	; (8002f08 <I2C_MasterRequestWrite+0xfc>)
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f9f3 	bl	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e010      	b.n	8002f00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ede:	897b      	ldrh	r3, [r7, #10]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	4907      	ldr	r1, [pc, #28]	; (8002f0c <I2C_MasterRequestWrite+0x100>)
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f9e3 	bl	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	00010008 	.word	0x00010008
 8002f0c:	00010002 	.word	0x00010002

08002f10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	4608      	mov	r0, r1
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4603      	mov	r3, r0
 8002f20:	817b      	strh	r3, [r7, #10]
 8002f22:	460b      	mov	r3, r1
 8002f24:	813b      	strh	r3, [r7, #8]
 8002f26:	4613      	mov	r3, r2
 8002f28:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f960 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00d      	beq.n	8002f6e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f60:	d103      	bne.n	8002f6a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e05f      	b.n	800302e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f6e:	897b      	ldrh	r3, [r7, #10]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	6a3a      	ldr	r2, [r7, #32]
 8002f82:	492d      	ldr	r1, [pc, #180]	; (8003038 <I2C_RequestMemoryWrite+0x128>)
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f998 	bl	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e04c      	b.n	800302e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fac:	6a39      	ldr	r1, [r7, #32]
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 fa02 	bl	80033b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00d      	beq.n	8002fd6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d107      	bne.n	8002fd2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e02b      	b.n	800302e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d105      	bne.n	8002fe8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fdc:	893b      	ldrh	r3, [r7, #8]
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	611a      	str	r2, [r3, #16]
 8002fe6:	e021      	b.n	800302c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fe8:	893b      	ldrh	r3, [r7, #8]
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff8:	6a39      	ldr	r1, [r7, #32]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f9dc 	bl	80033b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00d      	beq.n	8003022 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2b04      	cmp	r3, #4
 800300c:	d107      	bne.n	800301e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e005      	b.n	800302e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003022:	893b      	ldrh	r3, [r7, #8]
 8003024:	b2da      	uxtb	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	00010002 	.word	0x00010002

0800303c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	4608      	mov	r0, r1
 8003046:	4611      	mov	r1, r2
 8003048:	461a      	mov	r2, r3
 800304a:	4603      	mov	r3, r0
 800304c:	817b      	strh	r3, [r7, #10]
 800304e:	460b      	mov	r3, r1
 8003050:	813b      	strh	r3, [r7, #8]
 8003052:	4613      	mov	r3, r2
 8003054:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003064:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003074:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	2200      	movs	r2, #0
 800307e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f8c2 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00d      	beq.n	80030aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800309c:	d103      	bne.n	80030a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e0aa      	b.n	8003200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030aa:	897b      	ldrh	r3, [r7, #10]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	461a      	mov	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	6a3a      	ldr	r2, [r7, #32]
 80030be:	4952      	ldr	r1, [pc, #328]	; (8003208 <I2C_RequestMemoryRead+0x1cc>)
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f8fa 	bl	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e097      	b.n	8003200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e8:	6a39      	ldr	r1, [r7, #32]
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f964 	bl	80033b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00d      	beq.n	8003112 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d107      	bne.n	800310e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e076      	b.n	8003200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d105      	bne.n	8003124 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003118:	893b      	ldrh	r3, [r7, #8]
 800311a:	b2da      	uxtb	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	611a      	str	r2, [r3, #16]
 8003122:	e021      	b.n	8003168 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003124:	893b      	ldrh	r3, [r7, #8]
 8003126:	0a1b      	lsrs	r3, r3, #8
 8003128:	b29b      	uxth	r3, r3
 800312a:	b2da      	uxtb	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003134:	6a39      	ldr	r1, [r7, #32]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f93e 	bl	80033b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00d      	beq.n	800315e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	2b04      	cmp	r3, #4
 8003148:	d107      	bne.n	800315a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003158:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e050      	b.n	8003200 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800315e:	893b      	ldrh	r3, [r7, #8]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316a:	6a39      	ldr	r1, [r7, #32]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f923 	bl	80033b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00d      	beq.n	8003194 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	2b04      	cmp	r3, #4
 800317e:	d107      	bne.n	8003190 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e035      	b.n	8003200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 f82b 	bl	800320c <I2C_WaitOnFlagUntilTimeout>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00d      	beq.n	80031d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ca:	d103      	bne.n	80031d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e013      	b.n	8003200 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031d8:	897b      	ldrh	r3, [r7, #10]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	6a3a      	ldr	r2, [r7, #32]
 80031ec:	4906      	ldr	r1, [pc, #24]	; (8003208 <I2C_RequestMemoryRead+0x1cc>)
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f863 	bl	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	00010002 	.word	0x00010002

0800320c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	4613      	mov	r3, r2
 800321a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800321c:	e025      	b.n	800326a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003224:	d021      	beq.n	800326a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003226:	f7fe fd3d 	bl	8001ca4 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d302      	bcc.n	800323c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d116      	bne.n	800326a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f043 0220 	orr.w	r2, r3, #32
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e023      	b.n	80032b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d10d      	bne.n	8003290 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	43da      	mvns	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4013      	ands	r3, r2
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	bf0c      	ite	eq
 8003286:	2301      	moveq	r3, #1
 8003288:	2300      	movne	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	e00c      	b.n	80032aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	43da      	mvns	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4013      	ands	r3, r2
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bf0c      	ite	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	2300      	movne	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d0b6      	beq.n	800321e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032c8:	e051      	b.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d8:	d123      	bne.n	8003322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f043 0204 	orr.w	r2, r3, #4
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e046      	b.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d021      	beq.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332a:	f7fe fcbb 	bl	8001ca4 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	429a      	cmp	r2, r3
 8003338:	d302      	bcc.n	8003340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d116      	bne.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f043 0220 	orr.w	r2, r3, #32
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e020      	b.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d10c      	bne.n	8003392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	4013      	ands	r3, r2
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	bf14      	ite	ne
 800338a:	2301      	movne	r3, #1
 800338c:	2300      	moveq	r3, #0
 800338e:	b2db      	uxtb	r3, r3
 8003390:	e00b      	b.n	80033aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	43da      	mvns	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4013      	ands	r3, r2
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf14      	ite	ne
 80033a4:	2301      	movne	r3, #1
 80033a6:	2300      	moveq	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d18d      	bne.n	80032ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c4:	e02d      	b.n	8003422 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f8ce 	bl	8003568 <I2C_IsAcknowledgeFailed>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e02d      	b.n	8003432 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033dc:	d021      	beq.n	8003422 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033de:	f7fe fc61 	bl	8001ca4 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d302      	bcc.n	80033f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d116      	bne.n	8003422 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e007      	b.n	8003432 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b80      	cmp	r3, #128	; 0x80
 800342e:	d1ca      	bne.n	80033c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003446:	e02d      	b.n	80034a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f88d 	bl	8003568 <I2C_IsAcknowledgeFailed>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e02d      	b.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345e:	d021      	beq.n	80034a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003460:	f7fe fc20 	bl	8001ca4 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	429a      	cmp	r2, r3
 800346e:	d302      	bcc.n	8003476 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d116      	bne.n	80034a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e007      	b.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d1ca      	bne.n	8003448 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034c8:	e042      	b.n	8003550 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	d119      	bne.n	800350c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0210 	mvn.w	r2, #16
 80034e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e029      	b.n	8003560 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350c:	f7fe fbca 	bl	8001ca4 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	429a      	cmp	r2, r3
 800351a:	d302      	bcc.n	8003522 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d116      	bne.n	8003550 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f043 0220 	orr.w	r2, r3, #32
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e007      	b.n	8003560 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355a:	2b40      	cmp	r3, #64	; 0x40
 800355c:	d1b5      	bne.n	80034ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357e:	d11b      	bne.n	80035b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003588:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	f043 0204 	orr.w	r2, r3, #4
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e26c      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8087 	beq.w	80036f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e4:	4b92      	ldr	r3, [pc, #584]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 030c 	and.w	r3, r3, #12
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	d00c      	beq.n	800360a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035f0:	4b8f      	ldr	r3, [pc, #572]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d112      	bne.n	8003622 <HAL_RCC_OscConfig+0x5e>
 80035fc:	4b8c      	ldr	r3, [pc, #560]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003608:	d10b      	bne.n	8003622 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360a:	4b89      	ldr	r3, [pc, #548]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d06c      	beq.n	80036f0 <HAL_RCC_OscConfig+0x12c>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d168      	bne.n	80036f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e246      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362a:	d106      	bne.n	800363a <HAL_RCC_OscConfig+0x76>
 800362c:	4b80      	ldr	r3, [pc, #512]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a7f      	ldr	r2, [pc, #508]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	e02e      	b.n	8003698 <HAL_RCC_OscConfig+0xd4>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x98>
 8003642:	4b7b      	ldr	r3, [pc, #492]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a7a      	ldr	r2, [pc, #488]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b78      	ldr	r3, [pc, #480]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a77      	ldr	r2, [pc, #476]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e01d      	b.n	8003698 <HAL_RCC_OscConfig+0xd4>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0xbc>
 8003666:	4b72      	ldr	r3, [pc, #456]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a71      	ldr	r2, [pc, #452]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 800366c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b6f      	ldr	r3, [pc, #444]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a6e      	ldr	r2, [pc, #440]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e00b      	b.n	8003698 <HAL_RCC_OscConfig+0xd4>
 8003680:	4b6b      	ldr	r3, [pc, #428]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a6a      	ldr	r2, [pc, #424]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b68      	ldr	r3, [pc, #416]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a67      	ldr	r2, [pc, #412]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003696:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d013      	beq.n	80036c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7fe fb00 	bl	8001ca4 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a8:	f7fe fafc 	bl	8001ca4 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	; 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e1fa      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ba:	4b5d      	ldr	r3, [pc, #372]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0xe4>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c8:	f7fe faec 	bl	8001ca4 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d0:	f7fe fae8 	bl	8001ca4 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	; 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e1e6      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e2:	4b53      	ldr	r3, [pc, #332]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x10c>
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d063      	beq.n	80037c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036fe:	4b4c      	ldr	r3, [pc, #304]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800370a:	4b49      	ldr	r3, [pc, #292]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b08      	cmp	r3, #8
 8003714:	d11c      	bne.n	8003750 <HAL_RCC_OscConfig+0x18c>
 8003716:	4b46      	ldr	r3, [pc, #280]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d116      	bne.n	8003750 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003722:	4b43      	ldr	r3, [pc, #268]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_RCC_OscConfig+0x176>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d001      	beq.n	800373a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e1ba      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373a:	4b3d      	ldr	r3, [pc, #244]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4939      	ldr	r1, [pc, #228]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374e:	e03a      	b.n	80037c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d020      	beq.n	800379a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003758:	4b36      	ldr	r3, [pc, #216]	; (8003834 <HAL_RCC_OscConfig+0x270>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fe faa1 	bl	8001ca4 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003766:	f7fe fa9d 	bl	8001ca4 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e19b      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003778:	4b2d      	ldr	r3, [pc, #180]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003784:	4b2a      	ldr	r3, [pc, #168]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4927      	ldr	r1, [pc, #156]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 8003794:	4313      	orrs	r3, r2
 8003796:	600b      	str	r3, [r1, #0]
 8003798:	e015      	b.n	80037c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800379a:	4b26      	ldr	r3, [pc, #152]	; (8003834 <HAL_RCC_OscConfig+0x270>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fe fa80 	bl	8001ca4 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a8:	f7fe fa7c 	bl	8001ca4 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e17a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ba:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d03a      	beq.n	8003848 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d019      	beq.n	800380e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037da:	4b17      	ldr	r3, [pc, #92]	; (8003838 <HAL_RCC_OscConfig+0x274>)
 80037dc:	2201      	movs	r2, #1
 80037de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e0:	f7fe fa60 	bl	8001ca4 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e8:	f7fe fa5c 	bl	8001ca4 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e15a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fa:	4b0d      	ldr	r3, [pc, #52]	; (8003830 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003806:	2001      	movs	r0, #1
 8003808:	f000 fada 	bl	8003dc0 <RCC_Delay>
 800380c:	e01c      	b.n	8003848 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800380e:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <HAL_RCC_OscConfig+0x274>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003814:	f7fe fa46 	bl	8001ca4 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800381a:	e00f      	b.n	800383c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800381c:	f7fe fa42 	bl	8001ca4 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d908      	bls.n	800383c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e140      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4ec>
 800382e:	bf00      	nop
 8003830:	40021000 	.word	0x40021000
 8003834:	42420000 	.word	0x42420000
 8003838:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800383c:	4b9e      	ldr	r3, [pc, #632]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e9      	bne.n	800381c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80a6 	beq.w	80039a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003856:	2300      	movs	r3, #0
 8003858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800385a:	4b97      	ldr	r3, [pc, #604]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10d      	bne.n	8003882 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003866:	4b94      	ldr	r3, [pc, #592]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	4a93      	ldr	r2, [pc, #588]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 800386c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003870:	61d3      	str	r3, [r2, #28]
 8003872:	4b91      	ldr	r3, [pc, #580]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800387e:	2301      	movs	r3, #1
 8003880:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003882:	4b8e      	ldr	r3, [pc, #568]	; (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d118      	bne.n	80038c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800388e:	4b8b      	ldr	r3, [pc, #556]	; (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a8a      	ldr	r2, [pc, #552]	; (8003abc <HAL_RCC_OscConfig+0x4f8>)
 8003894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389a:	f7fe fa03 	bl	8001ca4 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a2:	f7fe f9ff 	bl	8001ca4 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b64      	cmp	r3, #100	; 0x64
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e0fd      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b4:	4b81      	ldr	r3, [pc, #516]	; (8003abc <HAL_RCC_OscConfig+0x4f8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0f0      	beq.n	80038a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d106      	bne.n	80038d6 <HAL_RCC_OscConfig+0x312>
 80038c8:	4b7b      	ldr	r3, [pc, #492]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	4a7a      	ldr	r2, [pc, #488]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	6213      	str	r3, [r2, #32]
 80038d4:	e02d      	b.n	8003932 <HAL_RCC_OscConfig+0x36e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCC_OscConfig+0x334>
 80038de:	4b76      	ldr	r3, [pc, #472]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	4a75      	ldr	r2, [pc, #468]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	6213      	str	r3, [r2, #32]
 80038ea:	4b73      	ldr	r3, [pc, #460]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	4a72      	ldr	r2, [pc, #456]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 80038f0:	f023 0304 	bic.w	r3, r3, #4
 80038f4:	6213      	str	r3, [r2, #32]
 80038f6:	e01c      	b.n	8003932 <HAL_RCC_OscConfig+0x36e>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	2b05      	cmp	r3, #5
 80038fe:	d10c      	bne.n	800391a <HAL_RCC_OscConfig+0x356>
 8003900:	4b6d      	ldr	r3, [pc, #436]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	4a6c      	ldr	r2, [pc, #432]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 8003906:	f043 0304 	orr.w	r3, r3, #4
 800390a:	6213      	str	r3, [r2, #32]
 800390c:	4b6a      	ldr	r3, [pc, #424]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	4a69      	ldr	r2, [pc, #420]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	6213      	str	r3, [r2, #32]
 8003918:	e00b      	b.n	8003932 <HAL_RCC_OscConfig+0x36e>
 800391a:	4b67      	ldr	r3, [pc, #412]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	4a66      	ldr	r2, [pc, #408]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	6213      	str	r3, [r2, #32]
 8003926:	4b64      	ldr	r3, [pc, #400]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	4a63      	ldr	r2, [pc, #396]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 800392c:	f023 0304 	bic.w	r3, r3, #4
 8003930:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d015      	beq.n	8003966 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393a:	f7fe f9b3 	bl	8001ca4 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003940:	e00a      	b.n	8003958 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003942:	f7fe f9af 	bl	8001ca4 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003950:	4293      	cmp	r3, r2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e0ab      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003958:	4b57      	ldr	r3, [pc, #348]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0ee      	beq.n	8003942 <HAL_RCC_OscConfig+0x37e>
 8003964:	e014      	b.n	8003990 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003966:	f7fe f99d 	bl	8001ca4 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800396c:	e00a      	b.n	8003984 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396e:	f7fe f999 	bl	8001ca4 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	f241 3288 	movw	r2, #5000	; 0x1388
 800397c:	4293      	cmp	r3, r2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e095      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003984:	4b4c      	ldr	r3, [pc, #304]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1ee      	bne.n	800396e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003990:	7dfb      	ldrb	r3, [r7, #23]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d105      	bne.n	80039a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003996:	4b48      	ldr	r3, [pc, #288]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	4a47      	ldr	r2, [pc, #284]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 800399c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 8081 	beq.w	8003aae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039ac:	4b42      	ldr	r3, [pc, #264]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 030c 	and.w	r3, r3, #12
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d061      	beq.n	8003a7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d146      	bne.n	8003a4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c0:	4b3f      	ldr	r3, [pc, #252]	; (8003ac0 <HAL_RCC_OscConfig+0x4fc>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c6:	f7fe f96d 	bl	8001ca4 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ce:	f7fe f969 	bl	8001ca4 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e067      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e0:	4b35      	ldr	r3, [pc, #212]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f0      	bne.n	80039ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f4:	d108      	bne.n	8003a08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039f6:	4b30      	ldr	r3, [pc, #192]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	492d      	ldr	r1, [pc, #180]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a08:	4b2b      	ldr	r3, [pc, #172]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a19      	ldr	r1, [r3, #32]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	4927      	ldr	r1, [pc, #156]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a20:	4b27      	ldr	r3, [pc, #156]	; (8003ac0 <HAL_RCC_OscConfig+0x4fc>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a26:	f7fe f93d 	bl	8001ca4 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2e:	f7fe f939 	bl	8001ca4 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e037      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a40:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x46a>
 8003a4c:	e02f      	b.n	8003aae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <HAL_RCC_OscConfig+0x4fc>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a54:	f7fe f926 	bl	8001ca4 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a5c:	f7fe f922 	bl	8001ca4 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e020      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a6e:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0x498>
 8003a7a:	e018      	b.n	8003aae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e013      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <HAL_RCC_OscConfig+0x4f4>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d106      	bne.n	8003aaa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d001      	beq.n	8003aae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40007000 	.word	0x40007000
 8003ac0:	42420060 	.word	0x42420060

08003ac4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0d0      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b6a      	ldr	r3, [pc, #424]	; (8003c84 <HAL_RCC_ClockConfig+0x1c0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d910      	bls.n	8003b08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b67      	ldr	r3, [pc, #412]	; (8003c84 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 0207 	bic.w	r2, r3, #7
 8003aee:	4965      	ldr	r1, [pc, #404]	; (8003c84 <HAL_RCC_ClockConfig+0x1c0>)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af6:	4b63      	ldr	r3, [pc, #396]	; (8003c84 <HAL_RCC_ClockConfig+0x1c0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0b8      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d020      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b20:	4b59      	ldr	r3, [pc, #356]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	4a58      	ldr	r2, [pc, #352]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b38:	4b53      	ldr	r3, [pc, #332]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	4a52      	ldr	r2, [pc, #328]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b44:	4b50      	ldr	r3, [pc, #320]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	494d      	ldr	r1, [pc, #308]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d040      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d107      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6a:	4b47      	ldr	r3, [pc, #284]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d115      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e07f      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d107      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b82:	4b41      	ldr	r3, [pc, #260]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e073      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b92:	4b3d      	ldr	r3, [pc, #244]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e06b      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ba2:	4b39      	ldr	r3, [pc, #228]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f023 0203 	bic.w	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4936      	ldr	r1, [pc, #216]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb4:	f7fe f876 	bl	8001ca4 <HAL_GetTick>
 8003bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	e00a      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bbc:	f7fe f872 	bl	8001ca4 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e053      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd2:	4b2d      	ldr	r3, [pc, #180]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f003 020c 	and.w	r2, r3, #12
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d1eb      	bne.n	8003bbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003be4:	4b27      	ldr	r3, [pc, #156]	; (8003c84 <HAL_RCC_ClockConfig+0x1c0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d210      	bcs.n	8003c14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf2:	4b24      	ldr	r3, [pc, #144]	; (8003c84 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f023 0207 	bic.w	r2, r3, #7
 8003bfa:	4922      	ldr	r1, [pc, #136]	; (8003c84 <HAL_RCC_ClockConfig+0x1c0>)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c02:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <HAL_RCC_ClockConfig+0x1c0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e032      	b.n	8003c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c20:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4916      	ldr	r1, [pc, #88]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d009      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c3e:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	490e      	ldr	r1, [pc, #56]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c52:	f000 f821 	bl	8003c98 <HAL_RCC_GetSysClockFreq>
 8003c56:	4601      	mov	r1, r0
 8003c58:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	091b      	lsrs	r3, r3, #4
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <HAL_RCC_ClockConfig+0x1c8>)
 8003c64:	5cd3      	ldrb	r3, [r2, r3]
 8003c66:	fa21 f303 	lsr.w	r3, r1, r3
 8003c6a:	4a09      	ldr	r2, [pc, #36]	; (8003c90 <HAL_RCC_ClockConfig+0x1cc>)
 8003c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c6e:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <HAL_RCC_ClockConfig+0x1d0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fd ffd4 	bl	8001c20 <HAL_InitTick>

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40022000 	.word	0x40022000
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	08007ec4 	.word	0x08007ec4
 8003c90:	20000004 	.word	0x20000004
 8003c94:	20000008 	.word	0x20000008

08003c98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c98:	b490      	push	{r4, r7}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c9e:	4b2a      	ldr	r3, [pc, #168]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ca0:	1d3c      	adds	r4, r7, #4
 8003ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ca8:	4b28      	ldr	r3, [pc, #160]	; (8003d4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cc2:	4b23      	ldr	r3, [pc, #140]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d002      	beq.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d003      	beq.n	8003cde <HAL_RCC_GetSysClockFreq+0x46>
 8003cd6:	e02d      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cd8:	4b1e      	ldr	r3, [pc, #120]	; (8003d54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cda:	623b      	str	r3, [r7, #32]
      break;
 8003cdc:	e02d      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	0c9b      	lsrs	r3, r3, #18
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003cea:	4413      	add	r3, r2
 8003cec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003cf0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d013      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cfc:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	0c5b      	lsrs	r3, r3, #17
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	4a0f      	ldr	r2, [pc, #60]	; (8003d54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d16:	fb02 f203 	mul.w	r2, r2, r3
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
 8003d22:	e004      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	4a0c      	ldr	r2, [pc, #48]	; (8003d58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	623b      	str	r3, [r7, #32]
      break;
 8003d32:	e002      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d36:	623b      	str	r3, [r7, #32]
      break;
 8003d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3728      	adds	r7, #40	; 0x28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc90      	pop	{r4, r7}
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	08007eb0 	.word	0x08007eb0
 8003d4c:	08007ec0 	.word	0x08007ec0
 8003d50:	40021000 	.word	0x40021000
 8003d54:	007a1200 	.word	0x007a1200
 8003d58:	003d0900 	.word	0x003d0900

08003d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d60:	4b02      	ldr	r3, [pc, #8]	; (8003d6c <HAL_RCC_GetHCLKFreq+0x10>)
 8003d62:	681b      	ldr	r3, [r3, #0]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr
 8003d6c:	20000004 	.word	0x20000004

08003d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d74:	f7ff fff2 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8003d78:	4601      	mov	r1, r0
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	0a1b      	lsrs	r3, r3, #8
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	4a03      	ldr	r2, [pc, #12]	; (8003d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d86:	5cd3      	ldrb	r3, [r2, r3]
 8003d88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40021000 	.word	0x40021000
 8003d94:	08007ed4 	.word	0x08007ed4

08003d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d9c:	f7ff ffde 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8003da0:	4601      	mov	r1, r0
 8003da2:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	0adb      	lsrs	r3, r3, #11
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	4a03      	ldr	r2, [pc, #12]	; (8003dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dae:	5cd3      	ldrb	r3, [r2, r3]
 8003db0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	08007ed4 	.word	0x08007ed4

08003dc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003dc8:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <RCC_Delay+0x34>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a0a      	ldr	r2, [pc, #40]	; (8003df8 <RCC_Delay+0x38>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	0a5b      	lsrs	r3, r3, #9
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	fb02 f303 	mul.w	r3, r2, r3
 8003dda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ddc:	bf00      	nop
  }
  while (Delay --);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1e5a      	subs	r2, r3, #1
 8003de2:	60fa      	str	r2, [r7, #12]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1f9      	bne.n	8003ddc <RCC_Delay+0x1c>
}
 8003de8:	bf00      	nop
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20000004 	.word	0x20000004
 8003df8:	10624dd3 	.word	0x10624dd3

08003dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e041      	b.n	8003e92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fd fc96 	bl	8001754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	f000 fd22 	bl	8004884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b082      	sub	sp, #8
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e041      	b.n	8003f30 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d106      	bne.n	8003ec6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f839 	bl	8003f38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4610      	mov	r0, r2
 8003eda:	f000 fcd3 	bl	8004884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr
	...

08003f4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d109      	bne.n	8003f70 <HAL_TIM_PWM_Start+0x24>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	bf14      	ite	ne
 8003f68:	2301      	movne	r3, #1
 8003f6a:	2300      	moveq	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	e022      	b.n	8003fb6 <HAL_TIM_PWM_Start+0x6a>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d109      	bne.n	8003f8a <HAL_TIM_PWM_Start+0x3e>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	bf14      	ite	ne
 8003f82:	2301      	movne	r3, #1
 8003f84:	2300      	moveq	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	e015      	b.n	8003fb6 <HAL_TIM_PWM_Start+0x6a>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d109      	bne.n	8003fa4 <HAL_TIM_PWM_Start+0x58>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	bf14      	ite	ne
 8003f9c:	2301      	movne	r3, #1
 8003f9e:	2300      	moveq	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	e008      	b.n	8003fb6 <HAL_TIM_PWM_Start+0x6a>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	bf14      	ite	ne
 8003fb0:	2301      	movne	r3, #1
 8003fb2:	2300      	moveq	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e05e      	b.n	800407c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d104      	bne.n	8003fce <HAL_TIM_PWM_Start+0x82>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fcc:	e013      	b.n	8003ff6 <HAL_TIM_PWM_Start+0xaa>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d104      	bne.n	8003fde <HAL_TIM_PWM_Start+0x92>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fdc:	e00b      	b.n	8003ff6 <HAL_TIM_PWM_Start+0xaa>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d104      	bne.n	8003fee <HAL_TIM_PWM_Start+0xa2>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fec:	e003      	b.n	8003ff6 <HAL_TIM_PWM_Start+0xaa>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	6839      	ldr	r1, [r7, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fec0 	bl	8004d84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1e      	ldr	r2, [pc, #120]	; (8004084 <HAL_TIM_PWM_Start+0x138>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d107      	bne.n	800401e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800401c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a18      	ldr	r2, [pc, #96]	; (8004084 <HAL_TIM_PWM_Start+0x138>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00e      	beq.n	8004046 <HAL_TIM_PWM_Start+0xfa>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004030:	d009      	beq.n	8004046 <HAL_TIM_PWM_Start+0xfa>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a14      	ldr	r2, [pc, #80]	; (8004088 <HAL_TIM_PWM_Start+0x13c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_TIM_PWM_Start+0xfa>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a12      	ldr	r2, [pc, #72]	; (800408c <HAL_TIM_PWM_Start+0x140>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d111      	bne.n	800406a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b06      	cmp	r3, #6
 8004056:	d010      	beq.n	800407a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004068:	e007      	b.n	800407a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0201 	orr.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40012c00 	.word	0x40012c00
 8004088:	40000400 	.word	0x40000400
 800408c:	40000800 	.word	0x40000800

08004090 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e093      	b.n	80041cc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d106      	bne.n	80040be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7fd fb69 	bl	8001790 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2202      	movs	r2, #2
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040d4:	f023 0307 	bic.w	r3, r3, #7
 80040d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3304      	adds	r3, #4
 80040e2:	4619      	mov	r1, r3
 80040e4:	4610      	mov	r0, r2
 80040e6:	f000 fbcd 	bl	8004884 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004112:	f023 0303 	bic.w	r3, r3, #3
 8004116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	4313      	orrs	r3, r2
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004130:	f023 030c 	bic.w	r3, r3, #12
 8004134:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800413c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004140:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	4313      	orrs	r3, r2
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	011a      	lsls	r2, r3, #4
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	031b      	lsls	r3, r3, #12
 8004160:	4313      	orrs	r3, r2
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800416e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	4313      	orrs	r3, r2
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d110      	bne.n	8004226 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d102      	bne.n	8004210 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800420a:	7b7b      	ldrb	r3, [r7, #13]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d001      	beq.n	8004214 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e088      	b.n	8004326 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004224:	e031      	b.n	800428a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b04      	cmp	r3, #4
 800422a:	d110      	bne.n	800424e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800422c:	7bbb      	ldrb	r3, [r7, #14]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d102      	bne.n	8004238 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004232:	7b3b      	ldrb	r3, [r7, #12]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d001      	beq.n	800423c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e074      	b.n	8004326 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800424c:	e01d      	b.n	800428a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d108      	bne.n	8004266 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004254:	7bbb      	ldrb	r3, [r7, #14]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d105      	bne.n	8004266 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800425a:	7b7b      	ldrb	r3, [r7, #13]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d102      	bne.n	8004266 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004260:	7b3b      	ldrb	r3, [r7, #12]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d001      	beq.n	800426a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e05d      	b.n	8004326 <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2202      	movs	r2, #2
 800426e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2202      	movs	r2, #2
 8004276:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2202      	movs	r2, #2
 8004286:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_TIM_Encoder_Start_IT+0xc2>
 8004290:	2b04      	cmp	r3, #4
 8004292:	d010      	beq.n	80042b6 <HAL_TIM_Encoder_Start_IT+0xe2>
 8004294:	e01f      	b.n	80042d6 <HAL_TIM_Encoder_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2201      	movs	r2, #1
 800429c:	2100      	movs	r1, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fd70 	bl	8004d84 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0202 	orr.w	r2, r2, #2
 80042b2:	60da      	str	r2, [r3, #12]
      break;
 80042b4:	e02e      	b.n	8004314 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2201      	movs	r2, #1
 80042bc:	2104      	movs	r1, #4
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fd60 	bl	8004d84 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0204 	orr.w	r2, r2, #4
 80042d2:	60da      	str	r2, [r3, #12]
      break;
 80042d4:	e01e      	b.n	8004314 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2201      	movs	r2, #1
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fd50 	bl	8004d84 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2201      	movs	r2, #1
 80042ea:	2104      	movs	r1, #4
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fd49 	bl	8004d84 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0202 	orr.w	r2, r2, #2
 8004300:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0204 	orr.w	r2, r2, #4
 8004310:	60da      	str	r2, [r3, #12]
      break;
 8004312:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b082      	sub	sp, #8
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b02      	cmp	r3, #2
 8004342:	d122      	bne.n	800438a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b02      	cmp	r3, #2
 8004350:	d11b      	bne.n	800438a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f06f 0202 	mvn.w	r2, #2
 800435a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fa6c 	bl	800484e <HAL_TIM_IC_CaptureCallback>
 8004376:	e005      	b.n	8004384 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fa5f 	bl	800483c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fa6e 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b04      	cmp	r3, #4
 8004396:	d122      	bne.n	80043de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d11b      	bne.n	80043de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f06f 0204 	mvn.w	r2, #4
 80043ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fa42 	bl	800484e <HAL_TIM_IC_CaptureCallback>
 80043ca:	e005      	b.n	80043d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 fa35 	bl	800483c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fa44 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d122      	bne.n	8004432 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d11b      	bne.n	8004432 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f06f 0208 	mvn.w	r2, #8
 8004402:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2204      	movs	r2, #4
 8004408:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 fa18 	bl	800484e <HAL_TIM_IC_CaptureCallback>
 800441e:	e005      	b.n	800442c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fa0b 	bl	800483c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fa1a 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	2b10      	cmp	r3, #16
 800443e:	d122      	bne.n	8004486 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	2b10      	cmp	r3, #16
 800444c:	d11b      	bne.n	8004486 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f06f 0210 	mvn.w	r2, #16
 8004456:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2208      	movs	r2, #8
 800445c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f9ee 	bl	800484e <HAL_TIM_IC_CaptureCallback>
 8004472:	e005      	b.n	8004480 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f9e1 	bl	800483c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f9f0 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b01      	cmp	r3, #1
 8004492:	d10e      	bne.n	80044b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d107      	bne.n	80044b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f06f 0201 	mvn.w	r2, #1
 80044aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f9bc 	bl	800482a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044bc:	2b80      	cmp	r3, #128	; 0x80
 80044be:	d10e      	bne.n	80044de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ca:	2b80      	cmp	r3, #128	; 0x80
 80044cc:	d107      	bne.n	80044de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fd2f 	bl	8004f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	2b40      	cmp	r3, #64	; 0x40
 80044ea:	d10e      	bne.n	800450a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f6:	2b40      	cmp	r3, #64	; 0x40
 80044f8:	d107      	bne.n	800450a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f9b4 	bl	8004872 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b20      	cmp	r3, #32
 8004516:	d10e      	bne.n	8004536 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f003 0320 	and.w	r3, r3, #32
 8004522:	2b20      	cmp	r3, #32
 8004524:	d107      	bne.n	8004536 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f06f 0220 	mvn.w	r2, #32
 800452e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fcfa 	bl	8004f2a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004536:	bf00      	nop
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004556:	2302      	movs	r3, #2
 8004558:	e0ac      	b.n	80046b4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b0c      	cmp	r3, #12
 8004566:	f200 809f 	bhi.w	80046a8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800456a:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004570:	080045a5 	.word	0x080045a5
 8004574:	080046a9 	.word	0x080046a9
 8004578:	080046a9 	.word	0x080046a9
 800457c:	080046a9 	.word	0x080046a9
 8004580:	080045e5 	.word	0x080045e5
 8004584:	080046a9 	.word	0x080046a9
 8004588:	080046a9 	.word	0x080046a9
 800458c:	080046a9 	.word	0x080046a9
 8004590:	08004627 	.word	0x08004627
 8004594:	080046a9 	.word	0x080046a9
 8004598:	080046a9 	.word	0x080046a9
 800459c:	080046a9 	.word	0x080046a9
 80045a0:	08004667 	.word	0x08004667
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 f9cc 	bl	8004948 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699a      	ldr	r2, [r3, #24]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0208 	orr.w	r2, r2, #8
 80045be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0204 	bic.w	r2, r2, #4
 80045ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6999      	ldr	r1, [r3, #24]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	619a      	str	r2, [r3, #24]
      break;
 80045e2:	e062      	b.n	80046aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68b9      	ldr	r1, [r7, #8]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fa12 	bl	8004a14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699a      	ldr	r2, [r3, #24]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6999      	ldr	r1, [r3, #24]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	021a      	lsls	r2, r3, #8
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	619a      	str	r2, [r3, #24]
      break;
 8004624:	e041      	b.n	80046aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68b9      	ldr	r1, [r7, #8]
 800462c:	4618      	mov	r0, r3
 800462e:	f000 fa5b 	bl	8004ae8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69da      	ldr	r2, [r3, #28]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0208 	orr.w	r2, r2, #8
 8004640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0204 	bic.w	r2, r2, #4
 8004650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69d9      	ldr	r1, [r3, #28]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	61da      	str	r2, [r3, #28]
      break;
 8004664:	e021      	b.n	80046aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	4618      	mov	r0, r3
 800466e:	f000 faa5 	bl	8004bbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69d9      	ldr	r1, [r3, #28]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	021a      	lsls	r2, r3, #8
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	61da      	str	r2, [r3, #28]
      break;
 80046a6:	e000      	b.n	80046aa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80046a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_TIM_ConfigClockSource+0x18>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e0a6      	b.n	8004822 <HAL_TIM_ConfigClockSource+0x166>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b40      	cmp	r3, #64	; 0x40
 800470a:	d067      	beq.n	80047dc <HAL_TIM_ConfigClockSource+0x120>
 800470c:	2b40      	cmp	r3, #64	; 0x40
 800470e:	d80b      	bhi.n	8004728 <HAL_TIM_ConfigClockSource+0x6c>
 8004710:	2b10      	cmp	r3, #16
 8004712:	d073      	beq.n	80047fc <HAL_TIM_ConfigClockSource+0x140>
 8004714:	2b10      	cmp	r3, #16
 8004716:	d802      	bhi.n	800471e <HAL_TIM_ConfigClockSource+0x62>
 8004718:	2b00      	cmp	r3, #0
 800471a:	d06f      	beq.n	80047fc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800471c:	e078      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800471e:	2b20      	cmp	r3, #32
 8004720:	d06c      	beq.n	80047fc <HAL_TIM_ConfigClockSource+0x140>
 8004722:	2b30      	cmp	r3, #48	; 0x30
 8004724:	d06a      	beq.n	80047fc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004726:	e073      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004728:	2b70      	cmp	r3, #112	; 0x70
 800472a:	d00d      	beq.n	8004748 <HAL_TIM_ConfigClockSource+0x8c>
 800472c:	2b70      	cmp	r3, #112	; 0x70
 800472e:	d804      	bhi.n	800473a <HAL_TIM_ConfigClockSource+0x7e>
 8004730:	2b50      	cmp	r3, #80	; 0x50
 8004732:	d033      	beq.n	800479c <HAL_TIM_ConfigClockSource+0xe0>
 8004734:	2b60      	cmp	r3, #96	; 0x60
 8004736:	d041      	beq.n	80047bc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004738:	e06a      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800473a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473e:	d066      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x152>
 8004740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004744:	d017      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004746:	e063      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	6899      	ldr	r1, [r3, #8]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f000 faf5 	bl	8004d46 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800476a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	609a      	str	r2, [r3, #8]
      break;
 8004774:	e04c      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6818      	ldr	r0, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6899      	ldr	r1, [r3, #8]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f000 fade 	bl	8004d46 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004798:	609a      	str	r2, [r3, #8]
      break;
 800479a:	e039      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	6859      	ldr	r1, [r3, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	461a      	mov	r2, r3
 80047aa:	f000 fa55 	bl	8004c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2150      	movs	r1, #80	; 0x50
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 faac 	bl	8004d12 <TIM_ITRx_SetConfig>
      break;
 80047ba:	e029      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6818      	ldr	r0, [r3, #0]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	6859      	ldr	r1, [r3, #4]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	461a      	mov	r2, r3
 80047ca:	f000 fa73 	bl	8004cb4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2160      	movs	r1, #96	; 0x60
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fa9c 	bl	8004d12 <TIM_ITRx_SetConfig>
      break;
 80047da:	e019      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	6859      	ldr	r1, [r3, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	461a      	mov	r2, r3
 80047ea:	f000 fa35 	bl	8004c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2140      	movs	r1, #64	; 0x40
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fa8c 	bl	8004d12 <TIM_ITRx_SetConfig>
      break;
 80047fa:	e009      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4619      	mov	r1, r3
 8004806:	4610      	mov	r0, r2
 8004808:	f000 fa83 	bl	8004d12 <TIM_ITRx_SetConfig>
        break;
 800480c:	e000      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800480e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr

0800483c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr

0800484e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr

08004860 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	bc80      	pop	{r7}
 8004870:	4770      	bx	lr

08004872 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr

08004884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a29      	ldr	r2, [pc, #164]	; (800493c <TIM_Base_SetConfig+0xb8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00b      	beq.n	80048b4 <TIM_Base_SetConfig+0x30>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a2:	d007      	beq.n	80048b4 <TIM_Base_SetConfig+0x30>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a26      	ldr	r2, [pc, #152]	; (8004940 <TIM_Base_SetConfig+0xbc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d003      	beq.n	80048b4 <TIM_Base_SetConfig+0x30>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a25      	ldr	r2, [pc, #148]	; (8004944 <TIM_Base_SetConfig+0xc0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d108      	bne.n	80048c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a1c      	ldr	r2, [pc, #112]	; (800493c <TIM_Base_SetConfig+0xb8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00b      	beq.n	80048e6 <TIM_Base_SetConfig+0x62>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d4:	d007      	beq.n	80048e6 <TIM_Base_SetConfig+0x62>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a19      	ldr	r2, [pc, #100]	; (8004940 <TIM_Base_SetConfig+0xbc>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d003      	beq.n	80048e6 <TIM_Base_SetConfig+0x62>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a18      	ldr	r2, [pc, #96]	; (8004944 <TIM_Base_SetConfig+0xc0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d108      	bne.n	80048f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a07      	ldr	r2, [pc, #28]	; (800493c <TIM_Base_SetConfig+0xb8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d103      	bne.n	800492c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	615a      	str	r2, [r3, #20]
}
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr
 800493c:	40012c00 	.word	0x40012c00
 8004940:	40000400 	.word	0x40000400
 8004944:	40000800 	.word	0x40000800

08004948 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	f023 0201 	bic.w	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0303 	bic.w	r3, r3, #3
 800497e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f023 0302 	bic.w	r3, r3, #2
 8004990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4313      	orrs	r3, r2
 800499a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a1c      	ldr	r2, [pc, #112]	; (8004a10 <TIM_OC1_SetConfig+0xc8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d10c      	bne.n	80049be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f023 0308 	bic.w	r3, r3, #8
 80049aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f023 0304 	bic.w	r3, r3, #4
 80049bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a13      	ldr	r2, [pc, #76]	; (8004a10 <TIM_OC1_SetConfig+0xc8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d111      	bne.n	80049ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	621a      	str	r2, [r3, #32]
}
 8004a04:	bf00      	nop
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40012c00 	.word	0x40012c00

08004a14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	f023 0210 	bic.w	r2, r3, #16
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	021b      	lsls	r3, r3, #8
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f023 0320 	bic.w	r3, r3, #32
 8004a5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ae4 <TIM_OC2_SetConfig+0xd0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d10d      	bne.n	8004a90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a14      	ldr	r2, [pc, #80]	; (8004ae4 <TIM_OC2_SetConfig+0xd0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d113      	bne.n	8004ac0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	621a      	str	r2, [r3, #32]
}
 8004ada:	bf00      	nop
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr
 8004ae4:	40012c00 	.word	0x40012c00

08004ae8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0303 	bic.w	r3, r3, #3
 8004b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a1d      	ldr	r2, [pc, #116]	; (8004bb8 <TIM_OC3_SetConfig+0xd0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d10d      	bne.n	8004b62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a14      	ldr	r2, [pc, #80]	; (8004bb8 <TIM_OC3_SetConfig+0xd0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d113      	bne.n	8004b92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	621a      	str	r2, [r3, #32]
}
 8004bac:	bf00      	nop
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40012c00 	.word	0x40012c00

08004bbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	021b      	lsls	r3, r3, #8
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	031b      	lsls	r3, r3, #12
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a0f      	ldr	r2, [pc, #60]	; (8004c54 <TIM_OC4_SetConfig+0x98>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d109      	bne.n	8004c30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	019b      	lsls	r3, r3, #6
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	621a      	str	r2, [r3, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr
 8004c54:	40012c00 	.word	0x40012c00

08004c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	f023 0201 	bic.w	r2, r3, #1
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f023 030a 	bic.w	r3, r3, #10
 8004c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	621a      	str	r2, [r3, #32]
}
 8004caa:	bf00      	nop
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	f023 0210 	bic.w	r2, r3, #16
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	031b      	lsls	r3, r3, #12
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cf0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	621a      	str	r2, [r3, #32]
}
 8004d08:	bf00      	nop
 8004d0a:	371c      	adds	r7, #28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr

08004d12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b085      	sub	sp, #20
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f043 0307 	orr.w	r3, r3, #7
 8004d34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	609a      	str	r2, [r3, #8]
}
 8004d3c:	bf00      	nop
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr

08004d46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b087      	sub	sp, #28
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	607a      	str	r2, [r7, #4]
 8004d52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	021a      	lsls	r2, r3, #8
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	609a      	str	r2, [r3, #8]
}
 8004d7a:	bf00      	nop
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr

08004d84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f003 031f 	and.w	r3, r3, #31
 8004d96:	2201      	movs	r2, #1
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a1a      	ldr	r2, [r3, #32]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	43db      	mvns	r3, r3
 8004da6:	401a      	ands	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a1a      	ldr	r2, [r3, #32]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f003 031f 	and.w	r3, r3, #31
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	621a      	str	r2, [r3, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr

08004dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e046      	b.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a16      	ldr	r2, [pc, #88]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d00e      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e30:	d009      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a12      	ldr	r2, [pc, #72]	; (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d004      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a10      	ldr	r2, [pc, #64]	; (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d10c      	bne.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr
 8004e7c:	40012c00 	.word	0x40012c00
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40000800 	.word	0x40000800

08004e88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e03d      	b.n	8004f20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bc80      	pop	{r7}
 8004f28:	4770      	bx	lr

08004f2a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr

08004f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bc80      	pop	{r7}
 8004f4c:	4770      	bx	lr

08004f4e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b082      	sub	sp, #8
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e03f      	b.n	8004fe0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d106      	bne.n	8004f7a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7fc fcb7 	bl	80018e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2224      	movs	r2, #36	; 0x24
 8004f7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f90:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fb38 	bl	8005608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fa6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695a      	ldr	r2, [r3, #20]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fb6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fc6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b20      	cmp	r3, #32
 8005006:	d17c      	bne.n	8005102 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <HAL_UART_Transmit+0x2c>
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e075      	b.n	8005104 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_UART_Transmit+0x3e>
 8005022:	2302      	movs	r3, #2
 8005024:	e06e      	b.n	8005104 <HAL_UART_Transmit+0x11c>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2221      	movs	r2, #33	; 0x21
 8005038:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800503c:	f7fc fe32 	bl	8001ca4 <HAL_GetTick>
 8005040:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	88fa      	ldrh	r2, [r7, #6]
 8005046:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	88fa      	ldrh	r2, [r7, #6]
 800504c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005056:	d108      	bne.n	800506a <HAL_UART_Transmit+0x82>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d104      	bne.n	800506a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005060:	2300      	movs	r3, #0
 8005062:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	e003      	b.n	8005072 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800506e:	2300      	movs	r3, #0
 8005070:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800507a:	e02a      	b.n	80050d2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2200      	movs	r2, #0
 8005084:	2180      	movs	r1, #128	; 0x80
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f95b 	bl	8005342 <UART_WaitOnFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e036      	b.n	8005104 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10b      	bne.n	80050b4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050aa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	3302      	adds	r3, #2
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	e007      	b.n	80050c4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	781a      	ldrb	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	3301      	adds	r3, #1
 80050c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1cf      	bne.n	800507c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2200      	movs	r2, #0
 80050e4:	2140      	movs	r1, #64	; 0x40
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 f92b 	bl	8005342 <UART_WaitOnFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e006      	b.n	8005104 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e000      	b.n	8005104 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005102:	2302      	movs	r3, #2
  }
}
 8005104:	4618      	mov	r0, r3
 8005106:	3720      	adds	r7, #32
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800512c:	2300      	movs	r3, #0
 800512e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10d      	bne.n	800515e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	d008      	beq.n	800515e <HAL_UART_IRQHandler+0x52>
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f9d5 	bl	8005506 <UART_Receive_IT>
      return;
 800515c:	e0d1      	b.n	8005302 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 80b0 	beq.w	80052c6 <HAL_UART_IRQHandler+0x1ba>
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d105      	bne.n	800517c <HAL_UART_IRQHandler+0x70>
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 80a5 	beq.w	80052c6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <HAL_UART_IRQHandler+0x90>
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518c:	2b00      	cmp	r3, #0
 800518e:	d005      	beq.n	800519c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005194:	f043 0201 	orr.w	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_UART_IRQHandler+0xb0>
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b4:	f043 0202 	orr.w	r2, r3, #2
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <HAL_UART_IRQHandler+0xd0>
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d4:	f043 0204 	orr.w	r2, r3, #4
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00f      	beq.n	8005206 <HAL_UART_IRQHandler+0xfa>
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	f003 0320 	and.w	r3, r3, #32
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d104      	bne.n	80051fa <HAL_UART_IRQHandler+0xee>
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d005      	beq.n	8005206 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fe:	f043 0208 	orr.w	r2, r3, #8
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520a:	2b00      	cmp	r3, #0
 800520c:	d078      	beq.n	8005300 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	2b00      	cmp	r3, #0
 8005216:	d007      	beq.n	8005228 <HAL_UART_IRQHandler+0x11c>
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f96f 	bl	8005506 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	bf14      	ite	ne
 8005236:	2301      	movne	r3, #1
 8005238:	2300      	moveq	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d102      	bne.n	8005250 <HAL_UART_IRQHandler+0x144>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d031      	beq.n	80052b4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f8c0 	bl	80053d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005260:	2b00      	cmp	r3, #0
 8005262:	d023      	beq.n	80052ac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695a      	ldr	r2, [r3, #20]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005272:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005278:	2b00      	cmp	r3, #0
 800527a:	d013      	beq.n	80052a4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005280:	4a21      	ldr	r2, [pc, #132]	; (8005308 <HAL_UART_IRQHandler+0x1fc>)
 8005282:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005288:	4618      	mov	r0, r3
 800528a:	f7fc fe45 	bl	8001f18 <HAL_DMA_Abort_IT>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d016      	beq.n	80052c2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800529e:	4610      	mov	r0, r2
 80052a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a2:	e00e      	b.n	80052c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f843 	bl	8005330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052aa:	e00a      	b.n	80052c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f83f 	bl	8005330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b2:	e006      	b.n	80052c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f83b 	bl	8005330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80052c0:	e01e      	b.n	8005300 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c2:	bf00      	nop
    return;
 80052c4:	e01c      	b.n	8005300 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_UART_IRQHandler+0x1d6>
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f8ac 	bl	8005438 <UART_Transmit_IT>
    return;
 80052e0:	e00f      	b.n	8005302 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <HAL_UART_IRQHandler+0x1f6>
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d005      	beq.n	8005302 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f8ed 	bl	80054d6 <UART_EndTransmit_IT>
    return;
 80052fc:	bf00      	nop
 80052fe:	e000      	b.n	8005302 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005300:	bf00      	nop
  }
}
 8005302:	3720      	adds	r7, #32
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	08005411 	.word	0x08005411

0800530c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	bc80      	pop	{r7}
 800531c:	4770      	bx	lr

0800531e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	bc80      	pop	{r7}
 800532e:	4770      	bx	lr

08005330 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr

08005342 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	603b      	str	r3, [r7, #0]
 800534e:	4613      	mov	r3, r2
 8005350:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005352:	e02c      	b.n	80053ae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535a:	d028      	beq.n	80053ae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d007      	beq.n	8005372 <UART_WaitOnFlagUntilTimeout+0x30>
 8005362:	f7fc fc9f 	bl	8001ca4 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	429a      	cmp	r2, r3
 8005370:	d21d      	bcs.n	80053ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005380:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695a      	ldr	r2, [r3, #20]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0201 	bic.w	r2, r2, #1
 8005390:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2220      	movs	r2, #32
 8005396:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e00f      	b.n	80053ce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4013      	ands	r3, r2
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	bf0c      	ite	eq
 80053be:	2301      	moveq	r3, #1
 80053c0:	2300      	movne	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	461a      	mov	r2, r3
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d0c3      	beq.n	8005354 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80053ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695a      	ldr	r2, [r3, #20]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0201 	bic.w	r2, r2, #1
 80053fc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr

08005410 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7ff ff80 	bl	8005330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005430:	bf00      	nop
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b21      	cmp	r3, #33	; 0x21
 800544a:	d13e      	bne.n	80054ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005454:	d114      	bne.n	8005480 <UART_Transmit_IT+0x48>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d110      	bne.n	8005480 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005472:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	1c9a      	adds	r2, r3, #2
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	621a      	str	r2, [r3, #32]
 800547e:	e008      	b.n	8005492 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	1c59      	adds	r1, r3, #1
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6211      	str	r1, [r2, #32]
 800548a:	781a      	ldrb	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29b      	uxth	r3, r3
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	4619      	mov	r1, r3
 80054a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10f      	bne.n	80054c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e000      	b.n	80054cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054ca:	2302      	movs	r3, #2
  }
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr

080054d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b082      	sub	sp, #8
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7ff ff08 	bl	800530c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b22      	cmp	r3, #34	; 0x22
 8005518:	d170      	bne.n	80055fc <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005522:	d117      	bne.n	8005554 <UART_Receive_IT+0x4e>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d113      	bne.n	8005554 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800552c:	2300      	movs	r3, #0
 800552e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005534:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	b29b      	uxth	r3, r3
 800553e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005542:	b29a      	uxth	r2, r3
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	1c9a      	adds	r2, r3, #2
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	629a      	str	r2, [r3, #40]	; 0x28
 8005552:	e026      	b.n	80055a2 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800555a:	2300      	movs	r3, #0
 800555c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005566:	d007      	beq.n	8005578 <UART_Receive_IT+0x72>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <UART_Receive_IT+0x80>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d106      	bne.n	8005586 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	b2da      	uxtb	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	701a      	strb	r2, [r3, #0]
 8005584:	e008      	b.n	8005598 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	b2db      	uxtb	r3, r3
 800558e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005592:	b2da      	uxtb	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	4619      	mov	r1, r3
 80055b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d120      	bne.n	80055f8 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0220 	bic.w	r2, r2, #32
 80055c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695a      	ldr	r2, [r3, #20]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0201 	bic.w	r2, r2, #1
 80055e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff fe95 	bl	800531e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	e002      	b.n	80055fe <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80055f8:	2300      	movs	r3, #0
 80055fa:	e000      	b.n	80055fe <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80055fc:	2302      	movs	r3, #2
  }
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005642:	f023 030c 	bic.w	r3, r3, #12
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6812      	ldr	r2, [r2, #0]
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	430b      	orrs	r3, r1
 800564e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699a      	ldr	r2, [r3, #24]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a2c      	ldr	r2, [pc, #176]	; (800571c <UART_SetConfig+0x114>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d103      	bne.n	8005678 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005670:	f7fe fb92 	bl	8003d98 <HAL_RCC_GetPCLK2Freq>
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	e002      	b.n	800567e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005678:	f7fe fb7a 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 800567c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4613      	mov	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	009a      	lsls	r2, r3, #2
 8005688:	441a      	add	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	fbb2 f3f3 	udiv	r3, r2, r3
 8005694:	4a22      	ldr	r2, [pc, #136]	; (8005720 <UART_SetConfig+0x118>)
 8005696:	fba2 2303 	umull	r2, r3, r2, r3
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	0119      	lsls	r1, r3, #4
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	009a      	lsls	r2, r3, #2
 80056a8:	441a      	add	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80056b4:	4b1a      	ldr	r3, [pc, #104]	; (8005720 <UART_SetConfig+0x118>)
 80056b6:	fba3 0302 	umull	r0, r3, r3, r2
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	2064      	movs	r0, #100	; 0x64
 80056be:	fb00 f303 	mul.w	r3, r0, r3
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	011b      	lsls	r3, r3, #4
 80056c6:	3332      	adds	r3, #50	; 0x32
 80056c8:	4a15      	ldr	r2, [pc, #84]	; (8005720 <UART_SetConfig+0x118>)
 80056ca:	fba2 2303 	umull	r2, r3, r2, r3
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056d4:	4419      	add	r1, r3
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	009a      	lsls	r2, r3, #2
 80056e0:	441a      	add	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80056ec:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <UART_SetConfig+0x118>)
 80056ee:	fba3 0302 	umull	r0, r3, r3, r2
 80056f2:	095b      	lsrs	r3, r3, #5
 80056f4:	2064      	movs	r0, #100	; 0x64
 80056f6:	fb00 f303 	mul.w	r3, r0, r3
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	3332      	adds	r3, #50	; 0x32
 8005700:	4a07      	ldr	r2, [pc, #28]	; (8005720 <UART_SetConfig+0x118>)
 8005702:	fba2 2303 	umull	r2, r3, r2, r3
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	f003 020f 	and.w	r2, r3, #15
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	440a      	add	r2, r1
 8005712:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005714:	bf00      	nop
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	40013800 	.word	0x40013800
 8005720:	51eb851f 	.word	0x51eb851f

08005724 <__errno>:
 8005724:	4b01      	ldr	r3, [pc, #4]	; (800572c <__errno+0x8>)
 8005726:	6818      	ldr	r0, [r3, #0]
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	20000010 	.word	0x20000010

08005730 <__libc_init_array>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	2500      	movs	r5, #0
 8005734:	4e0c      	ldr	r6, [pc, #48]	; (8005768 <__libc_init_array+0x38>)
 8005736:	4c0d      	ldr	r4, [pc, #52]	; (800576c <__libc_init_array+0x3c>)
 8005738:	1ba4      	subs	r4, r4, r6
 800573a:	10a4      	asrs	r4, r4, #2
 800573c:	42a5      	cmp	r5, r4
 800573e:	d109      	bne.n	8005754 <__libc_init_array+0x24>
 8005740:	f002 fb48 	bl	8007dd4 <_init>
 8005744:	2500      	movs	r5, #0
 8005746:	4e0a      	ldr	r6, [pc, #40]	; (8005770 <__libc_init_array+0x40>)
 8005748:	4c0a      	ldr	r4, [pc, #40]	; (8005774 <__libc_init_array+0x44>)
 800574a:	1ba4      	subs	r4, r4, r6
 800574c:	10a4      	asrs	r4, r4, #2
 800574e:	42a5      	cmp	r5, r4
 8005750:	d105      	bne.n	800575e <__libc_init_array+0x2e>
 8005752:	bd70      	pop	{r4, r5, r6, pc}
 8005754:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005758:	4798      	blx	r3
 800575a:	3501      	adds	r5, #1
 800575c:	e7ee      	b.n	800573c <__libc_init_array+0xc>
 800575e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005762:	4798      	blx	r3
 8005764:	3501      	adds	r5, #1
 8005766:	e7f2      	b.n	800574e <__libc_init_array+0x1e>
 8005768:	080081a0 	.word	0x080081a0
 800576c:	080081a0 	.word	0x080081a0
 8005770:	080081a0 	.word	0x080081a0
 8005774:	080081a4 	.word	0x080081a4

08005778 <memset>:
 8005778:	4603      	mov	r3, r0
 800577a:	4402      	add	r2, r0
 800577c:	4293      	cmp	r3, r2
 800577e:	d100      	bne.n	8005782 <memset+0xa>
 8005780:	4770      	bx	lr
 8005782:	f803 1b01 	strb.w	r1, [r3], #1
 8005786:	e7f9      	b.n	800577c <memset+0x4>

08005788 <__cvt>:
 8005788:	2b00      	cmp	r3, #0
 800578a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800578e:	461e      	mov	r6, r3
 8005790:	bfbb      	ittet	lt
 8005792:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005796:	461e      	movlt	r6, r3
 8005798:	2300      	movge	r3, #0
 800579a:	232d      	movlt	r3, #45	; 0x2d
 800579c:	b088      	sub	sp, #32
 800579e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80057a0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80057a4:	f027 0720 	bic.w	r7, r7, #32
 80057a8:	2f46      	cmp	r7, #70	; 0x46
 80057aa:	4614      	mov	r4, r2
 80057ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80057ae:	700b      	strb	r3, [r1, #0]
 80057b0:	d004      	beq.n	80057bc <__cvt+0x34>
 80057b2:	2f45      	cmp	r7, #69	; 0x45
 80057b4:	d100      	bne.n	80057b8 <__cvt+0x30>
 80057b6:	3501      	adds	r5, #1
 80057b8:	2302      	movs	r3, #2
 80057ba:	e000      	b.n	80057be <__cvt+0x36>
 80057bc:	2303      	movs	r3, #3
 80057be:	aa07      	add	r2, sp, #28
 80057c0:	9204      	str	r2, [sp, #16]
 80057c2:	aa06      	add	r2, sp, #24
 80057c4:	e9cd a202 	strd	sl, r2, [sp, #8]
 80057c8:	e9cd 3500 	strd	r3, r5, [sp]
 80057cc:	4622      	mov	r2, r4
 80057ce:	4633      	mov	r3, r6
 80057d0:	f000 fd92 	bl	80062f8 <_dtoa_r>
 80057d4:	2f47      	cmp	r7, #71	; 0x47
 80057d6:	4680      	mov	r8, r0
 80057d8:	d102      	bne.n	80057e0 <__cvt+0x58>
 80057da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057dc:	07db      	lsls	r3, r3, #31
 80057de:	d526      	bpl.n	800582e <__cvt+0xa6>
 80057e0:	2f46      	cmp	r7, #70	; 0x46
 80057e2:	eb08 0905 	add.w	r9, r8, r5
 80057e6:	d111      	bne.n	800580c <__cvt+0x84>
 80057e8:	f898 3000 	ldrb.w	r3, [r8]
 80057ec:	2b30      	cmp	r3, #48	; 0x30
 80057ee:	d10a      	bne.n	8005806 <__cvt+0x7e>
 80057f0:	2200      	movs	r2, #0
 80057f2:	2300      	movs	r3, #0
 80057f4:	4620      	mov	r0, r4
 80057f6:	4631      	mov	r1, r6
 80057f8:	f7fb f8d6 	bl	80009a8 <__aeabi_dcmpeq>
 80057fc:	b918      	cbnz	r0, 8005806 <__cvt+0x7e>
 80057fe:	f1c5 0501 	rsb	r5, r5, #1
 8005802:	f8ca 5000 	str.w	r5, [sl]
 8005806:	f8da 3000 	ldr.w	r3, [sl]
 800580a:	4499      	add	r9, r3
 800580c:	2200      	movs	r2, #0
 800580e:	2300      	movs	r3, #0
 8005810:	4620      	mov	r0, r4
 8005812:	4631      	mov	r1, r6
 8005814:	f7fb f8c8 	bl	80009a8 <__aeabi_dcmpeq>
 8005818:	b938      	cbnz	r0, 800582a <__cvt+0xa2>
 800581a:	2230      	movs	r2, #48	; 0x30
 800581c:	9b07      	ldr	r3, [sp, #28]
 800581e:	454b      	cmp	r3, r9
 8005820:	d205      	bcs.n	800582e <__cvt+0xa6>
 8005822:	1c59      	adds	r1, r3, #1
 8005824:	9107      	str	r1, [sp, #28]
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	e7f8      	b.n	800581c <__cvt+0x94>
 800582a:	f8cd 901c 	str.w	r9, [sp, #28]
 800582e:	4640      	mov	r0, r8
 8005830:	9b07      	ldr	r3, [sp, #28]
 8005832:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005834:	eba3 0308 	sub.w	r3, r3, r8
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	b008      	add	sp, #32
 800583c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005840 <__exponent>:
 8005840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005842:	2900      	cmp	r1, #0
 8005844:	bfb4      	ite	lt
 8005846:	232d      	movlt	r3, #45	; 0x2d
 8005848:	232b      	movge	r3, #43	; 0x2b
 800584a:	4604      	mov	r4, r0
 800584c:	bfb8      	it	lt
 800584e:	4249      	neglt	r1, r1
 8005850:	2909      	cmp	r1, #9
 8005852:	f804 2b02 	strb.w	r2, [r4], #2
 8005856:	7043      	strb	r3, [r0, #1]
 8005858:	dd21      	ble.n	800589e <__exponent+0x5e>
 800585a:	f10d 0307 	add.w	r3, sp, #7
 800585e:	461f      	mov	r7, r3
 8005860:	260a      	movs	r6, #10
 8005862:	fb91 f5f6 	sdiv	r5, r1, r6
 8005866:	fb06 1115 	mls	r1, r6, r5, r1
 800586a:	2d09      	cmp	r5, #9
 800586c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005870:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005874:	f103 32ff 	add.w	r2, r3, #4294967295
 8005878:	4629      	mov	r1, r5
 800587a:	dc09      	bgt.n	8005890 <__exponent+0x50>
 800587c:	3130      	adds	r1, #48	; 0x30
 800587e:	3b02      	subs	r3, #2
 8005880:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005884:	42bb      	cmp	r3, r7
 8005886:	4622      	mov	r2, r4
 8005888:	d304      	bcc.n	8005894 <__exponent+0x54>
 800588a:	1a10      	subs	r0, r2, r0
 800588c:	b003      	add	sp, #12
 800588e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005890:	4613      	mov	r3, r2
 8005892:	e7e6      	b.n	8005862 <__exponent+0x22>
 8005894:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005898:	f804 2b01 	strb.w	r2, [r4], #1
 800589c:	e7f2      	b.n	8005884 <__exponent+0x44>
 800589e:	2330      	movs	r3, #48	; 0x30
 80058a0:	4419      	add	r1, r3
 80058a2:	7083      	strb	r3, [r0, #2]
 80058a4:	1d02      	adds	r2, r0, #4
 80058a6:	70c1      	strb	r1, [r0, #3]
 80058a8:	e7ef      	b.n	800588a <__exponent+0x4a>
	...

080058ac <_printf_float>:
 80058ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b0:	b091      	sub	sp, #68	; 0x44
 80058b2:	460c      	mov	r4, r1
 80058b4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80058b6:	4693      	mov	fp, r2
 80058b8:	461e      	mov	r6, r3
 80058ba:	4605      	mov	r5, r0
 80058bc:	f001 fc4a 	bl	8007154 <_localeconv_r>
 80058c0:	6803      	ldr	r3, [r0, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	9309      	str	r3, [sp, #36]	; 0x24
 80058c6:	f7fa fc43 	bl	8000150 <strlen>
 80058ca:	2300      	movs	r3, #0
 80058cc:	930e      	str	r3, [sp, #56]	; 0x38
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	900a      	str	r0, [sp, #40]	; 0x28
 80058d2:	3307      	adds	r3, #7
 80058d4:	f023 0307 	bic.w	r3, r3, #7
 80058d8:	f103 0208 	add.w	r2, r3, #8
 80058dc:	f894 8018 	ldrb.w	r8, [r4, #24]
 80058e0:	f8d4 a000 	ldr.w	sl, [r4]
 80058e4:	603a      	str	r2, [r7, #0]
 80058e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80058ee:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80058f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80058f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80058f8:	f04f 32ff 	mov.w	r2, #4294967295
 80058fc:	4ba6      	ldr	r3, [pc, #664]	; (8005b98 <_printf_float+0x2ec>)
 80058fe:	4638      	mov	r0, r7
 8005900:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005902:	f7fb f883 	bl	8000a0c <__aeabi_dcmpun>
 8005906:	bb68      	cbnz	r0, 8005964 <_printf_float+0xb8>
 8005908:	f04f 32ff 	mov.w	r2, #4294967295
 800590c:	4ba2      	ldr	r3, [pc, #648]	; (8005b98 <_printf_float+0x2ec>)
 800590e:	4638      	mov	r0, r7
 8005910:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005912:	f7fb f85d 	bl	80009d0 <__aeabi_dcmple>
 8005916:	bb28      	cbnz	r0, 8005964 <_printf_float+0xb8>
 8005918:	2200      	movs	r2, #0
 800591a:	2300      	movs	r3, #0
 800591c:	4638      	mov	r0, r7
 800591e:	4649      	mov	r1, r9
 8005920:	f7fb f84c 	bl	80009bc <__aeabi_dcmplt>
 8005924:	b110      	cbz	r0, 800592c <_printf_float+0x80>
 8005926:	232d      	movs	r3, #45	; 0x2d
 8005928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800592c:	4f9b      	ldr	r7, [pc, #620]	; (8005b9c <_printf_float+0x2f0>)
 800592e:	4b9c      	ldr	r3, [pc, #624]	; (8005ba0 <_printf_float+0x2f4>)
 8005930:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005934:	bf98      	it	ls
 8005936:	461f      	movls	r7, r3
 8005938:	2303      	movs	r3, #3
 800593a:	f04f 0900 	mov.w	r9, #0
 800593e:	6123      	str	r3, [r4, #16]
 8005940:	f02a 0304 	bic.w	r3, sl, #4
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	9600      	str	r6, [sp, #0]
 8005948:	465b      	mov	r3, fp
 800594a:	aa0f      	add	r2, sp, #60	; 0x3c
 800594c:	4621      	mov	r1, r4
 800594e:	4628      	mov	r0, r5
 8005950:	f000 f9e2 	bl	8005d18 <_printf_common>
 8005954:	3001      	adds	r0, #1
 8005956:	f040 8090 	bne.w	8005a7a <_printf_float+0x1ce>
 800595a:	f04f 30ff 	mov.w	r0, #4294967295
 800595e:	b011      	add	sp, #68	; 0x44
 8005960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005964:	463a      	mov	r2, r7
 8005966:	464b      	mov	r3, r9
 8005968:	4638      	mov	r0, r7
 800596a:	4649      	mov	r1, r9
 800596c:	f7fb f84e 	bl	8000a0c <__aeabi_dcmpun>
 8005970:	b110      	cbz	r0, 8005978 <_printf_float+0xcc>
 8005972:	4f8c      	ldr	r7, [pc, #560]	; (8005ba4 <_printf_float+0x2f8>)
 8005974:	4b8c      	ldr	r3, [pc, #560]	; (8005ba8 <_printf_float+0x2fc>)
 8005976:	e7db      	b.n	8005930 <_printf_float+0x84>
 8005978:	6863      	ldr	r3, [r4, #4]
 800597a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800597e:	1c59      	adds	r1, r3, #1
 8005980:	a80d      	add	r0, sp, #52	; 0x34
 8005982:	a90e      	add	r1, sp, #56	; 0x38
 8005984:	d140      	bne.n	8005a08 <_printf_float+0x15c>
 8005986:	2306      	movs	r3, #6
 8005988:	6063      	str	r3, [r4, #4]
 800598a:	f04f 0c00 	mov.w	ip, #0
 800598e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005992:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005996:	6863      	ldr	r3, [r4, #4]
 8005998:	6022      	str	r2, [r4, #0]
 800599a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	463a      	mov	r2, r7
 80059a2:	464b      	mov	r3, r9
 80059a4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80059a8:	4628      	mov	r0, r5
 80059aa:	f7ff feed 	bl	8005788 <__cvt>
 80059ae:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80059b2:	2b47      	cmp	r3, #71	; 0x47
 80059b4:	4607      	mov	r7, r0
 80059b6:	d109      	bne.n	80059cc <_printf_float+0x120>
 80059b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059ba:	1cd8      	adds	r0, r3, #3
 80059bc:	db02      	blt.n	80059c4 <_printf_float+0x118>
 80059be:	6862      	ldr	r2, [r4, #4]
 80059c0:	4293      	cmp	r3, r2
 80059c2:	dd47      	ble.n	8005a54 <_printf_float+0x1a8>
 80059c4:	f1a8 0802 	sub.w	r8, r8, #2
 80059c8:	fa5f f888 	uxtb.w	r8, r8
 80059cc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80059d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059d2:	d824      	bhi.n	8005a1e <_printf_float+0x172>
 80059d4:	3901      	subs	r1, #1
 80059d6:	4642      	mov	r2, r8
 80059d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059dc:	910d      	str	r1, [sp, #52]	; 0x34
 80059de:	f7ff ff2f 	bl	8005840 <__exponent>
 80059e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059e4:	4681      	mov	r9, r0
 80059e6:	1813      	adds	r3, r2, r0
 80059e8:	2a01      	cmp	r2, #1
 80059ea:	6123      	str	r3, [r4, #16]
 80059ec:	dc02      	bgt.n	80059f4 <_printf_float+0x148>
 80059ee:	6822      	ldr	r2, [r4, #0]
 80059f0:	07d1      	lsls	r1, r2, #31
 80059f2:	d501      	bpl.n	80059f8 <_printf_float+0x14c>
 80059f4:	3301      	adds	r3, #1
 80059f6:	6123      	str	r3, [r4, #16]
 80059f8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0a2      	beq.n	8005946 <_printf_float+0x9a>
 8005a00:	232d      	movs	r3, #45	; 0x2d
 8005a02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a06:	e79e      	b.n	8005946 <_printf_float+0x9a>
 8005a08:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005a0c:	f000 816e 	beq.w	8005cec <_printf_float+0x440>
 8005a10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a14:	d1b9      	bne.n	800598a <_printf_float+0xde>
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1b7      	bne.n	800598a <_printf_float+0xde>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e7b4      	b.n	8005988 <_printf_float+0xdc>
 8005a1e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005a22:	d119      	bne.n	8005a58 <_printf_float+0x1ac>
 8005a24:	2900      	cmp	r1, #0
 8005a26:	6863      	ldr	r3, [r4, #4]
 8005a28:	dd0c      	ble.n	8005a44 <_printf_float+0x198>
 8005a2a:	6121      	str	r1, [r4, #16]
 8005a2c:	b913      	cbnz	r3, 8005a34 <_printf_float+0x188>
 8005a2e:	6822      	ldr	r2, [r4, #0]
 8005a30:	07d2      	lsls	r2, r2, #31
 8005a32:	d502      	bpl.n	8005a3a <_printf_float+0x18e>
 8005a34:	3301      	adds	r3, #1
 8005a36:	440b      	add	r3, r1
 8005a38:	6123      	str	r3, [r4, #16]
 8005a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a3c:	f04f 0900 	mov.w	r9, #0
 8005a40:	65a3      	str	r3, [r4, #88]	; 0x58
 8005a42:	e7d9      	b.n	80059f8 <_printf_float+0x14c>
 8005a44:	b913      	cbnz	r3, 8005a4c <_printf_float+0x1a0>
 8005a46:	6822      	ldr	r2, [r4, #0]
 8005a48:	07d0      	lsls	r0, r2, #31
 8005a4a:	d501      	bpl.n	8005a50 <_printf_float+0x1a4>
 8005a4c:	3302      	adds	r3, #2
 8005a4e:	e7f3      	b.n	8005a38 <_printf_float+0x18c>
 8005a50:	2301      	movs	r3, #1
 8005a52:	e7f1      	b.n	8005a38 <_printf_float+0x18c>
 8005a54:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005a58:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	db05      	blt.n	8005a6c <_printf_float+0x1c0>
 8005a60:	6822      	ldr	r2, [r4, #0]
 8005a62:	6123      	str	r3, [r4, #16]
 8005a64:	07d1      	lsls	r1, r2, #31
 8005a66:	d5e8      	bpl.n	8005a3a <_printf_float+0x18e>
 8005a68:	3301      	adds	r3, #1
 8005a6a:	e7e5      	b.n	8005a38 <_printf_float+0x18c>
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	bfcc      	ite	gt
 8005a70:	2301      	movgt	r3, #1
 8005a72:	f1c3 0302 	rsble	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	e7de      	b.n	8005a38 <_printf_float+0x18c>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	055a      	lsls	r2, r3, #21
 8005a7e:	d407      	bmi.n	8005a90 <_printf_float+0x1e4>
 8005a80:	6923      	ldr	r3, [r4, #16]
 8005a82:	463a      	mov	r2, r7
 8005a84:	4659      	mov	r1, fp
 8005a86:	4628      	mov	r0, r5
 8005a88:	47b0      	blx	r6
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	d129      	bne.n	8005ae2 <_printf_float+0x236>
 8005a8e:	e764      	b.n	800595a <_printf_float+0xae>
 8005a90:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005a94:	f240 80d7 	bls.w	8005c46 <_printf_float+0x39a>
 8005a98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f7fa ff82 	bl	80009a8 <__aeabi_dcmpeq>
 8005aa4:	b388      	cbz	r0, 8005b0a <_printf_float+0x25e>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4a40      	ldr	r2, [pc, #256]	; (8005bac <_printf_float+0x300>)
 8005aaa:	4659      	mov	r1, fp
 8005aac:	4628      	mov	r0, r5
 8005aae:	47b0      	blx	r6
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	f43f af52 	beq.w	800595a <_printf_float+0xae>
 8005ab6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005aba:	429a      	cmp	r2, r3
 8005abc:	db02      	blt.n	8005ac4 <_printf_float+0x218>
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	07d8      	lsls	r0, r3, #31
 8005ac2:	d50e      	bpl.n	8005ae2 <_printf_float+0x236>
 8005ac4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ac8:	4659      	mov	r1, fp
 8005aca:	4628      	mov	r0, r5
 8005acc:	47b0      	blx	r6
 8005ace:	3001      	adds	r0, #1
 8005ad0:	f43f af43 	beq.w	800595a <_printf_float+0xae>
 8005ad4:	2700      	movs	r7, #0
 8005ad6:	f104 081a 	add.w	r8, r4, #26
 8005ada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005adc:	3b01      	subs	r3, #1
 8005ade:	42bb      	cmp	r3, r7
 8005ae0:	dc09      	bgt.n	8005af6 <_printf_float+0x24a>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	079f      	lsls	r7, r3, #30
 8005ae6:	f100 80fd 	bmi.w	8005ce4 <_printf_float+0x438>
 8005aea:	68e0      	ldr	r0, [r4, #12]
 8005aec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005aee:	4298      	cmp	r0, r3
 8005af0:	bfb8      	it	lt
 8005af2:	4618      	movlt	r0, r3
 8005af4:	e733      	b.n	800595e <_printf_float+0xb2>
 8005af6:	2301      	movs	r3, #1
 8005af8:	4642      	mov	r2, r8
 8005afa:	4659      	mov	r1, fp
 8005afc:	4628      	mov	r0, r5
 8005afe:	47b0      	blx	r6
 8005b00:	3001      	adds	r0, #1
 8005b02:	f43f af2a 	beq.w	800595a <_printf_float+0xae>
 8005b06:	3701      	adds	r7, #1
 8005b08:	e7e7      	b.n	8005ada <_printf_float+0x22e>
 8005b0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	dc2b      	bgt.n	8005b68 <_printf_float+0x2bc>
 8005b10:	2301      	movs	r3, #1
 8005b12:	4a26      	ldr	r2, [pc, #152]	; (8005bac <_printf_float+0x300>)
 8005b14:	4659      	mov	r1, fp
 8005b16:	4628      	mov	r0, r5
 8005b18:	47b0      	blx	r6
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	f43f af1d 	beq.w	800595a <_printf_float+0xae>
 8005b20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b22:	b923      	cbnz	r3, 8005b2e <_printf_float+0x282>
 8005b24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b26:	b913      	cbnz	r3, 8005b2e <_printf_float+0x282>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	07d9      	lsls	r1, r3, #31
 8005b2c:	d5d9      	bpl.n	8005ae2 <_printf_float+0x236>
 8005b2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b32:	4659      	mov	r1, fp
 8005b34:	4628      	mov	r0, r5
 8005b36:	47b0      	blx	r6
 8005b38:	3001      	adds	r0, #1
 8005b3a:	f43f af0e 	beq.w	800595a <_printf_float+0xae>
 8005b3e:	f04f 0800 	mov.w	r8, #0
 8005b42:	f104 091a 	add.w	r9, r4, #26
 8005b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b48:	425b      	negs	r3, r3
 8005b4a:	4543      	cmp	r3, r8
 8005b4c:	dc01      	bgt.n	8005b52 <_printf_float+0x2a6>
 8005b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b50:	e797      	b.n	8005a82 <_printf_float+0x1d6>
 8005b52:	2301      	movs	r3, #1
 8005b54:	464a      	mov	r2, r9
 8005b56:	4659      	mov	r1, fp
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b0      	blx	r6
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	f43f aefc 	beq.w	800595a <_printf_float+0xae>
 8005b62:	f108 0801 	add.w	r8, r8, #1
 8005b66:	e7ee      	b.n	8005b46 <_printf_float+0x29a>
 8005b68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	bfa8      	it	ge
 8005b70:	461a      	movge	r2, r3
 8005b72:	2a00      	cmp	r2, #0
 8005b74:	4690      	mov	r8, r2
 8005b76:	dd07      	ble.n	8005b88 <_printf_float+0x2dc>
 8005b78:	4613      	mov	r3, r2
 8005b7a:	4659      	mov	r1, fp
 8005b7c:	463a      	mov	r2, r7
 8005b7e:	4628      	mov	r0, r5
 8005b80:	47b0      	blx	r6
 8005b82:	3001      	adds	r0, #1
 8005b84:	f43f aee9 	beq.w	800595a <_printf_float+0xae>
 8005b88:	f104 031a 	add.w	r3, r4, #26
 8005b8c:	f04f 0a00 	mov.w	sl, #0
 8005b90:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005b94:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b96:	e015      	b.n	8005bc4 <_printf_float+0x318>
 8005b98:	7fefffff 	.word	0x7fefffff
 8005b9c:	08007ee4 	.word	0x08007ee4
 8005ba0:	08007ee0 	.word	0x08007ee0
 8005ba4:	08007eec 	.word	0x08007eec
 8005ba8:	08007ee8 	.word	0x08007ee8
 8005bac:	08007ef0 	.word	0x08007ef0
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bb4:	4659      	mov	r1, fp
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	47b0      	blx	r6
 8005bba:	3001      	adds	r0, #1
 8005bbc:	f43f aecd 	beq.w	800595a <_printf_float+0xae>
 8005bc0:	f10a 0a01 	add.w	sl, sl, #1
 8005bc4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005bc8:	eba9 0308 	sub.w	r3, r9, r8
 8005bcc:	4553      	cmp	r3, sl
 8005bce:	dcef      	bgt.n	8005bb0 <_printf_float+0x304>
 8005bd0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	444f      	add	r7, r9
 8005bd8:	db14      	blt.n	8005c04 <_printf_float+0x358>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	07da      	lsls	r2, r3, #31
 8005bde:	d411      	bmi.n	8005c04 <_printf_float+0x358>
 8005be0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005be2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005be4:	eba3 0209 	sub.w	r2, r3, r9
 8005be8:	eba3 0901 	sub.w	r9, r3, r1
 8005bec:	4591      	cmp	r9, r2
 8005bee:	bfa8      	it	ge
 8005bf0:	4691      	movge	r9, r2
 8005bf2:	f1b9 0f00 	cmp.w	r9, #0
 8005bf6:	dc0d      	bgt.n	8005c14 <_printf_float+0x368>
 8005bf8:	2700      	movs	r7, #0
 8005bfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bfe:	f104 081a 	add.w	r8, r4, #26
 8005c02:	e018      	b.n	8005c36 <_printf_float+0x38a>
 8005c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c08:	4659      	mov	r1, fp
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	47b0      	blx	r6
 8005c0e:	3001      	adds	r0, #1
 8005c10:	d1e6      	bne.n	8005be0 <_printf_float+0x334>
 8005c12:	e6a2      	b.n	800595a <_printf_float+0xae>
 8005c14:	464b      	mov	r3, r9
 8005c16:	463a      	mov	r2, r7
 8005c18:	4659      	mov	r1, fp
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	47b0      	blx	r6
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d1ea      	bne.n	8005bf8 <_printf_float+0x34c>
 8005c22:	e69a      	b.n	800595a <_printf_float+0xae>
 8005c24:	2301      	movs	r3, #1
 8005c26:	4642      	mov	r2, r8
 8005c28:	4659      	mov	r1, fp
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	47b0      	blx	r6
 8005c2e:	3001      	adds	r0, #1
 8005c30:	f43f ae93 	beq.w	800595a <_printf_float+0xae>
 8005c34:	3701      	adds	r7, #1
 8005c36:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c3a:	1a9b      	subs	r3, r3, r2
 8005c3c:	eba3 0309 	sub.w	r3, r3, r9
 8005c40:	42bb      	cmp	r3, r7
 8005c42:	dcef      	bgt.n	8005c24 <_printf_float+0x378>
 8005c44:	e74d      	b.n	8005ae2 <_printf_float+0x236>
 8005c46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c48:	2a01      	cmp	r2, #1
 8005c4a:	dc01      	bgt.n	8005c50 <_printf_float+0x3a4>
 8005c4c:	07db      	lsls	r3, r3, #31
 8005c4e:	d538      	bpl.n	8005cc2 <_printf_float+0x416>
 8005c50:	2301      	movs	r3, #1
 8005c52:	463a      	mov	r2, r7
 8005c54:	4659      	mov	r1, fp
 8005c56:	4628      	mov	r0, r5
 8005c58:	47b0      	blx	r6
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	f43f ae7d 	beq.w	800595a <_printf_float+0xae>
 8005c60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c64:	4659      	mov	r1, fp
 8005c66:	4628      	mov	r0, r5
 8005c68:	47b0      	blx	r6
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	f107 0701 	add.w	r7, r7, #1
 8005c70:	f43f ae73 	beq.w	800595a <_printf_float+0xae>
 8005c74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f103 38ff 	add.w	r8, r3, #4294967295
 8005c80:	2300      	movs	r3, #0
 8005c82:	f7fa fe91 	bl	80009a8 <__aeabi_dcmpeq>
 8005c86:	b9c0      	cbnz	r0, 8005cba <_printf_float+0x40e>
 8005c88:	4643      	mov	r3, r8
 8005c8a:	463a      	mov	r2, r7
 8005c8c:	4659      	mov	r1, fp
 8005c8e:	4628      	mov	r0, r5
 8005c90:	47b0      	blx	r6
 8005c92:	3001      	adds	r0, #1
 8005c94:	d10d      	bne.n	8005cb2 <_printf_float+0x406>
 8005c96:	e660      	b.n	800595a <_printf_float+0xae>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	4642      	mov	r2, r8
 8005c9c:	4659      	mov	r1, fp
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	47b0      	blx	r6
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	f43f ae59 	beq.w	800595a <_printf_float+0xae>
 8005ca8:	3701      	adds	r7, #1
 8005caa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cac:	3b01      	subs	r3, #1
 8005cae:	42bb      	cmp	r3, r7
 8005cb0:	dcf2      	bgt.n	8005c98 <_printf_float+0x3ec>
 8005cb2:	464b      	mov	r3, r9
 8005cb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005cb8:	e6e4      	b.n	8005a84 <_printf_float+0x1d8>
 8005cba:	2700      	movs	r7, #0
 8005cbc:	f104 081a 	add.w	r8, r4, #26
 8005cc0:	e7f3      	b.n	8005caa <_printf_float+0x3fe>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e7e1      	b.n	8005c8a <_printf_float+0x3de>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4642      	mov	r2, r8
 8005cca:	4659      	mov	r1, fp
 8005ccc:	4628      	mov	r0, r5
 8005cce:	47b0      	blx	r6
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	f43f ae42 	beq.w	800595a <_printf_float+0xae>
 8005cd6:	3701      	adds	r7, #1
 8005cd8:	68e3      	ldr	r3, [r4, #12]
 8005cda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005cdc:	1a9b      	subs	r3, r3, r2
 8005cde:	42bb      	cmp	r3, r7
 8005ce0:	dcf1      	bgt.n	8005cc6 <_printf_float+0x41a>
 8005ce2:	e702      	b.n	8005aea <_printf_float+0x23e>
 8005ce4:	2700      	movs	r7, #0
 8005ce6:	f104 0819 	add.w	r8, r4, #25
 8005cea:	e7f5      	b.n	8005cd8 <_printf_float+0x42c>
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f43f ae94 	beq.w	8005a1a <_printf_float+0x16e>
 8005cf2:	f04f 0c00 	mov.w	ip, #0
 8005cf6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005cfa:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005cfe:	6022      	str	r2, [r4, #0]
 8005d00:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005d04:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	463a      	mov	r2, r7
 8005d0c:	464b      	mov	r3, r9
 8005d0e:	4628      	mov	r0, r5
 8005d10:	f7ff fd3a 	bl	8005788 <__cvt>
 8005d14:	4607      	mov	r7, r0
 8005d16:	e64f      	b.n	80059b8 <_printf_float+0x10c>

08005d18 <_printf_common>:
 8005d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d1c:	4691      	mov	r9, r2
 8005d1e:	461f      	mov	r7, r3
 8005d20:	688a      	ldr	r2, [r1, #8]
 8005d22:	690b      	ldr	r3, [r1, #16]
 8005d24:	4606      	mov	r6, r0
 8005d26:	4293      	cmp	r3, r2
 8005d28:	bfb8      	it	lt
 8005d2a:	4613      	movlt	r3, r2
 8005d2c:	f8c9 3000 	str.w	r3, [r9]
 8005d30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d34:	460c      	mov	r4, r1
 8005d36:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d3a:	b112      	cbz	r2, 8005d42 <_printf_common+0x2a>
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	f8c9 3000 	str.w	r3, [r9]
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	0699      	lsls	r1, r3, #26
 8005d46:	bf42      	ittt	mi
 8005d48:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005d4c:	3302      	addmi	r3, #2
 8005d4e:	f8c9 3000 	strmi.w	r3, [r9]
 8005d52:	6825      	ldr	r5, [r4, #0]
 8005d54:	f015 0506 	ands.w	r5, r5, #6
 8005d58:	d107      	bne.n	8005d6a <_printf_common+0x52>
 8005d5a:	f104 0a19 	add.w	sl, r4, #25
 8005d5e:	68e3      	ldr	r3, [r4, #12]
 8005d60:	f8d9 2000 	ldr.w	r2, [r9]
 8005d64:	1a9b      	subs	r3, r3, r2
 8005d66:	42ab      	cmp	r3, r5
 8005d68:	dc29      	bgt.n	8005dbe <_printf_common+0xa6>
 8005d6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005d6e:	6822      	ldr	r2, [r4, #0]
 8005d70:	3300      	adds	r3, #0
 8005d72:	bf18      	it	ne
 8005d74:	2301      	movne	r3, #1
 8005d76:	0692      	lsls	r2, r2, #26
 8005d78:	d42e      	bmi.n	8005dd8 <_printf_common+0xc0>
 8005d7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d7e:	4639      	mov	r1, r7
 8005d80:	4630      	mov	r0, r6
 8005d82:	47c0      	blx	r8
 8005d84:	3001      	adds	r0, #1
 8005d86:	d021      	beq.n	8005dcc <_printf_common+0xb4>
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	68e5      	ldr	r5, [r4, #12]
 8005d8c:	f003 0306 	and.w	r3, r3, #6
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	bf18      	it	ne
 8005d94:	2500      	movne	r5, #0
 8005d96:	f8d9 2000 	ldr.w	r2, [r9]
 8005d9a:	f04f 0900 	mov.w	r9, #0
 8005d9e:	bf08      	it	eq
 8005da0:	1aad      	subeq	r5, r5, r2
 8005da2:	68a3      	ldr	r3, [r4, #8]
 8005da4:	6922      	ldr	r2, [r4, #16]
 8005da6:	bf08      	it	eq
 8005da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dac:	4293      	cmp	r3, r2
 8005dae:	bfc4      	itt	gt
 8005db0:	1a9b      	subgt	r3, r3, r2
 8005db2:	18ed      	addgt	r5, r5, r3
 8005db4:	341a      	adds	r4, #26
 8005db6:	454d      	cmp	r5, r9
 8005db8:	d11a      	bne.n	8005df0 <_printf_common+0xd8>
 8005dba:	2000      	movs	r0, #0
 8005dbc:	e008      	b.n	8005dd0 <_printf_common+0xb8>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	4652      	mov	r2, sl
 8005dc2:	4639      	mov	r1, r7
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	47c0      	blx	r8
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d103      	bne.n	8005dd4 <_printf_common+0xbc>
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	e7c2      	b.n	8005d5e <_printf_common+0x46>
 8005dd8:	2030      	movs	r0, #48	; 0x30
 8005dda:	18e1      	adds	r1, r4, r3
 8005ddc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005de0:	1c5a      	adds	r2, r3, #1
 8005de2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005de6:	4422      	add	r2, r4
 8005de8:	3302      	adds	r3, #2
 8005dea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dee:	e7c4      	b.n	8005d7a <_printf_common+0x62>
 8005df0:	2301      	movs	r3, #1
 8005df2:	4622      	mov	r2, r4
 8005df4:	4639      	mov	r1, r7
 8005df6:	4630      	mov	r0, r6
 8005df8:	47c0      	blx	r8
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	d0e6      	beq.n	8005dcc <_printf_common+0xb4>
 8005dfe:	f109 0901 	add.w	r9, r9, #1
 8005e02:	e7d8      	b.n	8005db6 <_printf_common+0x9e>

08005e04 <_printf_i>:
 8005e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e08:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	7e09      	ldrb	r1, [r1, #24]
 8005e10:	b085      	sub	sp, #20
 8005e12:	296e      	cmp	r1, #110	; 0x6e
 8005e14:	4617      	mov	r7, r2
 8005e16:	4606      	mov	r6, r0
 8005e18:	4698      	mov	r8, r3
 8005e1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e1c:	f000 80b3 	beq.w	8005f86 <_printf_i+0x182>
 8005e20:	d822      	bhi.n	8005e68 <_printf_i+0x64>
 8005e22:	2963      	cmp	r1, #99	; 0x63
 8005e24:	d036      	beq.n	8005e94 <_printf_i+0x90>
 8005e26:	d80a      	bhi.n	8005e3e <_printf_i+0x3a>
 8005e28:	2900      	cmp	r1, #0
 8005e2a:	f000 80b9 	beq.w	8005fa0 <_printf_i+0x19c>
 8005e2e:	2958      	cmp	r1, #88	; 0x58
 8005e30:	f000 8083 	beq.w	8005f3a <_printf_i+0x136>
 8005e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005e3c:	e032      	b.n	8005ea4 <_printf_i+0xa0>
 8005e3e:	2964      	cmp	r1, #100	; 0x64
 8005e40:	d001      	beq.n	8005e46 <_printf_i+0x42>
 8005e42:	2969      	cmp	r1, #105	; 0x69
 8005e44:	d1f6      	bne.n	8005e34 <_printf_i+0x30>
 8005e46:	6820      	ldr	r0, [r4, #0]
 8005e48:	6813      	ldr	r3, [r2, #0]
 8005e4a:	0605      	lsls	r5, r0, #24
 8005e4c:	f103 0104 	add.w	r1, r3, #4
 8005e50:	d52a      	bpl.n	8005ea8 <_printf_i+0xa4>
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6011      	str	r1, [r2, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	da03      	bge.n	8005e62 <_printf_i+0x5e>
 8005e5a:	222d      	movs	r2, #45	; 0x2d
 8005e5c:	425b      	negs	r3, r3
 8005e5e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005e62:	486f      	ldr	r0, [pc, #444]	; (8006020 <_printf_i+0x21c>)
 8005e64:	220a      	movs	r2, #10
 8005e66:	e039      	b.n	8005edc <_printf_i+0xd8>
 8005e68:	2973      	cmp	r1, #115	; 0x73
 8005e6a:	f000 809d 	beq.w	8005fa8 <_printf_i+0x1a4>
 8005e6e:	d808      	bhi.n	8005e82 <_printf_i+0x7e>
 8005e70:	296f      	cmp	r1, #111	; 0x6f
 8005e72:	d020      	beq.n	8005eb6 <_printf_i+0xb2>
 8005e74:	2970      	cmp	r1, #112	; 0x70
 8005e76:	d1dd      	bne.n	8005e34 <_printf_i+0x30>
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	f043 0320 	orr.w	r3, r3, #32
 8005e7e:	6023      	str	r3, [r4, #0]
 8005e80:	e003      	b.n	8005e8a <_printf_i+0x86>
 8005e82:	2975      	cmp	r1, #117	; 0x75
 8005e84:	d017      	beq.n	8005eb6 <_printf_i+0xb2>
 8005e86:	2978      	cmp	r1, #120	; 0x78
 8005e88:	d1d4      	bne.n	8005e34 <_printf_i+0x30>
 8005e8a:	2378      	movs	r3, #120	; 0x78
 8005e8c:	4865      	ldr	r0, [pc, #404]	; (8006024 <_printf_i+0x220>)
 8005e8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e92:	e055      	b.n	8005f40 <_printf_i+0x13c>
 8005e94:	6813      	ldr	r3, [r2, #0]
 8005e96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e9a:	1d19      	adds	r1, r3, #4
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6011      	str	r1, [r2, #0]
 8005ea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e08c      	b.n	8005fc2 <_printf_i+0x1be>
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005eae:	6011      	str	r1, [r2, #0]
 8005eb0:	bf18      	it	ne
 8005eb2:	b21b      	sxthne	r3, r3
 8005eb4:	e7cf      	b.n	8005e56 <_printf_i+0x52>
 8005eb6:	6813      	ldr	r3, [r2, #0]
 8005eb8:	6825      	ldr	r5, [r4, #0]
 8005eba:	1d18      	adds	r0, r3, #4
 8005ebc:	6010      	str	r0, [r2, #0]
 8005ebe:	0628      	lsls	r0, r5, #24
 8005ec0:	d501      	bpl.n	8005ec6 <_printf_i+0xc2>
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	e002      	b.n	8005ecc <_printf_i+0xc8>
 8005ec6:	0668      	lsls	r0, r5, #25
 8005ec8:	d5fb      	bpl.n	8005ec2 <_printf_i+0xbe>
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	296f      	cmp	r1, #111	; 0x6f
 8005ece:	bf14      	ite	ne
 8005ed0:	220a      	movne	r2, #10
 8005ed2:	2208      	moveq	r2, #8
 8005ed4:	4852      	ldr	r0, [pc, #328]	; (8006020 <_printf_i+0x21c>)
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005edc:	6865      	ldr	r5, [r4, #4]
 8005ede:	2d00      	cmp	r5, #0
 8005ee0:	60a5      	str	r5, [r4, #8]
 8005ee2:	f2c0 8095 	blt.w	8006010 <_printf_i+0x20c>
 8005ee6:	6821      	ldr	r1, [r4, #0]
 8005ee8:	f021 0104 	bic.w	r1, r1, #4
 8005eec:	6021      	str	r1, [r4, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d13d      	bne.n	8005f6e <_printf_i+0x16a>
 8005ef2:	2d00      	cmp	r5, #0
 8005ef4:	f040 808e 	bne.w	8006014 <_printf_i+0x210>
 8005ef8:	4665      	mov	r5, ip
 8005efa:	2a08      	cmp	r2, #8
 8005efc:	d10b      	bne.n	8005f16 <_printf_i+0x112>
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	07db      	lsls	r3, r3, #31
 8005f02:	d508      	bpl.n	8005f16 <_printf_i+0x112>
 8005f04:	6923      	ldr	r3, [r4, #16]
 8005f06:	6862      	ldr	r2, [r4, #4]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	bfde      	ittt	le
 8005f0c:	2330      	movle	r3, #48	; 0x30
 8005f0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f12:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f16:	ebac 0305 	sub.w	r3, ip, r5
 8005f1a:	6123      	str	r3, [r4, #16]
 8005f1c:	f8cd 8000 	str.w	r8, [sp]
 8005f20:	463b      	mov	r3, r7
 8005f22:	aa03      	add	r2, sp, #12
 8005f24:	4621      	mov	r1, r4
 8005f26:	4630      	mov	r0, r6
 8005f28:	f7ff fef6 	bl	8005d18 <_printf_common>
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	d14d      	bne.n	8005fcc <_printf_i+0x1c8>
 8005f30:	f04f 30ff 	mov.w	r0, #4294967295
 8005f34:	b005      	add	sp, #20
 8005f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f3a:	4839      	ldr	r0, [pc, #228]	; (8006020 <_printf_i+0x21c>)
 8005f3c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005f40:	6813      	ldr	r3, [r2, #0]
 8005f42:	6821      	ldr	r1, [r4, #0]
 8005f44:	1d1d      	adds	r5, r3, #4
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6015      	str	r5, [r2, #0]
 8005f4a:	060a      	lsls	r2, r1, #24
 8005f4c:	d50b      	bpl.n	8005f66 <_printf_i+0x162>
 8005f4e:	07ca      	lsls	r2, r1, #31
 8005f50:	bf44      	itt	mi
 8005f52:	f041 0120 	orrmi.w	r1, r1, #32
 8005f56:	6021      	strmi	r1, [r4, #0]
 8005f58:	b91b      	cbnz	r3, 8005f62 <_printf_i+0x15e>
 8005f5a:	6822      	ldr	r2, [r4, #0]
 8005f5c:	f022 0220 	bic.w	r2, r2, #32
 8005f60:	6022      	str	r2, [r4, #0]
 8005f62:	2210      	movs	r2, #16
 8005f64:	e7b7      	b.n	8005ed6 <_printf_i+0xd2>
 8005f66:	064d      	lsls	r5, r1, #25
 8005f68:	bf48      	it	mi
 8005f6a:	b29b      	uxthmi	r3, r3
 8005f6c:	e7ef      	b.n	8005f4e <_printf_i+0x14a>
 8005f6e:	4665      	mov	r5, ip
 8005f70:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f74:	fb02 3311 	mls	r3, r2, r1, r3
 8005f78:	5cc3      	ldrb	r3, [r0, r3]
 8005f7a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005f7e:	460b      	mov	r3, r1
 8005f80:	2900      	cmp	r1, #0
 8005f82:	d1f5      	bne.n	8005f70 <_printf_i+0x16c>
 8005f84:	e7b9      	b.n	8005efa <_printf_i+0xf6>
 8005f86:	6813      	ldr	r3, [r2, #0]
 8005f88:	6825      	ldr	r5, [r4, #0]
 8005f8a:	1d18      	adds	r0, r3, #4
 8005f8c:	6961      	ldr	r1, [r4, #20]
 8005f8e:	6010      	str	r0, [r2, #0]
 8005f90:	0628      	lsls	r0, r5, #24
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	d501      	bpl.n	8005f9a <_printf_i+0x196>
 8005f96:	6019      	str	r1, [r3, #0]
 8005f98:	e002      	b.n	8005fa0 <_printf_i+0x19c>
 8005f9a:	066a      	lsls	r2, r5, #25
 8005f9c:	d5fb      	bpl.n	8005f96 <_printf_i+0x192>
 8005f9e:	8019      	strh	r1, [r3, #0]
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	4665      	mov	r5, ip
 8005fa4:	6123      	str	r3, [r4, #16]
 8005fa6:	e7b9      	b.n	8005f1c <_printf_i+0x118>
 8005fa8:	6813      	ldr	r3, [r2, #0]
 8005faa:	1d19      	adds	r1, r3, #4
 8005fac:	6011      	str	r1, [r2, #0]
 8005fae:	681d      	ldr	r5, [r3, #0]
 8005fb0:	6862      	ldr	r2, [r4, #4]
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	f001 f947 	bl	8007248 <memchr>
 8005fba:	b108      	cbz	r0, 8005fc0 <_printf_i+0x1bc>
 8005fbc:	1b40      	subs	r0, r0, r5
 8005fbe:	6060      	str	r0, [r4, #4]
 8005fc0:	6863      	ldr	r3, [r4, #4]
 8005fc2:	6123      	str	r3, [r4, #16]
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fca:	e7a7      	b.n	8005f1c <_printf_i+0x118>
 8005fcc:	6923      	ldr	r3, [r4, #16]
 8005fce:	462a      	mov	r2, r5
 8005fd0:	4639      	mov	r1, r7
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	47c0      	blx	r8
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	d0aa      	beq.n	8005f30 <_printf_i+0x12c>
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	079b      	lsls	r3, r3, #30
 8005fde:	d413      	bmi.n	8006008 <_printf_i+0x204>
 8005fe0:	68e0      	ldr	r0, [r4, #12]
 8005fe2:	9b03      	ldr	r3, [sp, #12]
 8005fe4:	4298      	cmp	r0, r3
 8005fe6:	bfb8      	it	lt
 8005fe8:	4618      	movlt	r0, r3
 8005fea:	e7a3      	b.n	8005f34 <_printf_i+0x130>
 8005fec:	2301      	movs	r3, #1
 8005fee:	464a      	mov	r2, r9
 8005ff0:	4639      	mov	r1, r7
 8005ff2:	4630      	mov	r0, r6
 8005ff4:	47c0      	blx	r8
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	d09a      	beq.n	8005f30 <_printf_i+0x12c>
 8005ffa:	3501      	adds	r5, #1
 8005ffc:	68e3      	ldr	r3, [r4, #12]
 8005ffe:	9a03      	ldr	r2, [sp, #12]
 8006000:	1a9b      	subs	r3, r3, r2
 8006002:	42ab      	cmp	r3, r5
 8006004:	dcf2      	bgt.n	8005fec <_printf_i+0x1e8>
 8006006:	e7eb      	b.n	8005fe0 <_printf_i+0x1dc>
 8006008:	2500      	movs	r5, #0
 800600a:	f104 0919 	add.w	r9, r4, #25
 800600e:	e7f5      	b.n	8005ffc <_printf_i+0x1f8>
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1ac      	bne.n	8005f6e <_printf_i+0x16a>
 8006014:	7803      	ldrb	r3, [r0, #0]
 8006016:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800601a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800601e:	e76c      	b.n	8005efa <_printf_i+0xf6>
 8006020:	08007ef2 	.word	0x08007ef2
 8006024:	08007f03 	.word	0x08007f03

08006028 <iprintf>:
 8006028:	b40f      	push	{r0, r1, r2, r3}
 800602a:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <iprintf+0x2c>)
 800602c:	b513      	push	{r0, r1, r4, lr}
 800602e:	681c      	ldr	r4, [r3, #0]
 8006030:	b124      	cbz	r4, 800603c <iprintf+0x14>
 8006032:	69a3      	ldr	r3, [r4, #24]
 8006034:	b913      	cbnz	r3, 800603c <iprintf+0x14>
 8006036:	4620      	mov	r0, r4
 8006038:	f001 f802 	bl	8007040 <__sinit>
 800603c:	ab05      	add	r3, sp, #20
 800603e:	9a04      	ldr	r2, [sp, #16]
 8006040:	68a1      	ldr	r1, [r4, #8]
 8006042:	4620      	mov	r0, r4
 8006044:	9301      	str	r3, [sp, #4]
 8006046:	f001 fcd1 	bl	80079ec <_vfiprintf_r>
 800604a:	b002      	add	sp, #8
 800604c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006050:	b004      	add	sp, #16
 8006052:	4770      	bx	lr
 8006054:	20000010 	.word	0x20000010

08006058 <__swbuf_r>:
 8006058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605a:	460e      	mov	r6, r1
 800605c:	4614      	mov	r4, r2
 800605e:	4605      	mov	r5, r0
 8006060:	b118      	cbz	r0, 800606a <__swbuf_r+0x12>
 8006062:	6983      	ldr	r3, [r0, #24]
 8006064:	b90b      	cbnz	r3, 800606a <__swbuf_r+0x12>
 8006066:	f000 ffeb 	bl	8007040 <__sinit>
 800606a:	4b21      	ldr	r3, [pc, #132]	; (80060f0 <__swbuf_r+0x98>)
 800606c:	429c      	cmp	r4, r3
 800606e:	d12a      	bne.n	80060c6 <__swbuf_r+0x6e>
 8006070:	686c      	ldr	r4, [r5, #4]
 8006072:	69a3      	ldr	r3, [r4, #24]
 8006074:	60a3      	str	r3, [r4, #8]
 8006076:	89a3      	ldrh	r3, [r4, #12]
 8006078:	071a      	lsls	r2, r3, #28
 800607a:	d52e      	bpl.n	80060da <__swbuf_r+0x82>
 800607c:	6923      	ldr	r3, [r4, #16]
 800607e:	b363      	cbz	r3, 80060da <__swbuf_r+0x82>
 8006080:	6923      	ldr	r3, [r4, #16]
 8006082:	6820      	ldr	r0, [r4, #0]
 8006084:	b2f6      	uxtb	r6, r6
 8006086:	1ac0      	subs	r0, r0, r3
 8006088:	6963      	ldr	r3, [r4, #20]
 800608a:	4637      	mov	r7, r6
 800608c:	4283      	cmp	r3, r0
 800608e:	dc04      	bgt.n	800609a <__swbuf_r+0x42>
 8006090:	4621      	mov	r1, r4
 8006092:	4628      	mov	r0, r5
 8006094:	f000 ff6a 	bl	8006f6c <_fflush_r>
 8006098:	bb28      	cbnz	r0, 80060e6 <__swbuf_r+0x8e>
 800609a:	68a3      	ldr	r3, [r4, #8]
 800609c:	3001      	adds	r0, #1
 800609e:	3b01      	subs	r3, #1
 80060a0:	60a3      	str	r3, [r4, #8]
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	6022      	str	r2, [r4, #0]
 80060a8:	701e      	strb	r6, [r3, #0]
 80060aa:	6963      	ldr	r3, [r4, #20]
 80060ac:	4283      	cmp	r3, r0
 80060ae:	d004      	beq.n	80060ba <__swbuf_r+0x62>
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	07db      	lsls	r3, r3, #31
 80060b4:	d519      	bpl.n	80060ea <__swbuf_r+0x92>
 80060b6:	2e0a      	cmp	r6, #10
 80060b8:	d117      	bne.n	80060ea <__swbuf_r+0x92>
 80060ba:	4621      	mov	r1, r4
 80060bc:	4628      	mov	r0, r5
 80060be:	f000 ff55 	bl	8006f6c <_fflush_r>
 80060c2:	b190      	cbz	r0, 80060ea <__swbuf_r+0x92>
 80060c4:	e00f      	b.n	80060e6 <__swbuf_r+0x8e>
 80060c6:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <__swbuf_r+0x9c>)
 80060c8:	429c      	cmp	r4, r3
 80060ca:	d101      	bne.n	80060d0 <__swbuf_r+0x78>
 80060cc:	68ac      	ldr	r4, [r5, #8]
 80060ce:	e7d0      	b.n	8006072 <__swbuf_r+0x1a>
 80060d0:	4b09      	ldr	r3, [pc, #36]	; (80060f8 <__swbuf_r+0xa0>)
 80060d2:	429c      	cmp	r4, r3
 80060d4:	bf08      	it	eq
 80060d6:	68ec      	ldreq	r4, [r5, #12]
 80060d8:	e7cb      	b.n	8006072 <__swbuf_r+0x1a>
 80060da:	4621      	mov	r1, r4
 80060dc:	4628      	mov	r0, r5
 80060de:	f000 f80d 	bl	80060fc <__swsetup_r>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d0cc      	beq.n	8006080 <__swbuf_r+0x28>
 80060e6:	f04f 37ff 	mov.w	r7, #4294967295
 80060ea:	4638      	mov	r0, r7
 80060ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ee:	bf00      	nop
 80060f0:	08007f44 	.word	0x08007f44
 80060f4:	08007f64 	.word	0x08007f64
 80060f8:	08007f24 	.word	0x08007f24

080060fc <__swsetup_r>:
 80060fc:	4b32      	ldr	r3, [pc, #200]	; (80061c8 <__swsetup_r+0xcc>)
 80060fe:	b570      	push	{r4, r5, r6, lr}
 8006100:	681d      	ldr	r5, [r3, #0]
 8006102:	4606      	mov	r6, r0
 8006104:	460c      	mov	r4, r1
 8006106:	b125      	cbz	r5, 8006112 <__swsetup_r+0x16>
 8006108:	69ab      	ldr	r3, [r5, #24]
 800610a:	b913      	cbnz	r3, 8006112 <__swsetup_r+0x16>
 800610c:	4628      	mov	r0, r5
 800610e:	f000 ff97 	bl	8007040 <__sinit>
 8006112:	4b2e      	ldr	r3, [pc, #184]	; (80061cc <__swsetup_r+0xd0>)
 8006114:	429c      	cmp	r4, r3
 8006116:	d10f      	bne.n	8006138 <__swsetup_r+0x3c>
 8006118:	686c      	ldr	r4, [r5, #4]
 800611a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800611e:	b29a      	uxth	r2, r3
 8006120:	0715      	lsls	r5, r2, #28
 8006122:	d42c      	bmi.n	800617e <__swsetup_r+0x82>
 8006124:	06d0      	lsls	r0, r2, #27
 8006126:	d411      	bmi.n	800614c <__swsetup_r+0x50>
 8006128:	2209      	movs	r2, #9
 800612a:	6032      	str	r2, [r6, #0]
 800612c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006130:	81a3      	strh	r3, [r4, #12]
 8006132:	f04f 30ff 	mov.w	r0, #4294967295
 8006136:	e03e      	b.n	80061b6 <__swsetup_r+0xba>
 8006138:	4b25      	ldr	r3, [pc, #148]	; (80061d0 <__swsetup_r+0xd4>)
 800613a:	429c      	cmp	r4, r3
 800613c:	d101      	bne.n	8006142 <__swsetup_r+0x46>
 800613e:	68ac      	ldr	r4, [r5, #8]
 8006140:	e7eb      	b.n	800611a <__swsetup_r+0x1e>
 8006142:	4b24      	ldr	r3, [pc, #144]	; (80061d4 <__swsetup_r+0xd8>)
 8006144:	429c      	cmp	r4, r3
 8006146:	bf08      	it	eq
 8006148:	68ec      	ldreq	r4, [r5, #12]
 800614a:	e7e6      	b.n	800611a <__swsetup_r+0x1e>
 800614c:	0751      	lsls	r1, r2, #29
 800614e:	d512      	bpl.n	8006176 <__swsetup_r+0x7a>
 8006150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006152:	b141      	cbz	r1, 8006166 <__swsetup_r+0x6a>
 8006154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006158:	4299      	cmp	r1, r3
 800615a:	d002      	beq.n	8006162 <__swsetup_r+0x66>
 800615c:	4630      	mov	r0, r6
 800615e:	f001 fb77 	bl	8007850 <_free_r>
 8006162:	2300      	movs	r3, #0
 8006164:	6363      	str	r3, [r4, #52]	; 0x34
 8006166:	89a3      	ldrh	r3, [r4, #12]
 8006168:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800616c:	81a3      	strh	r3, [r4, #12]
 800616e:	2300      	movs	r3, #0
 8006170:	6063      	str	r3, [r4, #4]
 8006172:	6923      	ldr	r3, [r4, #16]
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	89a3      	ldrh	r3, [r4, #12]
 8006178:	f043 0308 	orr.w	r3, r3, #8
 800617c:	81a3      	strh	r3, [r4, #12]
 800617e:	6923      	ldr	r3, [r4, #16]
 8006180:	b94b      	cbnz	r3, 8006196 <__swsetup_r+0x9a>
 8006182:	89a3      	ldrh	r3, [r4, #12]
 8006184:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800618c:	d003      	beq.n	8006196 <__swsetup_r+0x9a>
 800618e:	4621      	mov	r1, r4
 8006190:	4630      	mov	r0, r6
 8006192:	f001 f811 	bl	80071b8 <__smakebuf_r>
 8006196:	89a2      	ldrh	r2, [r4, #12]
 8006198:	f012 0301 	ands.w	r3, r2, #1
 800619c:	d00c      	beq.n	80061b8 <__swsetup_r+0xbc>
 800619e:	2300      	movs	r3, #0
 80061a0:	60a3      	str	r3, [r4, #8]
 80061a2:	6963      	ldr	r3, [r4, #20]
 80061a4:	425b      	negs	r3, r3
 80061a6:	61a3      	str	r3, [r4, #24]
 80061a8:	6923      	ldr	r3, [r4, #16]
 80061aa:	b953      	cbnz	r3, 80061c2 <__swsetup_r+0xc6>
 80061ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80061b4:	d1ba      	bne.n	800612c <__swsetup_r+0x30>
 80061b6:	bd70      	pop	{r4, r5, r6, pc}
 80061b8:	0792      	lsls	r2, r2, #30
 80061ba:	bf58      	it	pl
 80061bc:	6963      	ldrpl	r3, [r4, #20]
 80061be:	60a3      	str	r3, [r4, #8]
 80061c0:	e7f2      	b.n	80061a8 <__swsetup_r+0xac>
 80061c2:	2000      	movs	r0, #0
 80061c4:	e7f7      	b.n	80061b6 <__swsetup_r+0xba>
 80061c6:	bf00      	nop
 80061c8:	20000010 	.word	0x20000010
 80061cc:	08007f44 	.word	0x08007f44
 80061d0:	08007f64 	.word	0x08007f64
 80061d4:	08007f24 	.word	0x08007f24

080061d8 <quorem>:
 80061d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061dc:	6903      	ldr	r3, [r0, #16]
 80061de:	690c      	ldr	r4, [r1, #16]
 80061e0:	4680      	mov	r8, r0
 80061e2:	42a3      	cmp	r3, r4
 80061e4:	f2c0 8084 	blt.w	80062f0 <quorem+0x118>
 80061e8:	3c01      	subs	r4, #1
 80061ea:	f101 0714 	add.w	r7, r1, #20
 80061ee:	f100 0614 	add.w	r6, r0, #20
 80061f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80061f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80061fa:	3501      	adds	r5, #1
 80061fc:	fbb0 f5f5 	udiv	r5, r0, r5
 8006200:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006204:	eb06 030c 	add.w	r3, r6, ip
 8006208:	eb07 090c 	add.w	r9, r7, ip
 800620c:	9301      	str	r3, [sp, #4]
 800620e:	b39d      	cbz	r5, 8006278 <quorem+0xa0>
 8006210:	f04f 0a00 	mov.w	sl, #0
 8006214:	4638      	mov	r0, r7
 8006216:	46b6      	mov	lr, r6
 8006218:	46d3      	mov	fp, sl
 800621a:	f850 2b04 	ldr.w	r2, [r0], #4
 800621e:	b293      	uxth	r3, r2
 8006220:	fb05 a303 	mla	r3, r5, r3, sl
 8006224:	0c12      	lsrs	r2, r2, #16
 8006226:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800622a:	fb05 a202 	mla	r2, r5, r2, sl
 800622e:	b29b      	uxth	r3, r3
 8006230:	ebab 0303 	sub.w	r3, fp, r3
 8006234:	f8de b000 	ldr.w	fp, [lr]
 8006238:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800623c:	fa1f fb8b 	uxth.w	fp, fp
 8006240:	445b      	add	r3, fp
 8006242:	fa1f fb82 	uxth.w	fp, r2
 8006246:	f8de 2000 	ldr.w	r2, [lr]
 800624a:	4581      	cmp	r9, r0
 800624c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006250:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006254:	b29b      	uxth	r3, r3
 8006256:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800625a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800625e:	f84e 3b04 	str.w	r3, [lr], #4
 8006262:	d2da      	bcs.n	800621a <quorem+0x42>
 8006264:	f856 300c 	ldr.w	r3, [r6, ip]
 8006268:	b933      	cbnz	r3, 8006278 <quorem+0xa0>
 800626a:	9b01      	ldr	r3, [sp, #4]
 800626c:	3b04      	subs	r3, #4
 800626e:	429e      	cmp	r6, r3
 8006270:	461a      	mov	r2, r3
 8006272:	d331      	bcc.n	80062d8 <quorem+0x100>
 8006274:	f8c8 4010 	str.w	r4, [r8, #16]
 8006278:	4640      	mov	r0, r8
 800627a:	f001 fa13 	bl	80076a4 <__mcmp>
 800627e:	2800      	cmp	r0, #0
 8006280:	db26      	blt.n	80062d0 <quorem+0xf8>
 8006282:	4630      	mov	r0, r6
 8006284:	f04f 0c00 	mov.w	ip, #0
 8006288:	3501      	adds	r5, #1
 800628a:	f857 1b04 	ldr.w	r1, [r7], #4
 800628e:	f8d0 e000 	ldr.w	lr, [r0]
 8006292:	b28b      	uxth	r3, r1
 8006294:	ebac 0303 	sub.w	r3, ip, r3
 8006298:	fa1f f28e 	uxth.w	r2, lr
 800629c:	4413      	add	r3, r2
 800629e:	0c0a      	lsrs	r2, r1, #16
 80062a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80062a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062ae:	45b9      	cmp	r9, r7
 80062b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80062b4:	f840 3b04 	str.w	r3, [r0], #4
 80062b8:	d2e7      	bcs.n	800628a <quorem+0xb2>
 80062ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80062be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80062c2:	b92a      	cbnz	r2, 80062d0 <quorem+0xf8>
 80062c4:	3b04      	subs	r3, #4
 80062c6:	429e      	cmp	r6, r3
 80062c8:	461a      	mov	r2, r3
 80062ca:	d30b      	bcc.n	80062e4 <quorem+0x10c>
 80062cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80062d0:	4628      	mov	r0, r5
 80062d2:	b003      	add	sp, #12
 80062d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d8:	6812      	ldr	r2, [r2, #0]
 80062da:	3b04      	subs	r3, #4
 80062dc:	2a00      	cmp	r2, #0
 80062de:	d1c9      	bne.n	8006274 <quorem+0x9c>
 80062e0:	3c01      	subs	r4, #1
 80062e2:	e7c4      	b.n	800626e <quorem+0x96>
 80062e4:	6812      	ldr	r2, [r2, #0]
 80062e6:	3b04      	subs	r3, #4
 80062e8:	2a00      	cmp	r2, #0
 80062ea:	d1ef      	bne.n	80062cc <quorem+0xf4>
 80062ec:	3c01      	subs	r4, #1
 80062ee:	e7ea      	b.n	80062c6 <quorem+0xee>
 80062f0:	2000      	movs	r0, #0
 80062f2:	e7ee      	b.n	80062d2 <quorem+0xfa>
 80062f4:	0000      	movs	r0, r0
	...

080062f8 <_dtoa_r>:
 80062f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fc:	4616      	mov	r6, r2
 80062fe:	461f      	mov	r7, r3
 8006300:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006302:	b095      	sub	sp, #84	; 0x54
 8006304:	4604      	mov	r4, r0
 8006306:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800630a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800630e:	b93d      	cbnz	r5, 8006320 <_dtoa_r+0x28>
 8006310:	2010      	movs	r0, #16
 8006312:	f000 ff91 	bl	8007238 <malloc>
 8006316:	6260      	str	r0, [r4, #36]	; 0x24
 8006318:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800631c:	6005      	str	r5, [r0, #0]
 800631e:	60c5      	str	r5, [r0, #12]
 8006320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006322:	6819      	ldr	r1, [r3, #0]
 8006324:	b151      	cbz	r1, 800633c <_dtoa_r+0x44>
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	2301      	movs	r3, #1
 800632a:	4093      	lsls	r3, r2
 800632c:	604a      	str	r2, [r1, #4]
 800632e:	608b      	str	r3, [r1, #8]
 8006330:	4620      	mov	r0, r4
 8006332:	f000 ffd6 	bl	80072e2 <_Bfree>
 8006336:	2200      	movs	r2, #0
 8006338:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	1e3b      	subs	r3, r7, #0
 800633e:	bfaf      	iteee	ge
 8006340:	2300      	movge	r3, #0
 8006342:	2201      	movlt	r2, #1
 8006344:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006348:	9303      	strlt	r3, [sp, #12]
 800634a:	bfac      	ite	ge
 800634c:	f8c8 3000 	strge.w	r3, [r8]
 8006350:	f8c8 2000 	strlt.w	r2, [r8]
 8006354:	4bae      	ldr	r3, [pc, #696]	; (8006610 <_dtoa_r+0x318>)
 8006356:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800635a:	ea33 0308 	bics.w	r3, r3, r8
 800635e:	d11b      	bne.n	8006398 <_dtoa_r+0xa0>
 8006360:	f242 730f 	movw	r3, #9999	; 0x270f
 8006364:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	9b02      	ldr	r3, [sp, #8]
 800636a:	b923      	cbnz	r3, 8006376 <_dtoa_r+0x7e>
 800636c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006370:	2800      	cmp	r0, #0
 8006372:	f000 8545 	beq.w	8006e00 <_dtoa_r+0xb08>
 8006376:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006378:	b953      	cbnz	r3, 8006390 <_dtoa_r+0x98>
 800637a:	4ba6      	ldr	r3, [pc, #664]	; (8006614 <_dtoa_r+0x31c>)
 800637c:	e021      	b.n	80063c2 <_dtoa_r+0xca>
 800637e:	4ba6      	ldr	r3, [pc, #664]	; (8006618 <_dtoa_r+0x320>)
 8006380:	9306      	str	r3, [sp, #24]
 8006382:	3308      	adds	r3, #8
 8006384:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	9806      	ldr	r0, [sp, #24]
 800638a:	b015      	add	sp, #84	; 0x54
 800638c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006390:	4ba0      	ldr	r3, [pc, #640]	; (8006614 <_dtoa_r+0x31c>)
 8006392:	9306      	str	r3, [sp, #24]
 8006394:	3303      	adds	r3, #3
 8006396:	e7f5      	b.n	8006384 <_dtoa_r+0x8c>
 8006398:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800639c:	2200      	movs	r2, #0
 800639e:	2300      	movs	r3, #0
 80063a0:	4630      	mov	r0, r6
 80063a2:	4639      	mov	r1, r7
 80063a4:	f7fa fb00 	bl	80009a8 <__aeabi_dcmpeq>
 80063a8:	4682      	mov	sl, r0
 80063aa:	b160      	cbz	r0, 80063c6 <_dtoa_r+0xce>
 80063ac:	2301      	movs	r3, #1
 80063ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80063b0:	6013      	str	r3, [r2, #0]
 80063b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8520 	beq.w	8006dfa <_dtoa_r+0xb02>
 80063ba:	4b98      	ldr	r3, [pc, #608]	; (800661c <_dtoa_r+0x324>)
 80063bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80063be:	6013      	str	r3, [r2, #0]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	9306      	str	r3, [sp, #24]
 80063c4:	e7e0      	b.n	8006388 <_dtoa_r+0x90>
 80063c6:	ab12      	add	r3, sp, #72	; 0x48
 80063c8:	9301      	str	r3, [sp, #4]
 80063ca:	ab13      	add	r3, sp, #76	; 0x4c
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	4632      	mov	r2, r6
 80063d0:	463b      	mov	r3, r7
 80063d2:	4620      	mov	r0, r4
 80063d4:	f001 f9de 	bl	8007794 <__d2b>
 80063d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80063dc:	4683      	mov	fp, r0
 80063de:	2d00      	cmp	r5, #0
 80063e0:	d07d      	beq.n	80064de <_dtoa_r+0x1e6>
 80063e2:	46b0      	mov	r8, r6
 80063e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80063e8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80063ec:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80063f0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80063f4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80063f8:	2200      	movs	r2, #0
 80063fa:	4b89      	ldr	r3, [pc, #548]	; (8006620 <_dtoa_r+0x328>)
 80063fc:	4640      	mov	r0, r8
 80063fe:	4649      	mov	r1, r9
 8006400:	f7f9 feb2 	bl	8000168 <__aeabi_dsub>
 8006404:	a37c      	add	r3, pc, #496	; (adr r3, 80065f8 <_dtoa_r+0x300>)
 8006406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640a:	f7fa f865 	bl	80004d8 <__aeabi_dmul>
 800640e:	a37c      	add	r3, pc, #496	; (adr r3, 8006600 <_dtoa_r+0x308>)
 8006410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006414:	f7f9 feaa 	bl	800016c <__adddf3>
 8006418:	4606      	mov	r6, r0
 800641a:	4628      	mov	r0, r5
 800641c:	460f      	mov	r7, r1
 800641e:	f7f9 fff1 	bl	8000404 <__aeabi_i2d>
 8006422:	a379      	add	r3, pc, #484	; (adr r3, 8006608 <_dtoa_r+0x310>)
 8006424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006428:	f7fa f856 	bl	80004d8 <__aeabi_dmul>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4630      	mov	r0, r6
 8006432:	4639      	mov	r1, r7
 8006434:	f7f9 fe9a 	bl	800016c <__adddf3>
 8006438:	4606      	mov	r6, r0
 800643a:	460f      	mov	r7, r1
 800643c:	f7fa fafc 	bl	8000a38 <__aeabi_d2iz>
 8006440:	2200      	movs	r2, #0
 8006442:	4682      	mov	sl, r0
 8006444:	2300      	movs	r3, #0
 8006446:	4630      	mov	r0, r6
 8006448:	4639      	mov	r1, r7
 800644a:	f7fa fab7 	bl	80009bc <__aeabi_dcmplt>
 800644e:	b148      	cbz	r0, 8006464 <_dtoa_r+0x16c>
 8006450:	4650      	mov	r0, sl
 8006452:	f7f9 ffd7 	bl	8000404 <__aeabi_i2d>
 8006456:	4632      	mov	r2, r6
 8006458:	463b      	mov	r3, r7
 800645a:	f7fa faa5 	bl	80009a8 <__aeabi_dcmpeq>
 800645e:	b908      	cbnz	r0, 8006464 <_dtoa_r+0x16c>
 8006460:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006464:	f1ba 0f16 	cmp.w	sl, #22
 8006468:	d85a      	bhi.n	8006520 <_dtoa_r+0x228>
 800646a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800646e:	496d      	ldr	r1, [pc, #436]	; (8006624 <_dtoa_r+0x32c>)
 8006470:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006478:	f7fa fabe 	bl	80009f8 <__aeabi_dcmpgt>
 800647c:	2800      	cmp	r0, #0
 800647e:	d051      	beq.n	8006524 <_dtoa_r+0x22c>
 8006480:	2300      	movs	r3, #0
 8006482:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006486:	930d      	str	r3, [sp, #52]	; 0x34
 8006488:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800648a:	1b5d      	subs	r5, r3, r5
 800648c:	1e6b      	subs	r3, r5, #1
 800648e:	9307      	str	r3, [sp, #28]
 8006490:	bf43      	ittte	mi
 8006492:	2300      	movmi	r3, #0
 8006494:	f1c5 0901 	rsbmi	r9, r5, #1
 8006498:	9307      	strmi	r3, [sp, #28]
 800649a:	f04f 0900 	movpl.w	r9, #0
 800649e:	f1ba 0f00 	cmp.w	sl, #0
 80064a2:	db41      	blt.n	8006528 <_dtoa_r+0x230>
 80064a4:	9b07      	ldr	r3, [sp, #28]
 80064a6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80064aa:	4453      	add	r3, sl
 80064ac:	9307      	str	r3, [sp, #28]
 80064ae:	2300      	movs	r3, #0
 80064b0:	9308      	str	r3, [sp, #32]
 80064b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064b4:	2b09      	cmp	r3, #9
 80064b6:	f200 808f 	bhi.w	80065d8 <_dtoa_r+0x2e0>
 80064ba:	2b05      	cmp	r3, #5
 80064bc:	bfc4      	itt	gt
 80064be:	3b04      	subgt	r3, #4
 80064c0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80064c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064c4:	bfc8      	it	gt
 80064c6:	2500      	movgt	r5, #0
 80064c8:	f1a3 0302 	sub.w	r3, r3, #2
 80064cc:	bfd8      	it	le
 80064ce:	2501      	movle	r5, #1
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	f200 808d 	bhi.w	80065f0 <_dtoa_r+0x2f8>
 80064d6:	e8df f003 	tbb	[pc, r3]
 80064da:	7d7b      	.short	0x7d7b
 80064dc:	6f2f      	.short	0x6f2f
 80064de:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80064e2:	441d      	add	r5, r3
 80064e4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80064e8:	2820      	cmp	r0, #32
 80064ea:	dd13      	ble.n	8006514 <_dtoa_r+0x21c>
 80064ec:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80064f0:	9b02      	ldr	r3, [sp, #8]
 80064f2:	fa08 f800 	lsl.w	r8, r8, r0
 80064f6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80064fa:	fa23 f000 	lsr.w	r0, r3, r0
 80064fe:	ea48 0000 	orr.w	r0, r8, r0
 8006502:	f7f9 ff6f 	bl	80003e4 <__aeabi_ui2d>
 8006506:	2301      	movs	r3, #1
 8006508:	4680      	mov	r8, r0
 800650a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800650e:	3d01      	subs	r5, #1
 8006510:	9310      	str	r3, [sp, #64]	; 0x40
 8006512:	e771      	b.n	80063f8 <_dtoa_r+0x100>
 8006514:	9b02      	ldr	r3, [sp, #8]
 8006516:	f1c0 0020 	rsb	r0, r0, #32
 800651a:	fa03 f000 	lsl.w	r0, r3, r0
 800651e:	e7f0      	b.n	8006502 <_dtoa_r+0x20a>
 8006520:	2301      	movs	r3, #1
 8006522:	e7b0      	b.n	8006486 <_dtoa_r+0x18e>
 8006524:	900d      	str	r0, [sp, #52]	; 0x34
 8006526:	e7af      	b.n	8006488 <_dtoa_r+0x190>
 8006528:	f1ca 0300 	rsb	r3, sl, #0
 800652c:	9308      	str	r3, [sp, #32]
 800652e:	2300      	movs	r3, #0
 8006530:	eba9 090a 	sub.w	r9, r9, sl
 8006534:	930c      	str	r3, [sp, #48]	; 0x30
 8006536:	e7bc      	b.n	80064b2 <_dtoa_r+0x1ba>
 8006538:	2301      	movs	r3, #1
 800653a:	9309      	str	r3, [sp, #36]	; 0x24
 800653c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800653e:	2b00      	cmp	r3, #0
 8006540:	dd74      	ble.n	800662c <_dtoa_r+0x334>
 8006542:	4698      	mov	r8, r3
 8006544:	9304      	str	r3, [sp, #16]
 8006546:	2200      	movs	r2, #0
 8006548:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800654a:	6072      	str	r2, [r6, #4]
 800654c:	2204      	movs	r2, #4
 800654e:	f102 0014 	add.w	r0, r2, #20
 8006552:	4298      	cmp	r0, r3
 8006554:	6871      	ldr	r1, [r6, #4]
 8006556:	d96e      	bls.n	8006636 <_dtoa_r+0x33e>
 8006558:	4620      	mov	r0, r4
 800655a:	f000 fe8e 	bl	800727a <_Balloc>
 800655e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006560:	6030      	str	r0, [r6, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f1b8 0f0e 	cmp.w	r8, #14
 8006568:	9306      	str	r3, [sp, #24]
 800656a:	f200 80ed 	bhi.w	8006748 <_dtoa_r+0x450>
 800656e:	2d00      	cmp	r5, #0
 8006570:	f000 80ea 	beq.w	8006748 <_dtoa_r+0x450>
 8006574:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006578:	f1ba 0f00 	cmp.w	sl, #0
 800657c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006580:	dd77      	ble.n	8006672 <_dtoa_r+0x37a>
 8006582:	4a28      	ldr	r2, [pc, #160]	; (8006624 <_dtoa_r+0x32c>)
 8006584:	f00a 030f 	and.w	r3, sl, #15
 8006588:	ea4f 162a 	mov.w	r6, sl, asr #4
 800658c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006590:	06f0      	lsls	r0, r6, #27
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800659a:	d568      	bpl.n	800666e <_dtoa_r+0x376>
 800659c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80065a0:	4b21      	ldr	r3, [pc, #132]	; (8006628 <_dtoa_r+0x330>)
 80065a2:	2503      	movs	r5, #3
 80065a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065a8:	f7fa f8c0 	bl	800072c <__aeabi_ddiv>
 80065ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065b0:	f006 060f 	and.w	r6, r6, #15
 80065b4:	4f1c      	ldr	r7, [pc, #112]	; (8006628 <_dtoa_r+0x330>)
 80065b6:	e04f      	b.n	8006658 <_dtoa_r+0x360>
 80065b8:	2301      	movs	r3, #1
 80065ba:	9309      	str	r3, [sp, #36]	; 0x24
 80065bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80065be:	4453      	add	r3, sl
 80065c0:	f103 0801 	add.w	r8, r3, #1
 80065c4:	9304      	str	r3, [sp, #16]
 80065c6:	4643      	mov	r3, r8
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	bfb8      	it	lt
 80065cc:	2301      	movlt	r3, #1
 80065ce:	e7ba      	b.n	8006546 <_dtoa_r+0x24e>
 80065d0:	2300      	movs	r3, #0
 80065d2:	e7b2      	b.n	800653a <_dtoa_r+0x242>
 80065d4:	2300      	movs	r3, #0
 80065d6:	e7f0      	b.n	80065ba <_dtoa_r+0x2c2>
 80065d8:	2501      	movs	r5, #1
 80065da:	2300      	movs	r3, #0
 80065dc:	9509      	str	r5, [sp, #36]	; 0x24
 80065de:	931e      	str	r3, [sp, #120]	; 0x78
 80065e0:	f04f 33ff 	mov.w	r3, #4294967295
 80065e4:	2200      	movs	r2, #0
 80065e6:	9304      	str	r3, [sp, #16]
 80065e8:	4698      	mov	r8, r3
 80065ea:	2312      	movs	r3, #18
 80065ec:	921f      	str	r2, [sp, #124]	; 0x7c
 80065ee:	e7aa      	b.n	8006546 <_dtoa_r+0x24e>
 80065f0:	2301      	movs	r3, #1
 80065f2:	9309      	str	r3, [sp, #36]	; 0x24
 80065f4:	e7f4      	b.n	80065e0 <_dtoa_r+0x2e8>
 80065f6:	bf00      	nop
 80065f8:	636f4361 	.word	0x636f4361
 80065fc:	3fd287a7 	.word	0x3fd287a7
 8006600:	8b60c8b3 	.word	0x8b60c8b3
 8006604:	3fc68a28 	.word	0x3fc68a28
 8006608:	509f79fb 	.word	0x509f79fb
 800660c:	3fd34413 	.word	0x3fd34413
 8006610:	7ff00000 	.word	0x7ff00000
 8006614:	08007f1d 	.word	0x08007f1d
 8006618:	08007f14 	.word	0x08007f14
 800661c:	08007ef1 	.word	0x08007ef1
 8006620:	3ff80000 	.word	0x3ff80000
 8006624:	08007fb0 	.word	0x08007fb0
 8006628:	08007f88 	.word	0x08007f88
 800662c:	2301      	movs	r3, #1
 800662e:	9304      	str	r3, [sp, #16]
 8006630:	4698      	mov	r8, r3
 8006632:	461a      	mov	r2, r3
 8006634:	e7da      	b.n	80065ec <_dtoa_r+0x2f4>
 8006636:	3101      	adds	r1, #1
 8006638:	6071      	str	r1, [r6, #4]
 800663a:	0052      	lsls	r2, r2, #1
 800663c:	e787      	b.n	800654e <_dtoa_r+0x256>
 800663e:	07f1      	lsls	r1, r6, #31
 8006640:	d508      	bpl.n	8006654 <_dtoa_r+0x35c>
 8006642:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006646:	e9d7 2300 	ldrd	r2, r3, [r7]
 800664a:	f7f9 ff45 	bl	80004d8 <__aeabi_dmul>
 800664e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006652:	3501      	adds	r5, #1
 8006654:	1076      	asrs	r6, r6, #1
 8006656:	3708      	adds	r7, #8
 8006658:	2e00      	cmp	r6, #0
 800665a:	d1f0      	bne.n	800663e <_dtoa_r+0x346>
 800665c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006664:	f7fa f862 	bl	800072c <__aeabi_ddiv>
 8006668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800666c:	e01b      	b.n	80066a6 <_dtoa_r+0x3ae>
 800666e:	2502      	movs	r5, #2
 8006670:	e7a0      	b.n	80065b4 <_dtoa_r+0x2bc>
 8006672:	f000 80a4 	beq.w	80067be <_dtoa_r+0x4c6>
 8006676:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800667a:	f1ca 0600 	rsb	r6, sl, #0
 800667e:	4ba0      	ldr	r3, [pc, #640]	; (8006900 <_dtoa_r+0x608>)
 8006680:	f006 020f 	and.w	r2, r6, #15
 8006684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668c:	f7f9 ff24 	bl	80004d8 <__aeabi_dmul>
 8006690:	2502      	movs	r5, #2
 8006692:	2300      	movs	r3, #0
 8006694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006698:	4f9a      	ldr	r7, [pc, #616]	; (8006904 <_dtoa_r+0x60c>)
 800669a:	1136      	asrs	r6, r6, #4
 800669c:	2e00      	cmp	r6, #0
 800669e:	f040 8083 	bne.w	80067a8 <_dtoa_r+0x4b0>
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e0      	bne.n	8006668 <_dtoa_r+0x370>
 80066a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 808a 	beq.w	80067c2 <_dtoa_r+0x4ca>
 80066ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066b2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80066b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066ba:	2200      	movs	r2, #0
 80066bc:	4b92      	ldr	r3, [pc, #584]	; (8006908 <_dtoa_r+0x610>)
 80066be:	f7fa f97d 	bl	80009bc <__aeabi_dcmplt>
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d07d      	beq.n	80067c2 <_dtoa_r+0x4ca>
 80066c6:	f1b8 0f00 	cmp.w	r8, #0
 80066ca:	d07a      	beq.n	80067c2 <_dtoa_r+0x4ca>
 80066cc:	9b04      	ldr	r3, [sp, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	dd36      	ble.n	8006740 <_dtoa_r+0x448>
 80066d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066d6:	2200      	movs	r2, #0
 80066d8:	4b8c      	ldr	r3, [pc, #560]	; (800690c <_dtoa_r+0x614>)
 80066da:	f7f9 fefd 	bl	80004d8 <__aeabi_dmul>
 80066de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066e2:	9e04      	ldr	r6, [sp, #16]
 80066e4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80066e8:	3501      	adds	r5, #1
 80066ea:	4628      	mov	r0, r5
 80066ec:	f7f9 fe8a 	bl	8000404 <__aeabi_i2d>
 80066f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066f4:	f7f9 fef0 	bl	80004d8 <__aeabi_dmul>
 80066f8:	2200      	movs	r2, #0
 80066fa:	4b85      	ldr	r3, [pc, #532]	; (8006910 <_dtoa_r+0x618>)
 80066fc:	f7f9 fd36 	bl	800016c <__adddf3>
 8006700:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006704:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006708:	950b      	str	r5, [sp, #44]	; 0x2c
 800670a:	2e00      	cmp	r6, #0
 800670c:	d15c      	bne.n	80067c8 <_dtoa_r+0x4d0>
 800670e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006712:	2200      	movs	r2, #0
 8006714:	4b7f      	ldr	r3, [pc, #508]	; (8006914 <_dtoa_r+0x61c>)
 8006716:	f7f9 fd27 	bl	8000168 <__aeabi_dsub>
 800671a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800671c:	462b      	mov	r3, r5
 800671e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006722:	f7fa f969 	bl	80009f8 <__aeabi_dcmpgt>
 8006726:	2800      	cmp	r0, #0
 8006728:	f040 8281 	bne.w	8006c2e <_dtoa_r+0x936>
 800672c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006732:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006736:	f7fa f941 	bl	80009bc <__aeabi_dcmplt>
 800673a:	2800      	cmp	r0, #0
 800673c:	f040 8275 	bne.w	8006c2a <_dtoa_r+0x932>
 8006740:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006744:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006748:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800674a:	2b00      	cmp	r3, #0
 800674c:	f2c0 814b 	blt.w	80069e6 <_dtoa_r+0x6ee>
 8006750:	f1ba 0f0e 	cmp.w	sl, #14
 8006754:	f300 8147 	bgt.w	80069e6 <_dtoa_r+0x6ee>
 8006758:	4b69      	ldr	r3, [pc, #420]	; (8006900 <_dtoa_r+0x608>)
 800675a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006762:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006766:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006768:	2b00      	cmp	r3, #0
 800676a:	f280 80d7 	bge.w	800691c <_dtoa_r+0x624>
 800676e:	f1b8 0f00 	cmp.w	r8, #0
 8006772:	f300 80d3 	bgt.w	800691c <_dtoa_r+0x624>
 8006776:	f040 8257 	bne.w	8006c28 <_dtoa_r+0x930>
 800677a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800677e:	2200      	movs	r2, #0
 8006780:	4b64      	ldr	r3, [pc, #400]	; (8006914 <_dtoa_r+0x61c>)
 8006782:	f7f9 fea9 	bl	80004d8 <__aeabi_dmul>
 8006786:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800678a:	f7fa f92b 	bl	80009e4 <__aeabi_dcmpge>
 800678e:	4646      	mov	r6, r8
 8006790:	4647      	mov	r7, r8
 8006792:	2800      	cmp	r0, #0
 8006794:	f040 822d 	bne.w	8006bf2 <_dtoa_r+0x8fa>
 8006798:	9b06      	ldr	r3, [sp, #24]
 800679a:	9a06      	ldr	r2, [sp, #24]
 800679c:	1c5d      	adds	r5, r3, #1
 800679e:	2331      	movs	r3, #49	; 0x31
 80067a0:	f10a 0a01 	add.w	sl, sl, #1
 80067a4:	7013      	strb	r3, [r2, #0]
 80067a6:	e228      	b.n	8006bfa <_dtoa_r+0x902>
 80067a8:	07f2      	lsls	r2, r6, #31
 80067aa:	d505      	bpl.n	80067b8 <_dtoa_r+0x4c0>
 80067ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067b0:	f7f9 fe92 	bl	80004d8 <__aeabi_dmul>
 80067b4:	2301      	movs	r3, #1
 80067b6:	3501      	adds	r5, #1
 80067b8:	1076      	asrs	r6, r6, #1
 80067ba:	3708      	adds	r7, #8
 80067bc:	e76e      	b.n	800669c <_dtoa_r+0x3a4>
 80067be:	2502      	movs	r5, #2
 80067c0:	e771      	b.n	80066a6 <_dtoa_r+0x3ae>
 80067c2:	4657      	mov	r7, sl
 80067c4:	4646      	mov	r6, r8
 80067c6:	e790      	b.n	80066ea <_dtoa_r+0x3f2>
 80067c8:	4b4d      	ldr	r3, [pc, #308]	; (8006900 <_dtoa_r+0x608>)
 80067ca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80067ce:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80067d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d048      	beq.n	800686a <_dtoa_r+0x572>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	2000      	movs	r0, #0
 80067de:	494e      	ldr	r1, [pc, #312]	; (8006918 <_dtoa_r+0x620>)
 80067e0:	f7f9 ffa4 	bl	800072c <__aeabi_ddiv>
 80067e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80067e8:	f7f9 fcbe 	bl	8000168 <__aeabi_dsub>
 80067ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80067f0:	9d06      	ldr	r5, [sp, #24]
 80067f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067f6:	f7fa f91f 	bl	8000a38 <__aeabi_d2iz>
 80067fa:	9011      	str	r0, [sp, #68]	; 0x44
 80067fc:	f7f9 fe02 	bl	8000404 <__aeabi_i2d>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006808:	f7f9 fcae 	bl	8000168 <__aeabi_dsub>
 800680c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800680e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006812:	3330      	adds	r3, #48	; 0x30
 8006814:	f805 3b01 	strb.w	r3, [r5], #1
 8006818:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800681c:	f7fa f8ce 	bl	80009bc <__aeabi_dcmplt>
 8006820:	2800      	cmp	r0, #0
 8006822:	d163      	bne.n	80068ec <_dtoa_r+0x5f4>
 8006824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006828:	2000      	movs	r0, #0
 800682a:	4937      	ldr	r1, [pc, #220]	; (8006908 <_dtoa_r+0x610>)
 800682c:	f7f9 fc9c 	bl	8000168 <__aeabi_dsub>
 8006830:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006834:	f7fa f8c2 	bl	80009bc <__aeabi_dcmplt>
 8006838:	2800      	cmp	r0, #0
 800683a:	f040 80b5 	bne.w	80069a8 <_dtoa_r+0x6b0>
 800683e:	9b06      	ldr	r3, [sp, #24]
 8006840:	1aeb      	subs	r3, r5, r3
 8006842:	429e      	cmp	r6, r3
 8006844:	f77f af7c 	ble.w	8006740 <_dtoa_r+0x448>
 8006848:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800684c:	2200      	movs	r2, #0
 800684e:	4b2f      	ldr	r3, [pc, #188]	; (800690c <_dtoa_r+0x614>)
 8006850:	f7f9 fe42 	bl	80004d8 <__aeabi_dmul>
 8006854:	2200      	movs	r2, #0
 8006856:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800685a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800685e:	4b2b      	ldr	r3, [pc, #172]	; (800690c <_dtoa_r+0x614>)
 8006860:	f7f9 fe3a 	bl	80004d8 <__aeabi_dmul>
 8006864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006868:	e7c3      	b.n	80067f2 <_dtoa_r+0x4fa>
 800686a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800686e:	f7f9 fe33 	bl	80004d8 <__aeabi_dmul>
 8006872:	9b06      	ldr	r3, [sp, #24]
 8006874:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006878:	199d      	adds	r5, r3, r6
 800687a:	461e      	mov	r6, r3
 800687c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006880:	f7fa f8da 	bl	8000a38 <__aeabi_d2iz>
 8006884:	9011      	str	r0, [sp, #68]	; 0x44
 8006886:	f7f9 fdbd 	bl	8000404 <__aeabi_i2d>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006892:	f7f9 fc69 	bl	8000168 <__aeabi_dsub>
 8006896:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006898:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800689c:	3330      	adds	r3, #48	; 0x30
 800689e:	f806 3b01 	strb.w	r3, [r6], #1
 80068a2:	42ae      	cmp	r6, r5
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	d124      	bne.n	80068f4 <_dtoa_r+0x5fc>
 80068aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80068ae:	4b1a      	ldr	r3, [pc, #104]	; (8006918 <_dtoa_r+0x620>)
 80068b0:	f7f9 fc5c 	bl	800016c <__adddf3>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068bc:	f7fa f89c 	bl	80009f8 <__aeabi_dcmpgt>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d171      	bne.n	80069a8 <_dtoa_r+0x6b0>
 80068c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80068c8:	2000      	movs	r0, #0
 80068ca:	4913      	ldr	r1, [pc, #76]	; (8006918 <_dtoa_r+0x620>)
 80068cc:	f7f9 fc4c 	bl	8000168 <__aeabi_dsub>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068d8:	f7fa f870 	bl	80009bc <__aeabi_dcmplt>
 80068dc:	2800      	cmp	r0, #0
 80068de:	f43f af2f 	beq.w	8006740 <_dtoa_r+0x448>
 80068e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068e6:	1e6a      	subs	r2, r5, #1
 80068e8:	2b30      	cmp	r3, #48	; 0x30
 80068ea:	d001      	beq.n	80068f0 <_dtoa_r+0x5f8>
 80068ec:	46ba      	mov	sl, r7
 80068ee:	e04a      	b.n	8006986 <_dtoa_r+0x68e>
 80068f0:	4615      	mov	r5, r2
 80068f2:	e7f6      	b.n	80068e2 <_dtoa_r+0x5ea>
 80068f4:	4b05      	ldr	r3, [pc, #20]	; (800690c <_dtoa_r+0x614>)
 80068f6:	f7f9 fdef 	bl	80004d8 <__aeabi_dmul>
 80068fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068fe:	e7bd      	b.n	800687c <_dtoa_r+0x584>
 8006900:	08007fb0 	.word	0x08007fb0
 8006904:	08007f88 	.word	0x08007f88
 8006908:	3ff00000 	.word	0x3ff00000
 800690c:	40240000 	.word	0x40240000
 8006910:	401c0000 	.word	0x401c0000
 8006914:	40140000 	.word	0x40140000
 8006918:	3fe00000 	.word	0x3fe00000
 800691c:	9d06      	ldr	r5, [sp, #24]
 800691e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006926:	4630      	mov	r0, r6
 8006928:	4639      	mov	r1, r7
 800692a:	f7f9 feff 	bl	800072c <__aeabi_ddiv>
 800692e:	f7fa f883 	bl	8000a38 <__aeabi_d2iz>
 8006932:	4681      	mov	r9, r0
 8006934:	f7f9 fd66 	bl	8000404 <__aeabi_i2d>
 8006938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800693c:	f7f9 fdcc 	bl	80004d8 <__aeabi_dmul>
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
 8006944:	4630      	mov	r0, r6
 8006946:	4639      	mov	r1, r7
 8006948:	f7f9 fc0e 	bl	8000168 <__aeabi_dsub>
 800694c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006950:	f805 6b01 	strb.w	r6, [r5], #1
 8006954:	9e06      	ldr	r6, [sp, #24]
 8006956:	4602      	mov	r2, r0
 8006958:	1bae      	subs	r6, r5, r6
 800695a:	45b0      	cmp	r8, r6
 800695c:	460b      	mov	r3, r1
 800695e:	d135      	bne.n	80069cc <_dtoa_r+0x6d4>
 8006960:	f7f9 fc04 	bl	800016c <__adddf3>
 8006964:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006968:	4606      	mov	r6, r0
 800696a:	460f      	mov	r7, r1
 800696c:	f7fa f844 	bl	80009f8 <__aeabi_dcmpgt>
 8006970:	b9c8      	cbnz	r0, 80069a6 <_dtoa_r+0x6ae>
 8006972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006976:	4630      	mov	r0, r6
 8006978:	4639      	mov	r1, r7
 800697a:	f7fa f815 	bl	80009a8 <__aeabi_dcmpeq>
 800697e:	b110      	cbz	r0, 8006986 <_dtoa_r+0x68e>
 8006980:	f019 0f01 	tst.w	r9, #1
 8006984:	d10f      	bne.n	80069a6 <_dtoa_r+0x6ae>
 8006986:	4659      	mov	r1, fp
 8006988:	4620      	mov	r0, r4
 800698a:	f000 fcaa 	bl	80072e2 <_Bfree>
 800698e:	2300      	movs	r3, #0
 8006990:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006992:	702b      	strb	r3, [r5, #0]
 8006994:	f10a 0301 	add.w	r3, sl, #1
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800699c:	2b00      	cmp	r3, #0
 800699e:	f43f acf3 	beq.w	8006388 <_dtoa_r+0x90>
 80069a2:	601d      	str	r5, [r3, #0]
 80069a4:	e4f0      	b.n	8006388 <_dtoa_r+0x90>
 80069a6:	4657      	mov	r7, sl
 80069a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069ac:	1e6b      	subs	r3, r5, #1
 80069ae:	2a39      	cmp	r2, #57	; 0x39
 80069b0:	d106      	bne.n	80069c0 <_dtoa_r+0x6c8>
 80069b2:	9a06      	ldr	r2, [sp, #24]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d107      	bne.n	80069c8 <_dtoa_r+0x6d0>
 80069b8:	2330      	movs	r3, #48	; 0x30
 80069ba:	7013      	strb	r3, [r2, #0]
 80069bc:	4613      	mov	r3, r2
 80069be:	3701      	adds	r7, #1
 80069c0:	781a      	ldrb	r2, [r3, #0]
 80069c2:	3201      	adds	r2, #1
 80069c4:	701a      	strb	r2, [r3, #0]
 80069c6:	e791      	b.n	80068ec <_dtoa_r+0x5f4>
 80069c8:	461d      	mov	r5, r3
 80069ca:	e7ed      	b.n	80069a8 <_dtoa_r+0x6b0>
 80069cc:	2200      	movs	r2, #0
 80069ce:	4b99      	ldr	r3, [pc, #612]	; (8006c34 <_dtoa_r+0x93c>)
 80069d0:	f7f9 fd82 	bl	80004d8 <__aeabi_dmul>
 80069d4:	2200      	movs	r2, #0
 80069d6:	2300      	movs	r3, #0
 80069d8:	4606      	mov	r6, r0
 80069da:	460f      	mov	r7, r1
 80069dc:	f7f9 ffe4 	bl	80009a8 <__aeabi_dcmpeq>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d09e      	beq.n	8006922 <_dtoa_r+0x62a>
 80069e4:	e7cf      	b.n	8006986 <_dtoa_r+0x68e>
 80069e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069e8:	2a00      	cmp	r2, #0
 80069ea:	f000 8088 	beq.w	8006afe <_dtoa_r+0x806>
 80069ee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80069f0:	2a01      	cmp	r2, #1
 80069f2:	dc6d      	bgt.n	8006ad0 <_dtoa_r+0x7d8>
 80069f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069f6:	2a00      	cmp	r2, #0
 80069f8:	d066      	beq.n	8006ac8 <_dtoa_r+0x7d0>
 80069fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069fe:	464d      	mov	r5, r9
 8006a00:	9e08      	ldr	r6, [sp, #32]
 8006a02:	9a07      	ldr	r2, [sp, #28]
 8006a04:	2101      	movs	r1, #1
 8006a06:	441a      	add	r2, r3
 8006a08:	4620      	mov	r0, r4
 8006a0a:	4499      	add	r9, r3
 8006a0c:	9207      	str	r2, [sp, #28]
 8006a0e:	f000 fd08 	bl	8007422 <__i2b>
 8006a12:	4607      	mov	r7, r0
 8006a14:	2d00      	cmp	r5, #0
 8006a16:	dd0b      	ble.n	8006a30 <_dtoa_r+0x738>
 8006a18:	9b07      	ldr	r3, [sp, #28]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	dd08      	ble.n	8006a30 <_dtoa_r+0x738>
 8006a1e:	42ab      	cmp	r3, r5
 8006a20:	bfa8      	it	ge
 8006a22:	462b      	movge	r3, r5
 8006a24:	9a07      	ldr	r2, [sp, #28]
 8006a26:	eba9 0903 	sub.w	r9, r9, r3
 8006a2a:	1aed      	subs	r5, r5, r3
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	9307      	str	r3, [sp, #28]
 8006a30:	9b08      	ldr	r3, [sp, #32]
 8006a32:	b1eb      	cbz	r3, 8006a70 <_dtoa_r+0x778>
 8006a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d065      	beq.n	8006b06 <_dtoa_r+0x80e>
 8006a3a:	b18e      	cbz	r6, 8006a60 <_dtoa_r+0x768>
 8006a3c:	4639      	mov	r1, r7
 8006a3e:	4632      	mov	r2, r6
 8006a40:	4620      	mov	r0, r4
 8006a42:	f000 fd8d 	bl	8007560 <__pow5mult>
 8006a46:	465a      	mov	r2, fp
 8006a48:	4601      	mov	r1, r0
 8006a4a:	4607      	mov	r7, r0
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f000 fcf1 	bl	8007434 <__multiply>
 8006a52:	4659      	mov	r1, fp
 8006a54:	900a      	str	r0, [sp, #40]	; 0x28
 8006a56:	4620      	mov	r0, r4
 8006a58:	f000 fc43 	bl	80072e2 <_Bfree>
 8006a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a5e:	469b      	mov	fp, r3
 8006a60:	9b08      	ldr	r3, [sp, #32]
 8006a62:	1b9a      	subs	r2, r3, r6
 8006a64:	d004      	beq.n	8006a70 <_dtoa_r+0x778>
 8006a66:	4659      	mov	r1, fp
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f000 fd79 	bl	8007560 <__pow5mult>
 8006a6e:	4683      	mov	fp, r0
 8006a70:	2101      	movs	r1, #1
 8006a72:	4620      	mov	r0, r4
 8006a74:	f000 fcd5 	bl	8007422 <__i2b>
 8006a78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 81c6 	beq.w	8006e0e <_dtoa_r+0xb16>
 8006a82:	461a      	mov	r2, r3
 8006a84:	4601      	mov	r1, r0
 8006a86:	4620      	mov	r0, r4
 8006a88:	f000 fd6a 	bl	8007560 <__pow5mult>
 8006a8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a8e:	4606      	mov	r6, r0
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	dc3e      	bgt.n	8006b12 <_dtoa_r+0x81a>
 8006a94:	9b02      	ldr	r3, [sp, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d137      	bne.n	8006b0a <_dtoa_r+0x812>
 8006a9a:	9b03      	ldr	r3, [sp, #12]
 8006a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d134      	bne.n	8006b0e <_dtoa_r+0x816>
 8006aa4:	9b03      	ldr	r3, [sp, #12]
 8006aa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006aaa:	0d1b      	lsrs	r3, r3, #20
 8006aac:	051b      	lsls	r3, r3, #20
 8006aae:	b12b      	cbz	r3, 8006abc <_dtoa_r+0x7c4>
 8006ab0:	9b07      	ldr	r3, [sp, #28]
 8006ab2:	f109 0901 	add.w	r9, r9, #1
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	9307      	str	r3, [sp, #28]
 8006aba:	2301      	movs	r3, #1
 8006abc:	9308      	str	r3, [sp, #32]
 8006abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d128      	bne.n	8006b16 <_dtoa_r+0x81e>
 8006ac4:	2001      	movs	r0, #1
 8006ac6:	e02e      	b.n	8006b26 <_dtoa_r+0x82e>
 8006ac8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006aca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ace:	e796      	b.n	80069fe <_dtoa_r+0x706>
 8006ad0:	9b08      	ldr	r3, [sp, #32]
 8006ad2:	f108 36ff 	add.w	r6, r8, #4294967295
 8006ad6:	42b3      	cmp	r3, r6
 8006ad8:	bfb7      	itett	lt
 8006ada:	9b08      	ldrlt	r3, [sp, #32]
 8006adc:	1b9e      	subge	r6, r3, r6
 8006ade:	1af2      	sublt	r2, r6, r3
 8006ae0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006ae2:	bfbf      	itttt	lt
 8006ae4:	9608      	strlt	r6, [sp, #32]
 8006ae6:	189b      	addlt	r3, r3, r2
 8006ae8:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006aea:	2600      	movlt	r6, #0
 8006aec:	f1b8 0f00 	cmp.w	r8, #0
 8006af0:	bfb9      	ittee	lt
 8006af2:	eba9 0508 	sublt.w	r5, r9, r8
 8006af6:	2300      	movlt	r3, #0
 8006af8:	464d      	movge	r5, r9
 8006afa:	4643      	movge	r3, r8
 8006afc:	e781      	b.n	8006a02 <_dtoa_r+0x70a>
 8006afe:	9e08      	ldr	r6, [sp, #32]
 8006b00:	464d      	mov	r5, r9
 8006b02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006b04:	e786      	b.n	8006a14 <_dtoa_r+0x71c>
 8006b06:	9a08      	ldr	r2, [sp, #32]
 8006b08:	e7ad      	b.n	8006a66 <_dtoa_r+0x76e>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	e7d6      	b.n	8006abc <_dtoa_r+0x7c4>
 8006b0e:	9b02      	ldr	r3, [sp, #8]
 8006b10:	e7d4      	b.n	8006abc <_dtoa_r+0x7c4>
 8006b12:	2300      	movs	r3, #0
 8006b14:	9308      	str	r3, [sp, #32]
 8006b16:	6933      	ldr	r3, [r6, #16]
 8006b18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b1c:	6918      	ldr	r0, [r3, #16]
 8006b1e:	f000 fc32 	bl	8007386 <__hi0bits>
 8006b22:	f1c0 0020 	rsb	r0, r0, #32
 8006b26:	9b07      	ldr	r3, [sp, #28]
 8006b28:	4418      	add	r0, r3
 8006b2a:	f010 001f 	ands.w	r0, r0, #31
 8006b2e:	d047      	beq.n	8006bc0 <_dtoa_r+0x8c8>
 8006b30:	f1c0 0320 	rsb	r3, r0, #32
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	dd3b      	ble.n	8006bb0 <_dtoa_r+0x8b8>
 8006b38:	9b07      	ldr	r3, [sp, #28]
 8006b3a:	f1c0 001c 	rsb	r0, r0, #28
 8006b3e:	4481      	add	r9, r0
 8006b40:	4405      	add	r5, r0
 8006b42:	4403      	add	r3, r0
 8006b44:	9307      	str	r3, [sp, #28]
 8006b46:	f1b9 0f00 	cmp.w	r9, #0
 8006b4a:	dd05      	ble.n	8006b58 <_dtoa_r+0x860>
 8006b4c:	4659      	mov	r1, fp
 8006b4e:	464a      	mov	r2, r9
 8006b50:	4620      	mov	r0, r4
 8006b52:	f000 fd53 	bl	80075fc <__lshift>
 8006b56:	4683      	mov	fp, r0
 8006b58:	9b07      	ldr	r3, [sp, #28]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	dd05      	ble.n	8006b6a <_dtoa_r+0x872>
 8006b5e:	4631      	mov	r1, r6
 8006b60:	461a      	mov	r2, r3
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 fd4a 	bl	80075fc <__lshift>
 8006b68:	4606      	mov	r6, r0
 8006b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b6c:	b353      	cbz	r3, 8006bc4 <_dtoa_r+0x8cc>
 8006b6e:	4631      	mov	r1, r6
 8006b70:	4658      	mov	r0, fp
 8006b72:	f000 fd97 	bl	80076a4 <__mcmp>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	da24      	bge.n	8006bc4 <_dtoa_r+0x8cc>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	4659      	mov	r1, fp
 8006b7e:	220a      	movs	r2, #10
 8006b80:	4620      	mov	r0, r4
 8006b82:	f000 fbc5 	bl	8007310 <__multadd>
 8006b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b8c:	4683      	mov	fp, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 8144 	beq.w	8006e1c <_dtoa_r+0xb24>
 8006b94:	2300      	movs	r3, #0
 8006b96:	4639      	mov	r1, r7
 8006b98:	220a      	movs	r2, #10
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f000 fbb8 	bl	8007310 <__multadd>
 8006ba0:	9b04      	ldr	r3, [sp, #16]
 8006ba2:	4607      	mov	r7, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	dc4d      	bgt.n	8006c44 <_dtoa_r+0x94c>
 8006ba8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	dd4a      	ble.n	8006c44 <_dtoa_r+0x94c>
 8006bae:	e011      	b.n	8006bd4 <_dtoa_r+0x8dc>
 8006bb0:	d0c9      	beq.n	8006b46 <_dtoa_r+0x84e>
 8006bb2:	9a07      	ldr	r2, [sp, #28]
 8006bb4:	331c      	adds	r3, #28
 8006bb6:	441a      	add	r2, r3
 8006bb8:	4499      	add	r9, r3
 8006bba:	441d      	add	r5, r3
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	e7c1      	b.n	8006b44 <_dtoa_r+0x84c>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	e7f6      	b.n	8006bb2 <_dtoa_r+0x8ba>
 8006bc4:	f1b8 0f00 	cmp.w	r8, #0
 8006bc8:	dc36      	bgt.n	8006c38 <_dtoa_r+0x940>
 8006bca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	dd33      	ble.n	8006c38 <_dtoa_r+0x940>
 8006bd0:	f8cd 8010 	str.w	r8, [sp, #16]
 8006bd4:	9b04      	ldr	r3, [sp, #16]
 8006bd6:	b963      	cbnz	r3, 8006bf2 <_dtoa_r+0x8fa>
 8006bd8:	4631      	mov	r1, r6
 8006bda:	2205      	movs	r2, #5
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f000 fb97 	bl	8007310 <__multadd>
 8006be2:	4601      	mov	r1, r0
 8006be4:	4606      	mov	r6, r0
 8006be6:	4658      	mov	r0, fp
 8006be8:	f000 fd5c 	bl	80076a4 <__mcmp>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	f73f add3 	bgt.w	8006798 <_dtoa_r+0x4a0>
 8006bf2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006bf4:	9d06      	ldr	r5, [sp, #24]
 8006bf6:	ea6f 0a03 	mvn.w	sl, r3
 8006bfa:	f04f 0900 	mov.w	r9, #0
 8006bfe:	4631      	mov	r1, r6
 8006c00:	4620      	mov	r0, r4
 8006c02:	f000 fb6e 	bl	80072e2 <_Bfree>
 8006c06:	2f00      	cmp	r7, #0
 8006c08:	f43f aebd 	beq.w	8006986 <_dtoa_r+0x68e>
 8006c0c:	f1b9 0f00 	cmp.w	r9, #0
 8006c10:	d005      	beq.n	8006c1e <_dtoa_r+0x926>
 8006c12:	45b9      	cmp	r9, r7
 8006c14:	d003      	beq.n	8006c1e <_dtoa_r+0x926>
 8006c16:	4649      	mov	r1, r9
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f000 fb62 	bl	80072e2 <_Bfree>
 8006c1e:	4639      	mov	r1, r7
 8006c20:	4620      	mov	r0, r4
 8006c22:	f000 fb5e 	bl	80072e2 <_Bfree>
 8006c26:	e6ae      	b.n	8006986 <_dtoa_r+0x68e>
 8006c28:	2600      	movs	r6, #0
 8006c2a:	4637      	mov	r7, r6
 8006c2c:	e7e1      	b.n	8006bf2 <_dtoa_r+0x8fa>
 8006c2e:	46ba      	mov	sl, r7
 8006c30:	4637      	mov	r7, r6
 8006c32:	e5b1      	b.n	8006798 <_dtoa_r+0x4a0>
 8006c34:	40240000 	.word	0x40240000
 8006c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c3a:	f8cd 8010 	str.w	r8, [sp, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 80f3 	beq.w	8006e2a <_dtoa_r+0xb32>
 8006c44:	2d00      	cmp	r5, #0
 8006c46:	dd05      	ble.n	8006c54 <_dtoa_r+0x95c>
 8006c48:	4639      	mov	r1, r7
 8006c4a:	462a      	mov	r2, r5
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f000 fcd5 	bl	80075fc <__lshift>
 8006c52:	4607      	mov	r7, r0
 8006c54:	9b08      	ldr	r3, [sp, #32]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d04c      	beq.n	8006cf4 <_dtoa_r+0x9fc>
 8006c5a:	6879      	ldr	r1, [r7, #4]
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f000 fb0c 	bl	800727a <_Balloc>
 8006c62:	4605      	mov	r5, r0
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	f107 010c 	add.w	r1, r7, #12
 8006c6a:	3202      	adds	r2, #2
 8006c6c:	0092      	lsls	r2, r2, #2
 8006c6e:	300c      	adds	r0, #12
 8006c70:	f000 faf8 	bl	8007264 <memcpy>
 8006c74:	2201      	movs	r2, #1
 8006c76:	4629      	mov	r1, r5
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f000 fcbf 	bl	80075fc <__lshift>
 8006c7e:	46b9      	mov	r9, r7
 8006c80:	4607      	mov	r7, r0
 8006c82:	9b06      	ldr	r3, [sp, #24]
 8006c84:	9307      	str	r3, [sp, #28]
 8006c86:	9b02      	ldr	r3, [sp, #8]
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	9308      	str	r3, [sp, #32]
 8006c8e:	4631      	mov	r1, r6
 8006c90:	4658      	mov	r0, fp
 8006c92:	f7ff faa1 	bl	80061d8 <quorem>
 8006c96:	4649      	mov	r1, r9
 8006c98:	4605      	mov	r5, r0
 8006c9a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006c9e:	4658      	mov	r0, fp
 8006ca0:	f000 fd00 	bl	80076a4 <__mcmp>
 8006ca4:	463a      	mov	r2, r7
 8006ca6:	9002      	str	r0, [sp, #8]
 8006ca8:	4631      	mov	r1, r6
 8006caa:	4620      	mov	r0, r4
 8006cac:	f000 fd14 	bl	80076d8 <__mdiff>
 8006cb0:	68c3      	ldr	r3, [r0, #12]
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	bb03      	cbnz	r3, 8006cf8 <_dtoa_r+0xa00>
 8006cb6:	4601      	mov	r1, r0
 8006cb8:	9009      	str	r0, [sp, #36]	; 0x24
 8006cba:	4658      	mov	r0, fp
 8006cbc:	f000 fcf2 	bl	80076a4 <__mcmp>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cca:	f000 fb0a 	bl	80072e2 <_Bfree>
 8006cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd0:	b9a3      	cbnz	r3, 8006cfc <_dtoa_r+0xa04>
 8006cd2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006cd4:	b992      	cbnz	r2, 8006cfc <_dtoa_r+0xa04>
 8006cd6:	9a08      	ldr	r2, [sp, #32]
 8006cd8:	b982      	cbnz	r2, 8006cfc <_dtoa_r+0xa04>
 8006cda:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006cde:	d029      	beq.n	8006d34 <_dtoa_r+0xa3c>
 8006ce0:	9b02      	ldr	r3, [sp, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dd01      	ble.n	8006cea <_dtoa_r+0x9f2>
 8006ce6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006cea:	9b07      	ldr	r3, [sp, #28]
 8006cec:	1c5d      	adds	r5, r3, #1
 8006cee:	f883 8000 	strb.w	r8, [r3]
 8006cf2:	e784      	b.n	8006bfe <_dtoa_r+0x906>
 8006cf4:	4638      	mov	r0, r7
 8006cf6:	e7c2      	b.n	8006c7e <_dtoa_r+0x986>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e7e3      	b.n	8006cc4 <_dtoa_r+0x9cc>
 8006cfc:	9a02      	ldr	r2, [sp, #8]
 8006cfe:	2a00      	cmp	r2, #0
 8006d00:	db04      	blt.n	8006d0c <_dtoa_r+0xa14>
 8006d02:	d123      	bne.n	8006d4c <_dtoa_r+0xa54>
 8006d04:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006d06:	bb0a      	cbnz	r2, 8006d4c <_dtoa_r+0xa54>
 8006d08:	9a08      	ldr	r2, [sp, #32]
 8006d0a:	b9fa      	cbnz	r2, 8006d4c <_dtoa_r+0xa54>
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	ddec      	ble.n	8006cea <_dtoa_r+0x9f2>
 8006d10:	4659      	mov	r1, fp
 8006d12:	2201      	movs	r2, #1
 8006d14:	4620      	mov	r0, r4
 8006d16:	f000 fc71 	bl	80075fc <__lshift>
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	4683      	mov	fp, r0
 8006d1e:	f000 fcc1 	bl	80076a4 <__mcmp>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	dc03      	bgt.n	8006d2e <_dtoa_r+0xa36>
 8006d26:	d1e0      	bne.n	8006cea <_dtoa_r+0x9f2>
 8006d28:	f018 0f01 	tst.w	r8, #1
 8006d2c:	d0dd      	beq.n	8006cea <_dtoa_r+0x9f2>
 8006d2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006d32:	d1d8      	bne.n	8006ce6 <_dtoa_r+0x9ee>
 8006d34:	9b07      	ldr	r3, [sp, #28]
 8006d36:	9a07      	ldr	r2, [sp, #28]
 8006d38:	1c5d      	adds	r5, r3, #1
 8006d3a:	2339      	movs	r3, #57	; 0x39
 8006d3c:	7013      	strb	r3, [r2, #0]
 8006d3e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d42:	1e6a      	subs	r2, r5, #1
 8006d44:	2b39      	cmp	r3, #57	; 0x39
 8006d46:	d04d      	beq.n	8006de4 <_dtoa_r+0xaec>
 8006d48:	3301      	adds	r3, #1
 8006d4a:	e052      	b.n	8006df2 <_dtoa_r+0xafa>
 8006d4c:	9a07      	ldr	r2, [sp, #28]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f102 0501 	add.w	r5, r2, #1
 8006d54:	dd06      	ble.n	8006d64 <_dtoa_r+0xa6c>
 8006d56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006d5a:	d0eb      	beq.n	8006d34 <_dtoa_r+0xa3c>
 8006d5c:	f108 0801 	add.w	r8, r8, #1
 8006d60:	9b07      	ldr	r3, [sp, #28]
 8006d62:	e7c4      	b.n	8006cee <_dtoa_r+0x9f6>
 8006d64:	9b06      	ldr	r3, [sp, #24]
 8006d66:	9a04      	ldr	r2, [sp, #16]
 8006d68:	1aeb      	subs	r3, r5, r3
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006d70:	d021      	beq.n	8006db6 <_dtoa_r+0xabe>
 8006d72:	4659      	mov	r1, fp
 8006d74:	2300      	movs	r3, #0
 8006d76:	220a      	movs	r2, #10
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f000 fac9 	bl	8007310 <__multadd>
 8006d7e:	45b9      	cmp	r9, r7
 8006d80:	4683      	mov	fp, r0
 8006d82:	f04f 0300 	mov.w	r3, #0
 8006d86:	f04f 020a 	mov.w	r2, #10
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	d105      	bne.n	8006d9c <_dtoa_r+0xaa4>
 8006d90:	f000 fabe 	bl	8007310 <__multadd>
 8006d94:	4681      	mov	r9, r0
 8006d96:	4607      	mov	r7, r0
 8006d98:	9507      	str	r5, [sp, #28]
 8006d9a:	e778      	b.n	8006c8e <_dtoa_r+0x996>
 8006d9c:	f000 fab8 	bl	8007310 <__multadd>
 8006da0:	4639      	mov	r1, r7
 8006da2:	4681      	mov	r9, r0
 8006da4:	2300      	movs	r3, #0
 8006da6:	220a      	movs	r2, #10
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fab1 	bl	8007310 <__multadd>
 8006dae:	4607      	mov	r7, r0
 8006db0:	e7f2      	b.n	8006d98 <_dtoa_r+0xaa0>
 8006db2:	f04f 0900 	mov.w	r9, #0
 8006db6:	4659      	mov	r1, fp
 8006db8:	2201      	movs	r2, #1
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f000 fc1e 	bl	80075fc <__lshift>
 8006dc0:	4631      	mov	r1, r6
 8006dc2:	4683      	mov	fp, r0
 8006dc4:	f000 fc6e 	bl	80076a4 <__mcmp>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	dcb8      	bgt.n	8006d3e <_dtoa_r+0xa46>
 8006dcc:	d102      	bne.n	8006dd4 <_dtoa_r+0xadc>
 8006dce:	f018 0f01 	tst.w	r8, #1
 8006dd2:	d1b4      	bne.n	8006d3e <_dtoa_r+0xa46>
 8006dd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006dd8:	1e6a      	subs	r2, r5, #1
 8006dda:	2b30      	cmp	r3, #48	; 0x30
 8006ddc:	f47f af0f 	bne.w	8006bfe <_dtoa_r+0x906>
 8006de0:	4615      	mov	r5, r2
 8006de2:	e7f7      	b.n	8006dd4 <_dtoa_r+0xadc>
 8006de4:	9b06      	ldr	r3, [sp, #24]
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d105      	bne.n	8006df6 <_dtoa_r+0xafe>
 8006dea:	2331      	movs	r3, #49	; 0x31
 8006dec:	9a06      	ldr	r2, [sp, #24]
 8006dee:	f10a 0a01 	add.w	sl, sl, #1
 8006df2:	7013      	strb	r3, [r2, #0]
 8006df4:	e703      	b.n	8006bfe <_dtoa_r+0x906>
 8006df6:	4615      	mov	r5, r2
 8006df8:	e7a1      	b.n	8006d3e <_dtoa_r+0xa46>
 8006dfa:	4b17      	ldr	r3, [pc, #92]	; (8006e58 <_dtoa_r+0xb60>)
 8006dfc:	f7ff bae1 	b.w	80063c2 <_dtoa_r+0xca>
 8006e00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f47f aabb 	bne.w	800637e <_dtoa_r+0x86>
 8006e08:	4b14      	ldr	r3, [pc, #80]	; (8006e5c <_dtoa_r+0xb64>)
 8006e0a:	f7ff bada 	b.w	80063c2 <_dtoa_r+0xca>
 8006e0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	f77f ae3f 	ble.w	8006a94 <_dtoa_r+0x79c>
 8006e16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e18:	9308      	str	r3, [sp, #32]
 8006e1a:	e653      	b.n	8006ac4 <_dtoa_r+0x7cc>
 8006e1c:	9b04      	ldr	r3, [sp, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	dc03      	bgt.n	8006e2a <_dtoa_r+0xb32>
 8006e22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	f73f aed5 	bgt.w	8006bd4 <_dtoa_r+0x8dc>
 8006e2a:	9d06      	ldr	r5, [sp, #24]
 8006e2c:	4631      	mov	r1, r6
 8006e2e:	4658      	mov	r0, fp
 8006e30:	f7ff f9d2 	bl	80061d8 <quorem>
 8006e34:	9b06      	ldr	r3, [sp, #24]
 8006e36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006e3a:	f805 8b01 	strb.w	r8, [r5], #1
 8006e3e:	9a04      	ldr	r2, [sp, #16]
 8006e40:	1aeb      	subs	r3, r5, r3
 8006e42:	429a      	cmp	r2, r3
 8006e44:	ddb5      	ble.n	8006db2 <_dtoa_r+0xaba>
 8006e46:	4659      	mov	r1, fp
 8006e48:	2300      	movs	r3, #0
 8006e4a:	220a      	movs	r2, #10
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f000 fa5f 	bl	8007310 <__multadd>
 8006e52:	4683      	mov	fp, r0
 8006e54:	e7ea      	b.n	8006e2c <_dtoa_r+0xb34>
 8006e56:	bf00      	nop
 8006e58:	08007ef0 	.word	0x08007ef0
 8006e5c:	08007f14 	.word	0x08007f14

08006e60 <__sflush_r>:
 8006e60:	898a      	ldrh	r2, [r1, #12]
 8006e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e66:	4605      	mov	r5, r0
 8006e68:	0710      	lsls	r0, r2, #28
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	d458      	bmi.n	8006f20 <__sflush_r+0xc0>
 8006e6e:	684b      	ldr	r3, [r1, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	dc05      	bgt.n	8006e80 <__sflush_r+0x20>
 8006e74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	dc02      	bgt.n	8006e80 <__sflush_r+0x20>
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e82:	2e00      	cmp	r6, #0
 8006e84:	d0f9      	beq.n	8006e7a <__sflush_r+0x1a>
 8006e86:	2300      	movs	r3, #0
 8006e88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e8c:	682f      	ldr	r7, [r5, #0]
 8006e8e:	6a21      	ldr	r1, [r4, #32]
 8006e90:	602b      	str	r3, [r5, #0]
 8006e92:	d032      	beq.n	8006efa <__sflush_r+0x9a>
 8006e94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e96:	89a3      	ldrh	r3, [r4, #12]
 8006e98:	075a      	lsls	r2, r3, #29
 8006e9a:	d505      	bpl.n	8006ea8 <__sflush_r+0x48>
 8006e9c:	6863      	ldr	r3, [r4, #4]
 8006e9e:	1ac0      	subs	r0, r0, r3
 8006ea0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ea2:	b10b      	cbz	r3, 8006ea8 <__sflush_r+0x48>
 8006ea4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ea6:	1ac0      	subs	r0, r0, r3
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	4602      	mov	r2, r0
 8006eac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eae:	6a21      	ldr	r1, [r4, #32]
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	47b0      	blx	r6
 8006eb4:	1c43      	adds	r3, r0, #1
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	d106      	bne.n	8006ec8 <__sflush_r+0x68>
 8006eba:	6829      	ldr	r1, [r5, #0]
 8006ebc:	291d      	cmp	r1, #29
 8006ebe:	d848      	bhi.n	8006f52 <__sflush_r+0xf2>
 8006ec0:	4a29      	ldr	r2, [pc, #164]	; (8006f68 <__sflush_r+0x108>)
 8006ec2:	40ca      	lsrs	r2, r1
 8006ec4:	07d6      	lsls	r6, r2, #31
 8006ec6:	d544      	bpl.n	8006f52 <__sflush_r+0xf2>
 8006ec8:	2200      	movs	r2, #0
 8006eca:	6062      	str	r2, [r4, #4]
 8006ecc:	6922      	ldr	r2, [r4, #16]
 8006ece:	04d9      	lsls	r1, r3, #19
 8006ed0:	6022      	str	r2, [r4, #0]
 8006ed2:	d504      	bpl.n	8006ede <__sflush_r+0x7e>
 8006ed4:	1c42      	adds	r2, r0, #1
 8006ed6:	d101      	bne.n	8006edc <__sflush_r+0x7c>
 8006ed8:	682b      	ldr	r3, [r5, #0]
 8006eda:	b903      	cbnz	r3, 8006ede <__sflush_r+0x7e>
 8006edc:	6560      	str	r0, [r4, #84]	; 0x54
 8006ede:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ee0:	602f      	str	r7, [r5, #0]
 8006ee2:	2900      	cmp	r1, #0
 8006ee4:	d0c9      	beq.n	8006e7a <__sflush_r+0x1a>
 8006ee6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006eea:	4299      	cmp	r1, r3
 8006eec:	d002      	beq.n	8006ef4 <__sflush_r+0x94>
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f000 fcae 	bl	8007850 <_free_r>
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	6360      	str	r0, [r4, #52]	; 0x34
 8006ef8:	e7c0      	b.n	8006e7c <__sflush_r+0x1c>
 8006efa:	2301      	movs	r3, #1
 8006efc:	4628      	mov	r0, r5
 8006efe:	47b0      	blx	r6
 8006f00:	1c41      	adds	r1, r0, #1
 8006f02:	d1c8      	bne.n	8006e96 <__sflush_r+0x36>
 8006f04:	682b      	ldr	r3, [r5, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0c5      	beq.n	8006e96 <__sflush_r+0x36>
 8006f0a:	2b1d      	cmp	r3, #29
 8006f0c:	d001      	beq.n	8006f12 <__sflush_r+0xb2>
 8006f0e:	2b16      	cmp	r3, #22
 8006f10:	d101      	bne.n	8006f16 <__sflush_r+0xb6>
 8006f12:	602f      	str	r7, [r5, #0]
 8006f14:	e7b1      	b.n	8006e7a <__sflush_r+0x1a>
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f1c:	81a3      	strh	r3, [r4, #12]
 8006f1e:	e7ad      	b.n	8006e7c <__sflush_r+0x1c>
 8006f20:	690f      	ldr	r7, [r1, #16]
 8006f22:	2f00      	cmp	r7, #0
 8006f24:	d0a9      	beq.n	8006e7a <__sflush_r+0x1a>
 8006f26:	0793      	lsls	r3, r2, #30
 8006f28:	bf18      	it	ne
 8006f2a:	2300      	movne	r3, #0
 8006f2c:	680e      	ldr	r6, [r1, #0]
 8006f2e:	bf08      	it	eq
 8006f30:	694b      	ldreq	r3, [r1, #20]
 8006f32:	eba6 0807 	sub.w	r8, r6, r7
 8006f36:	600f      	str	r7, [r1, #0]
 8006f38:	608b      	str	r3, [r1, #8]
 8006f3a:	f1b8 0f00 	cmp.w	r8, #0
 8006f3e:	dd9c      	ble.n	8006e7a <__sflush_r+0x1a>
 8006f40:	4643      	mov	r3, r8
 8006f42:	463a      	mov	r2, r7
 8006f44:	6a21      	ldr	r1, [r4, #32]
 8006f46:	4628      	mov	r0, r5
 8006f48:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f4a:	47b0      	blx	r6
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	dc06      	bgt.n	8006f5e <__sflush_r+0xfe>
 8006f50:	89a3      	ldrh	r3, [r4, #12]
 8006f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f56:	81a3      	strh	r3, [r4, #12]
 8006f58:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5c:	e78e      	b.n	8006e7c <__sflush_r+0x1c>
 8006f5e:	4407      	add	r7, r0
 8006f60:	eba8 0800 	sub.w	r8, r8, r0
 8006f64:	e7e9      	b.n	8006f3a <__sflush_r+0xda>
 8006f66:	bf00      	nop
 8006f68:	20400001 	.word	0x20400001

08006f6c <_fflush_r>:
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	690b      	ldr	r3, [r1, #16]
 8006f70:	4605      	mov	r5, r0
 8006f72:	460c      	mov	r4, r1
 8006f74:	b1db      	cbz	r3, 8006fae <_fflush_r+0x42>
 8006f76:	b118      	cbz	r0, 8006f80 <_fflush_r+0x14>
 8006f78:	6983      	ldr	r3, [r0, #24]
 8006f7a:	b90b      	cbnz	r3, 8006f80 <_fflush_r+0x14>
 8006f7c:	f000 f860 	bl	8007040 <__sinit>
 8006f80:	4b0c      	ldr	r3, [pc, #48]	; (8006fb4 <_fflush_r+0x48>)
 8006f82:	429c      	cmp	r4, r3
 8006f84:	d109      	bne.n	8006f9a <_fflush_r+0x2e>
 8006f86:	686c      	ldr	r4, [r5, #4]
 8006f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f8c:	b17b      	cbz	r3, 8006fae <_fflush_r+0x42>
 8006f8e:	4621      	mov	r1, r4
 8006f90:	4628      	mov	r0, r5
 8006f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f96:	f7ff bf63 	b.w	8006e60 <__sflush_r>
 8006f9a:	4b07      	ldr	r3, [pc, #28]	; (8006fb8 <_fflush_r+0x4c>)
 8006f9c:	429c      	cmp	r4, r3
 8006f9e:	d101      	bne.n	8006fa4 <_fflush_r+0x38>
 8006fa0:	68ac      	ldr	r4, [r5, #8]
 8006fa2:	e7f1      	b.n	8006f88 <_fflush_r+0x1c>
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <_fflush_r+0x50>)
 8006fa6:	429c      	cmp	r4, r3
 8006fa8:	bf08      	it	eq
 8006faa:	68ec      	ldreq	r4, [r5, #12]
 8006fac:	e7ec      	b.n	8006f88 <_fflush_r+0x1c>
 8006fae:	2000      	movs	r0, #0
 8006fb0:	bd38      	pop	{r3, r4, r5, pc}
 8006fb2:	bf00      	nop
 8006fb4:	08007f44 	.word	0x08007f44
 8006fb8:	08007f64 	.word	0x08007f64
 8006fbc:	08007f24 	.word	0x08007f24

08006fc0 <std>:
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	b510      	push	{r4, lr}
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	e9c0 3300 	strd	r3, r3, [r0]
 8006fca:	6083      	str	r3, [r0, #8]
 8006fcc:	8181      	strh	r1, [r0, #12]
 8006fce:	6643      	str	r3, [r0, #100]	; 0x64
 8006fd0:	81c2      	strh	r2, [r0, #14]
 8006fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fd6:	6183      	str	r3, [r0, #24]
 8006fd8:	4619      	mov	r1, r3
 8006fda:	2208      	movs	r2, #8
 8006fdc:	305c      	adds	r0, #92	; 0x5c
 8006fde:	f7fe fbcb 	bl	8005778 <memset>
 8006fe2:	4b05      	ldr	r3, [pc, #20]	; (8006ff8 <std+0x38>)
 8006fe4:	6224      	str	r4, [r4, #32]
 8006fe6:	6263      	str	r3, [r4, #36]	; 0x24
 8006fe8:	4b04      	ldr	r3, [pc, #16]	; (8006ffc <std+0x3c>)
 8006fea:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fec:	4b04      	ldr	r3, [pc, #16]	; (8007000 <std+0x40>)
 8006fee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ff0:	4b04      	ldr	r3, [pc, #16]	; (8007004 <std+0x44>)
 8006ff2:	6323      	str	r3, [r4, #48]	; 0x30
 8006ff4:	bd10      	pop	{r4, pc}
 8006ff6:	bf00      	nop
 8006ff8:	08007c39 	.word	0x08007c39
 8006ffc:	08007c5b 	.word	0x08007c5b
 8007000:	08007c93 	.word	0x08007c93
 8007004:	08007cb7 	.word	0x08007cb7

08007008 <_cleanup_r>:
 8007008:	4901      	ldr	r1, [pc, #4]	; (8007010 <_cleanup_r+0x8>)
 800700a:	f000 b885 	b.w	8007118 <_fwalk_reent>
 800700e:	bf00      	nop
 8007010:	08006f6d 	.word	0x08006f6d

08007014 <__sfmoreglue>:
 8007014:	b570      	push	{r4, r5, r6, lr}
 8007016:	2568      	movs	r5, #104	; 0x68
 8007018:	1e4a      	subs	r2, r1, #1
 800701a:	4355      	muls	r5, r2
 800701c:	460e      	mov	r6, r1
 800701e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007022:	f000 fc61 	bl	80078e8 <_malloc_r>
 8007026:	4604      	mov	r4, r0
 8007028:	b140      	cbz	r0, 800703c <__sfmoreglue+0x28>
 800702a:	2100      	movs	r1, #0
 800702c:	e9c0 1600 	strd	r1, r6, [r0]
 8007030:	300c      	adds	r0, #12
 8007032:	60a0      	str	r0, [r4, #8]
 8007034:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007038:	f7fe fb9e 	bl	8005778 <memset>
 800703c:	4620      	mov	r0, r4
 800703e:	bd70      	pop	{r4, r5, r6, pc}

08007040 <__sinit>:
 8007040:	6983      	ldr	r3, [r0, #24]
 8007042:	b510      	push	{r4, lr}
 8007044:	4604      	mov	r4, r0
 8007046:	bb33      	cbnz	r3, 8007096 <__sinit+0x56>
 8007048:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800704c:	6503      	str	r3, [r0, #80]	; 0x50
 800704e:	4b12      	ldr	r3, [pc, #72]	; (8007098 <__sinit+0x58>)
 8007050:	4a12      	ldr	r2, [pc, #72]	; (800709c <__sinit+0x5c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6282      	str	r2, [r0, #40]	; 0x28
 8007056:	4298      	cmp	r0, r3
 8007058:	bf04      	itt	eq
 800705a:	2301      	moveq	r3, #1
 800705c:	6183      	streq	r3, [r0, #24]
 800705e:	f000 f81f 	bl	80070a0 <__sfp>
 8007062:	6060      	str	r0, [r4, #4]
 8007064:	4620      	mov	r0, r4
 8007066:	f000 f81b 	bl	80070a0 <__sfp>
 800706a:	60a0      	str	r0, [r4, #8]
 800706c:	4620      	mov	r0, r4
 800706e:	f000 f817 	bl	80070a0 <__sfp>
 8007072:	2200      	movs	r2, #0
 8007074:	60e0      	str	r0, [r4, #12]
 8007076:	2104      	movs	r1, #4
 8007078:	6860      	ldr	r0, [r4, #4]
 800707a:	f7ff ffa1 	bl	8006fc0 <std>
 800707e:	2201      	movs	r2, #1
 8007080:	2109      	movs	r1, #9
 8007082:	68a0      	ldr	r0, [r4, #8]
 8007084:	f7ff ff9c 	bl	8006fc0 <std>
 8007088:	2202      	movs	r2, #2
 800708a:	2112      	movs	r1, #18
 800708c:	68e0      	ldr	r0, [r4, #12]
 800708e:	f7ff ff97 	bl	8006fc0 <std>
 8007092:	2301      	movs	r3, #1
 8007094:	61a3      	str	r3, [r4, #24]
 8007096:	bd10      	pop	{r4, pc}
 8007098:	08007edc 	.word	0x08007edc
 800709c:	08007009 	.word	0x08007009

080070a0 <__sfp>:
 80070a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a2:	4b1b      	ldr	r3, [pc, #108]	; (8007110 <__sfp+0x70>)
 80070a4:	4607      	mov	r7, r0
 80070a6:	681e      	ldr	r6, [r3, #0]
 80070a8:	69b3      	ldr	r3, [r6, #24]
 80070aa:	b913      	cbnz	r3, 80070b2 <__sfp+0x12>
 80070ac:	4630      	mov	r0, r6
 80070ae:	f7ff ffc7 	bl	8007040 <__sinit>
 80070b2:	3648      	adds	r6, #72	; 0x48
 80070b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070b8:	3b01      	subs	r3, #1
 80070ba:	d503      	bpl.n	80070c4 <__sfp+0x24>
 80070bc:	6833      	ldr	r3, [r6, #0]
 80070be:	b133      	cbz	r3, 80070ce <__sfp+0x2e>
 80070c0:	6836      	ldr	r6, [r6, #0]
 80070c2:	e7f7      	b.n	80070b4 <__sfp+0x14>
 80070c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070c8:	b16d      	cbz	r5, 80070e6 <__sfp+0x46>
 80070ca:	3468      	adds	r4, #104	; 0x68
 80070cc:	e7f4      	b.n	80070b8 <__sfp+0x18>
 80070ce:	2104      	movs	r1, #4
 80070d0:	4638      	mov	r0, r7
 80070d2:	f7ff ff9f 	bl	8007014 <__sfmoreglue>
 80070d6:	6030      	str	r0, [r6, #0]
 80070d8:	2800      	cmp	r0, #0
 80070da:	d1f1      	bne.n	80070c0 <__sfp+0x20>
 80070dc:	230c      	movs	r3, #12
 80070de:	4604      	mov	r4, r0
 80070e0:	603b      	str	r3, [r7, #0]
 80070e2:	4620      	mov	r0, r4
 80070e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070e6:	4b0b      	ldr	r3, [pc, #44]	; (8007114 <__sfp+0x74>)
 80070e8:	6665      	str	r5, [r4, #100]	; 0x64
 80070ea:	e9c4 5500 	strd	r5, r5, [r4]
 80070ee:	60a5      	str	r5, [r4, #8]
 80070f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80070f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80070f8:	2208      	movs	r2, #8
 80070fa:	4629      	mov	r1, r5
 80070fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007100:	f7fe fb3a 	bl	8005778 <memset>
 8007104:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007108:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800710c:	e7e9      	b.n	80070e2 <__sfp+0x42>
 800710e:	bf00      	nop
 8007110:	08007edc 	.word	0x08007edc
 8007114:	ffff0001 	.word	0xffff0001

08007118 <_fwalk_reent>:
 8007118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800711c:	4680      	mov	r8, r0
 800711e:	4689      	mov	r9, r1
 8007120:	2600      	movs	r6, #0
 8007122:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007126:	b914      	cbnz	r4, 800712e <_fwalk_reent+0x16>
 8007128:	4630      	mov	r0, r6
 800712a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800712e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007132:	3f01      	subs	r7, #1
 8007134:	d501      	bpl.n	800713a <_fwalk_reent+0x22>
 8007136:	6824      	ldr	r4, [r4, #0]
 8007138:	e7f5      	b.n	8007126 <_fwalk_reent+0xe>
 800713a:	89ab      	ldrh	r3, [r5, #12]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d907      	bls.n	8007150 <_fwalk_reent+0x38>
 8007140:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007144:	3301      	adds	r3, #1
 8007146:	d003      	beq.n	8007150 <_fwalk_reent+0x38>
 8007148:	4629      	mov	r1, r5
 800714a:	4640      	mov	r0, r8
 800714c:	47c8      	blx	r9
 800714e:	4306      	orrs	r6, r0
 8007150:	3568      	adds	r5, #104	; 0x68
 8007152:	e7ee      	b.n	8007132 <_fwalk_reent+0x1a>

08007154 <_localeconv_r>:
 8007154:	4b04      	ldr	r3, [pc, #16]	; (8007168 <_localeconv_r+0x14>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6a18      	ldr	r0, [r3, #32]
 800715a:	4b04      	ldr	r3, [pc, #16]	; (800716c <_localeconv_r+0x18>)
 800715c:	2800      	cmp	r0, #0
 800715e:	bf08      	it	eq
 8007160:	4618      	moveq	r0, r3
 8007162:	30f0      	adds	r0, #240	; 0xf0
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	20000010 	.word	0x20000010
 800716c:	20000074 	.word	0x20000074

08007170 <__swhatbuf_r>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	460e      	mov	r6, r1
 8007174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007178:	b096      	sub	sp, #88	; 0x58
 800717a:	2900      	cmp	r1, #0
 800717c:	4614      	mov	r4, r2
 800717e:	461d      	mov	r5, r3
 8007180:	da07      	bge.n	8007192 <__swhatbuf_r+0x22>
 8007182:	2300      	movs	r3, #0
 8007184:	602b      	str	r3, [r5, #0]
 8007186:	89b3      	ldrh	r3, [r6, #12]
 8007188:	061a      	lsls	r2, r3, #24
 800718a:	d410      	bmi.n	80071ae <__swhatbuf_r+0x3e>
 800718c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007190:	e00e      	b.n	80071b0 <__swhatbuf_r+0x40>
 8007192:	466a      	mov	r2, sp
 8007194:	f000 fdb6 	bl	8007d04 <_fstat_r>
 8007198:	2800      	cmp	r0, #0
 800719a:	dbf2      	blt.n	8007182 <__swhatbuf_r+0x12>
 800719c:	9a01      	ldr	r2, [sp, #4]
 800719e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071a6:	425a      	negs	r2, r3
 80071a8:	415a      	adcs	r2, r3
 80071aa:	602a      	str	r2, [r5, #0]
 80071ac:	e7ee      	b.n	800718c <__swhatbuf_r+0x1c>
 80071ae:	2340      	movs	r3, #64	; 0x40
 80071b0:	2000      	movs	r0, #0
 80071b2:	6023      	str	r3, [r4, #0]
 80071b4:	b016      	add	sp, #88	; 0x58
 80071b6:	bd70      	pop	{r4, r5, r6, pc}

080071b8 <__smakebuf_r>:
 80071b8:	898b      	ldrh	r3, [r1, #12]
 80071ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071bc:	079d      	lsls	r5, r3, #30
 80071be:	4606      	mov	r6, r0
 80071c0:	460c      	mov	r4, r1
 80071c2:	d507      	bpl.n	80071d4 <__smakebuf_r+0x1c>
 80071c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	6123      	str	r3, [r4, #16]
 80071cc:	2301      	movs	r3, #1
 80071ce:	6163      	str	r3, [r4, #20]
 80071d0:	b002      	add	sp, #8
 80071d2:	bd70      	pop	{r4, r5, r6, pc}
 80071d4:	ab01      	add	r3, sp, #4
 80071d6:	466a      	mov	r2, sp
 80071d8:	f7ff ffca 	bl	8007170 <__swhatbuf_r>
 80071dc:	9900      	ldr	r1, [sp, #0]
 80071de:	4605      	mov	r5, r0
 80071e0:	4630      	mov	r0, r6
 80071e2:	f000 fb81 	bl	80078e8 <_malloc_r>
 80071e6:	b948      	cbnz	r0, 80071fc <__smakebuf_r+0x44>
 80071e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ec:	059a      	lsls	r2, r3, #22
 80071ee:	d4ef      	bmi.n	80071d0 <__smakebuf_r+0x18>
 80071f0:	f023 0303 	bic.w	r3, r3, #3
 80071f4:	f043 0302 	orr.w	r3, r3, #2
 80071f8:	81a3      	strh	r3, [r4, #12]
 80071fa:	e7e3      	b.n	80071c4 <__smakebuf_r+0xc>
 80071fc:	4b0d      	ldr	r3, [pc, #52]	; (8007234 <__smakebuf_r+0x7c>)
 80071fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	6020      	str	r0, [r4, #0]
 8007204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007208:	81a3      	strh	r3, [r4, #12]
 800720a:	9b00      	ldr	r3, [sp, #0]
 800720c:	6120      	str	r0, [r4, #16]
 800720e:	6163      	str	r3, [r4, #20]
 8007210:	9b01      	ldr	r3, [sp, #4]
 8007212:	b15b      	cbz	r3, 800722c <__smakebuf_r+0x74>
 8007214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007218:	4630      	mov	r0, r6
 800721a:	f000 fd85 	bl	8007d28 <_isatty_r>
 800721e:	b128      	cbz	r0, 800722c <__smakebuf_r+0x74>
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	f023 0303 	bic.w	r3, r3, #3
 8007226:	f043 0301 	orr.w	r3, r3, #1
 800722a:	81a3      	strh	r3, [r4, #12]
 800722c:	89a3      	ldrh	r3, [r4, #12]
 800722e:	431d      	orrs	r5, r3
 8007230:	81a5      	strh	r5, [r4, #12]
 8007232:	e7cd      	b.n	80071d0 <__smakebuf_r+0x18>
 8007234:	08007009 	.word	0x08007009

08007238 <malloc>:
 8007238:	4b02      	ldr	r3, [pc, #8]	; (8007244 <malloc+0xc>)
 800723a:	4601      	mov	r1, r0
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	f000 bb53 	b.w	80078e8 <_malloc_r>
 8007242:	bf00      	nop
 8007244:	20000010 	.word	0x20000010

08007248 <memchr>:
 8007248:	b510      	push	{r4, lr}
 800724a:	b2c9      	uxtb	r1, r1
 800724c:	4402      	add	r2, r0
 800724e:	4290      	cmp	r0, r2
 8007250:	4603      	mov	r3, r0
 8007252:	d101      	bne.n	8007258 <memchr+0x10>
 8007254:	2300      	movs	r3, #0
 8007256:	e003      	b.n	8007260 <memchr+0x18>
 8007258:	781c      	ldrb	r4, [r3, #0]
 800725a:	3001      	adds	r0, #1
 800725c:	428c      	cmp	r4, r1
 800725e:	d1f6      	bne.n	800724e <memchr+0x6>
 8007260:	4618      	mov	r0, r3
 8007262:	bd10      	pop	{r4, pc}

08007264 <memcpy>:
 8007264:	b510      	push	{r4, lr}
 8007266:	1e43      	subs	r3, r0, #1
 8007268:	440a      	add	r2, r1
 800726a:	4291      	cmp	r1, r2
 800726c:	d100      	bne.n	8007270 <memcpy+0xc>
 800726e:	bd10      	pop	{r4, pc}
 8007270:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007274:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007278:	e7f7      	b.n	800726a <memcpy+0x6>

0800727a <_Balloc>:
 800727a:	b570      	push	{r4, r5, r6, lr}
 800727c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800727e:	4604      	mov	r4, r0
 8007280:	460e      	mov	r6, r1
 8007282:	b93d      	cbnz	r5, 8007294 <_Balloc+0x1a>
 8007284:	2010      	movs	r0, #16
 8007286:	f7ff ffd7 	bl	8007238 <malloc>
 800728a:	6260      	str	r0, [r4, #36]	; 0x24
 800728c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007290:	6005      	str	r5, [r0, #0]
 8007292:	60c5      	str	r5, [r0, #12]
 8007294:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007296:	68eb      	ldr	r3, [r5, #12]
 8007298:	b183      	cbz	r3, 80072bc <_Balloc+0x42>
 800729a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80072a2:	b9b8      	cbnz	r0, 80072d4 <_Balloc+0x5a>
 80072a4:	2101      	movs	r1, #1
 80072a6:	fa01 f506 	lsl.w	r5, r1, r6
 80072aa:	1d6a      	adds	r2, r5, #5
 80072ac:	0092      	lsls	r2, r2, #2
 80072ae:	4620      	mov	r0, r4
 80072b0:	f000 fabf 	bl	8007832 <_calloc_r>
 80072b4:	b160      	cbz	r0, 80072d0 <_Balloc+0x56>
 80072b6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80072ba:	e00e      	b.n	80072da <_Balloc+0x60>
 80072bc:	2221      	movs	r2, #33	; 0x21
 80072be:	2104      	movs	r1, #4
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 fab6 	bl	8007832 <_calloc_r>
 80072c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072c8:	60e8      	str	r0, [r5, #12]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1e4      	bne.n	800729a <_Balloc+0x20>
 80072d0:	2000      	movs	r0, #0
 80072d2:	bd70      	pop	{r4, r5, r6, pc}
 80072d4:	6802      	ldr	r2, [r0, #0]
 80072d6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80072da:	2300      	movs	r3, #0
 80072dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072e0:	e7f7      	b.n	80072d2 <_Balloc+0x58>

080072e2 <_Bfree>:
 80072e2:	b570      	push	{r4, r5, r6, lr}
 80072e4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80072e6:	4606      	mov	r6, r0
 80072e8:	460d      	mov	r5, r1
 80072ea:	b93c      	cbnz	r4, 80072fc <_Bfree+0x1a>
 80072ec:	2010      	movs	r0, #16
 80072ee:	f7ff ffa3 	bl	8007238 <malloc>
 80072f2:	6270      	str	r0, [r6, #36]	; 0x24
 80072f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072f8:	6004      	str	r4, [r0, #0]
 80072fa:	60c4      	str	r4, [r0, #12]
 80072fc:	b13d      	cbz	r5, 800730e <_Bfree+0x2c>
 80072fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007300:	686a      	ldr	r2, [r5, #4]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007308:	6029      	str	r1, [r5, #0]
 800730a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800730e:	bd70      	pop	{r4, r5, r6, pc}

08007310 <__multadd>:
 8007310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007314:	461f      	mov	r7, r3
 8007316:	4606      	mov	r6, r0
 8007318:	460c      	mov	r4, r1
 800731a:	2300      	movs	r3, #0
 800731c:	690d      	ldr	r5, [r1, #16]
 800731e:	f101 0c14 	add.w	ip, r1, #20
 8007322:	f8dc 0000 	ldr.w	r0, [ip]
 8007326:	3301      	adds	r3, #1
 8007328:	b281      	uxth	r1, r0
 800732a:	fb02 7101 	mla	r1, r2, r1, r7
 800732e:	0c00      	lsrs	r0, r0, #16
 8007330:	0c0f      	lsrs	r7, r1, #16
 8007332:	fb02 7000 	mla	r0, r2, r0, r7
 8007336:	b289      	uxth	r1, r1
 8007338:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800733c:	429d      	cmp	r5, r3
 800733e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007342:	f84c 1b04 	str.w	r1, [ip], #4
 8007346:	dcec      	bgt.n	8007322 <__multadd+0x12>
 8007348:	b1d7      	cbz	r7, 8007380 <__multadd+0x70>
 800734a:	68a3      	ldr	r3, [r4, #8]
 800734c:	42ab      	cmp	r3, r5
 800734e:	dc12      	bgt.n	8007376 <__multadd+0x66>
 8007350:	6861      	ldr	r1, [r4, #4]
 8007352:	4630      	mov	r0, r6
 8007354:	3101      	adds	r1, #1
 8007356:	f7ff ff90 	bl	800727a <_Balloc>
 800735a:	4680      	mov	r8, r0
 800735c:	6922      	ldr	r2, [r4, #16]
 800735e:	f104 010c 	add.w	r1, r4, #12
 8007362:	3202      	adds	r2, #2
 8007364:	0092      	lsls	r2, r2, #2
 8007366:	300c      	adds	r0, #12
 8007368:	f7ff ff7c 	bl	8007264 <memcpy>
 800736c:	4621      	mov	r1, r4
 800736e:	4630      	mov	r0, r6
 8007370:	f7ff ffb7 	bl	80072e2 <_Bfree>
 8007374:	4644      	mov	r4, r8
 8007376:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800737a:	3501      	adds	r5, #1
 800737c:	615f      	str	r7, [r3, #20]
 800737e:	6125      	str	r5, [r4, #16]
 8007380:	4620      	mov	r0, r4
 8007382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007386 <__hi0bits>:
 8007386:	0c02      	lsrs	r2, r0, #16
 8007388:	0412      	lsls	r2, r2, #16
 800738a:	4603      	mov	r3, r0
 800738c:	b9b2      	cbnz	r2, 80073bc <__hi0bits+0x36>
 800738e:	0403      	lsls	r3, r0, #16
 8007390:	2010      	movs	r0, #16
 8007392:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007396:	bf04      	itt	eq
 8007398:	021b      	lsleq	r3, r3, #8
 800739a:	3008      	addeq	r0, #8
 800739c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80073a0:	bf04      	itt	eq
 80073a2:	011b      	lsleq	r3, r3, #4
 80073a4:	3004      	addeq	r0, #4
 80073a6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80073aa:	bf04      	itt	eq
 80073ac:	009b      	lsleq	r3, r3, #2
 80073ae:	3002      	addeq	r0, #2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	db06      	blt.n	80073c2 <__hi0bits+0x3c>
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	d503      	bpl.n	80073c0 <__hi0bits+0x3a>
 80073b8:	3001      	adds	r0, #1
 80073ba:	4770      	bx	lr
 80073bc:	2000      	movs	r0, #0
 80073be:	e7e8      	b.n	8007392 <__hi0bits+0xc>
 80073c0:	2020      	movs	r0, #32
 80073c2:	4770      	bx	lr

080073c4 <__lo0bits>:
 80073c4:	6803      	ldr	r3, [r0, #0]
 80073c6:	4601      	mov	r1, r0
 80073c8:	f013 0207 	ands.w	r2, r3, #7
 80073cc:	d00b      	beq.n	80073e6 <__lo0bits+0x22>
 80073ce:	07da      	lsls	r2, r3, #31
 80073d0:	d423      	bmi.n	800741a <__lo0bits+0x56>
 80073d2:	0798      	lsls	r0, r3, #30
 80073d4:	bf49      	itett	mi
 80073d6:	085b      	lsrmi	r3, r3, #1
 80073d8:	089b      	lsrpl	r3, r3, #2
 80073da:	2001      	movmi	r0, #1
 80073dc:	600b      	strmi	r3, [r1, #0]
 80073de:	bf5c      	itt	pl
 80073e0:	600b      	strpl	r3, [r1, #0]
 80073e2:	2002      	movpl	r0, #2
 80073e4:	4770      	bx	lr
 80073e6:	b298      	uxth	r0, r3
 80073e8:	b9a8      	cbnz	r0, 8007416 <__lo0bits+0x52>
 80073ea:	2010      	movs	r0, #16
 80073ec:	0c1b      	lsrs	r3, r3, #16
 80073ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80073f2:	bf04      	itt	eq
 80073f4:	0a1b      	lsreq	r3, r3, #8
 80073f6:	3008      	addeq	r0, #8
 80073f8:	071a      	lsls	r2, r3, #28
 80073fa:	bf04      	itt	eq
 80073fc:	091b      	lsreq	r3, r3, #4
 80073fe:	3004      	addeq	r0, #4
 8007400:	079a      	lsls	r2, r3, #30
 8007402:	bf04      	itt	eq
 8007404:	089b      	lsreq	r3, r3, #2
 8007406:	3002      	addeq	r0, #2
 8007408:	07da      	lsls	r2, r3, #31
 800740a:	d402      	bmi.n	8007412 <__lo0bits+0x4e>
 800740c:	085b      	lsrs	r3, r3, #1
 800740e:	d006      	beq.n	800741e <__lo0bits+0x5a>
 8007410:	3001      	adds	r0, #1
 8007412:	600b      	str	r3, [r1, #0]
 8007414:	4770      	bx	lr
 8007416:	4610      	mov	r0, r2
 8007418:	e7e9      	b.n	80073ee <__lo0bits+0x2a>
 800741a:	2000      	movs	r0, #0
 800741c:	4770      	bx	lr
 800741e:	2020      	movs	r0, #32
 8007420:	4770      	bx	lr

08007422 <__i2b>:
 8007422:	b510      	push	{r4, lr}
 8007424:	460c      	mov	r4, r1
 8007426:	2101      	movs	r1, #1
 8007428:	f7ff ff27 	bl	800727a <_Balloc>
 800742c:	2201      	movs	r2, #1
 800742e:	6144      	str	r4, [r0, #20]
 8007430:	6102      	str	r2, [r0, #16]
 8007432:	bd10      	pop	{r4, pc}

08007434 <__multiply>:
 8007434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007438:	4614      	mov	r4, r2
 800743a:	690a      	ldr	r2, [r1, #16]
 800743c:	6923      	ldr	r3, [r4, #16]
 800743e:	4688      	mov	r8, r1
 8007440:	429a      	cmp	r2, r3
 8007442:	bfbe      	ittt	lt
 8007444:	460b      	movlt	r3, r1
 8007446:	46a0      	movlt	r8, r4
 8007448:	461c      	movlt	r4, r3
 800744a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800744e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007452:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007456:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800745a:	eb07 0609 	add.w	r6, r7, r9
 800745e:	42b3      	cmp	r3, r6
 8007460:	bfb8      	it	lt
 8007462:	3101      	addlt	r1, #1
 8007464:	f7ff ff09 	bl	800727a <_Balloc>
 8007468:	f100 0514 	add.w	r5, r0, #20
 800746c:	462b      	mov	r3, r5
 800746e:	2200      	movs	r2, #0
 8007470:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007474:	4573      	cmp	r3, lr
 8007476:	d316      	bcc.n	80074a6 <__multiply+0x72>
 8007478:	f104 0214 	add.w	r2, r4, #20
 800747c:	f108 0114 	add.w	r1, r8, #20
 8007480:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007484:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	9b00      	ldr	r3, [sp, #0]
 800748c:	9201      	str	r2, [sp, #4]
 800748e:	4293      	cmp	r3, r2
 8007490:	d80c      	bhi.n	80074ac <__multiply+0x78>
 8007492:	2e00      	cmp	r6, #0
 8007494:	dd03      	ble.n	800749e <__multiply+0x6a>
 8007496:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800749a:	2b00      	cmp	r3, #0
 800749c:	d05d      	beq.n	800755a <__multiply+0x126>
 800749e:	6106      	str	r6, [r0, #16]
 80074a0:	b003      	add	sp, #12
 80074a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a6:	f843 2b04 	str.w	r2, [r3], #4
 80074aa:	e7e3      	b.n	8007474 <__multiply+0x40>
 80074ac:	f8b2 b000 	ldrh.w	fp, [r2]
 80074b0:	f1bb 0f00 	cmp.w	fp, #0
 80074b4:	d023      	beq.n	80074fe <__multiply+0xca>
 80074b6:	4689      	mov	r9, r1
 80074b8:	46ac      	mov	ip, r5
 80074ba:	f04f 0800 	mov.w	r8, #0
 80074be:	f859 4b04 	ldr.w	r4, [r9], #4
 80074c2:	f8dc a000 	ldr.w	sl, [ip]
 80074c6:	b2a3      	uxth	r3, r4
 80074c8:	fa1f fa8a 	uxth.w	sl, sl
 80074cc:	fb0b a303 	mla	r3, fp, r3, sl
 80074d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80074d4:	f8dc 4000 	ldr.w	r4, [ip]
 80074d8:	4443      	add	r3, r8
 80074da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80074de:	fb0b 840a 	mla	r4, fp, sl, r8
 80074e2:	46e2      	mov	sl, ip
 80074e4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80074ee:	454f      	cmp	r7, r9
 80074f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80074f4:	f84a 3b04 	str.w	r3, [sl], #4
 80074f8:	d82b      	bhi.n	8007552 <__multiply+0x11e>
 80074fa:	f8cc 8004 	str.w	r8, [ip, #4]
 80074fe:	9b01      	ldr	r3, [sp, #4]
 8007500:	3204      	adds	r2, #4
 8007502:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007506:	f1ba 0f00 	cmp.w	sl, #0
 800750a:	d020      	beq.n	800754e <__multiply+0x11a>
 800750c:	4689      	mov	r9, r1
 800750e:	46a8      	mov	r8, r5
 8007510:	f04f 0b00 	mov.w	fp, #0
 8007514:	682b      	ldr	r3, [r5, #0]
 8007516:	f8b9 c000 	ldrh.w	ip, [r9]
 800751a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800751e:	b29b      	uxth	r3, r3
 8007520:	fb0a 440c 	mla	r4, sl, ip, r4
 8007524:	46c4      	mov	ip, r8
 8007526:	445c      	add	r4, fp
 8007528:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800752c:	f84c 3b04 	str.w	r3, [ip], #4
 8007530:	f859 3b04 	ldr.w	r3, [r9], #4
 8007534:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007538:	0c1b      	lsrs	r3, r3, #16
 800753a:	fb0a b303 	mla	r3, sl, r3, fp
 800753e:	454f      	cmp	r7, r9
 8007540:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007544:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007548:	d805      	bhi.n	8007556 <__multiply+0x122>
 800754a:	f8c8 3004 	str.w	r3, [r8, #4]
 800754e:	3504      	adds	r5, #4
 8007550:	e79b      	b.n	800748a <__multiply+0x56>
 8007552:	46d4      	mov	ip, sl
 8007554:	e7b3      	b.n	80074be <__multiply+0x8a>
 8007556:	46e0      	mov	r8, ip
 8007558:	e7dd      	b.n	8007516 <__multiply+0xe2>
 800755a:	3e01      	subs	r6, #1
 800755c:	e799      	b.n	8007492 <__multiply+0x5e>
	...

08007560 <__pow5mult>:
 8007560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007564:	4615      	mov	r5, r2
 8007566:	f012 0203 	ands.w	r2, r2, #3
 800756a:	4606      	mov	r6, r0
 800756c:	460f      	mov	r7, r1
 800756e:	d007      	beq.n	8007580 <__pow5mult+0x20>
 8007570:	4c21      	ldr	r4, [pc, #132]	; (80075f8 <__pow5mult+0x98>)
 8007572:	3a01      	subs	r2, #1
 8007574:	2300      	movs	r3, #0
 8007576:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800757a:	f7ff fec9 	bl	8007310 <__multadd>
 800757e:	4607      	mov	r7, r0
 8007580:	10ad      	asrs	r5, r5, #2
 8007582:	d035      	beq.n	80075f0 <__pow5mult+0x90>
 8007584:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007586:	b93c      	cbnz	r4, 8007598 <__pow5mult+0x38>
 8007588:	2010      	movs	r0, #16
 800758a:	f7ff fe55 	bl	8007238 <malloc>
 800758e:	6270      	str	r0, [r6, #36]	; 0x24
 8007590:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007594:	6004      	str	r4, [r0, #0]
 8007596:	60c4      	str	r4, [r0, #12]
 8007598:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800759c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075a0:	b94c      	cbnz	r4, 80075b6 <__pow5mult+0x56>
 80075a2:	f240 2171 	movw	r1, #625	; 0x271
 80075a6:	4630      	mov	r0, r6
 80075a8:	f7ff ff3b 	bl	8007422 <__i2b>
 80075ac:	2300      	movs	r3, #0
 80075ae:	4604      	mov	r4, r0
 80075b0:	f8c8 0008 	str.w	r0, [r8, #8]
 80075b4:	6003      	str	r3, [r0, #0]
 80075b6:	f04f 0800 	mov.w	r8, #0
 80075ba:	07eb      	lsls	r3, r5, #31
 80075bc:	d50a      	bpl.n	80075d4 <__pow5mult+0x74>
 80075be:	4639      	mov	r1, r7
 80075c0:	4622      	mov	r2, r4
 80075c2:	4630      	mov	r0, r6
 80075c4:	f7ff ff36 	bl	8007434 <__multiply>
 80075c8:	4681      	mov	r9, r0
 80075ca:	4639      	mov	r1, r7
 80075cc:	4630      	mov	r0, r6
 80075ce:	f7ff fe88 	bl	80072e2 <_Bfree>
 80075d2:	464f      	mov	r7, r9
 80075d4:	106d      	asrs	r5, r5, #1
 80075d6:	d00b      	beq.n	80075f0 <__pow5mult+0x90>
 80075d8:	6820      	ldr	r0, [r4, #0]
 80075da:	b938      	cbnz	r0, 80075ec <__pow5mult+0x8c>
 80075dc:	4622      	mov	r2, r4
 80075de:	4621      	mov	r1, r4
 80075e0:	4630      	mov	r0, r6
 80075e2:	f7ff ff27 	bl	8007434 <__multiply>
 80075e6:	6020      	str	r0, [r4, #0]
 80075e8:	f8c0 8000 	str.w	r8, [r0]
 80075ec:	4604      	mov	r4, r0
 80075ee:	e7e4      	b.n	80075ba <__pow5mult+0x5a>
 80075f0:	4638      	mov	r0, r7
 80075f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075f6:	bf00      	nop
 80075f8:	08008078 	.word	0x08008078

080075fc <__lshift>:
 80075fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007600:	460c      	mov	r4, r1
 8007602:	4607      	mov	r7, r0
 8007604:	4616      	mov	r6, r2
 8007606:	6923      	ldr	r3, [r4, #16]
 8007608:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800760c:	eb0a 0903 	add.w	r9, sl, r3
 8007610:	6849      	ldr	r1, [r1, #4]
 8007612:	68a3      	ldr	r3, [r4, #8]
 8007614:	f109 0501 	add.w	r5, r9, #1
 8007618:	42ab      	cmp	r3, r5
 800761a:	db32      	blt.n	8007682 <__lshift+0x86>
 800761c:	4638      	mov	r0, r7
 800761e:	f7ff fe2c 	bl	800727a <_Balloc>
 8007622:	2300      	movs	r3, #0
 8007624:	4680      	mov	r8, r0
 8007626:	461a      	mov	r2, r3
 8007628:	f100 0114 	add.w	r1, r0, #20
 800762c:	4553      	cmp	r3, sl
 800762e:	db2b      	blt.n	8007688 <__lshift+0x8c>
 8007630:	6920      	ldr	r0, [r4, #16]
 8007632:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007636:	f104 0314 	add.w	r3, r4, #20
 800763a:	f016 021f 	ands.w	r2, r6, #31
 800763e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007642:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007646:	d025      	beq.n	8007694 <__lshift+0x98>
 8007648:	2000      	movs	r0, #0
 800764a:	f1c2 0e20 	rsb	lr, r2, #32
 800764e:	468a      	mov	sl, r1
 8007650:	681e      	ldr	r6, [r3, #0]
 8007652:	4096      	lsls	r6, r2
 8007654:	4330      	orrs	r0, r6
 8007656:	f84a 0b04 	str.w	r0, [sl], #4
 800765a:	f853 0b04 	ldr.w	r0, [r3], #4
 800765e:	459c      	cmp	ip, r3
 8007660:	fa20 f00e 	lsr.w	r0, r0, lr
 8007664:	d814      	bhi.n	8007690 <__lshift+0x94>
 8007666:	6048      	str	r0, [r1, #4]
 8007668:	b108      	cbz	r0, 800766e <__lshift+0x72>
 800766a:	f109 0502 	add.w	r5, r9, #2
 800766e:	3d01      	subs	r5, #1
 8007670:	4638      	mov	r0, r7
 8007672:	f8c8 5010 	str.w	r5, [r8, #16]
 8007676:	4621      	mov	r1, r4
 8007678:	f7ff fe33 	bl	80072e2 <_Bfree>
 800767c:	4640      	mov	r0, r8
 800767e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007682:	3101      	adds	r1, #1
 8007684:	005b      	lsls	r3, r3, #1
 8007686:	e7c7      	b.n	8007618 <__lshift+0x1c>
 8007688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800768c:	3301      	adds	r3, #1
 800768e:	e7cd      	b.n	800762c <__lshift+0x30>
 8007690:	4651      	mov	r1, sl
 8007692:	e7dc      	b.n	800764e <__lshift+0x52>
 8007694:	3904      	subs	r1, #4
 8007696:	f853 2b04 	ldr.w	r2, [r3], #4
 800769a:	459c      	cmp	ip, r3
 800769c:	f841 2f04 	str.w	r2, [r1, #4]!
 80076a0:	d8f9      	bhi.n	8007696 <__lshift+0x9a>
 80076a2:	e7e4      	b.n	800766e <__lshift+0x72>

080076a4 <__mcmp>:
 80076a4:	6903      	ldr	r3, [r0, #16]
 80076a6:	690a      	ldr	r2, [r1, #16]
 80076a8:	b530      	push	{r4, r5, lr}
 80076aa:	1a9b      	subs	r3, r3, r2
 80076ac:	d10c      	bne.n	80076c8 <__mcmp+0x24>
 80076ae:	0092      	lsls	r2, r2, #2
 80076b0:	3014      	adds	r0, #20
 80076b2:	3114      	adds	r1, #20
 80076b4:	1884      	adds	r4, r0, r2
 80076b6:	4411      	add	r1, r2
 80076b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80076bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80076c0:	4295      	cmp	r5, r2
 80076c2:	d003      	beq.n	80076cc <__mcmp+0x28>
 80076c4:	d305      	bcc.n	80076d2 <__mcmp+0x2e>
 80076c6:	2301      	movs	r3, #1
 80076c8:	4618      	mov	r0, r3
 80076ca:	bd30      	pop	{r4, r5, pc}
 80076cc:	42a0      	cmp	r0, r4
 80076ce:	d3f3      	bcc.n	80076b8 <__mcmp+0x14>
 80076d0:	e7fa      	b.n	80076c8 <__mcmp+0x24>
 80076d2:	f04f 33ff 	mov.w	r3, #4294967295
 80076d6:	e7f7      	b.n	80076c8 <__mcmp+0x24>

080076d8 <__mdiff>:
 80076d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076dc:	460d      	mov	r5, r1
 80076de:	4607      	mov	r7, r0
 80076e0:	4611      	mov	r1, r2
 80076e2:	4628      	mov	r0, r5
 80076e4:	4614      	mov	r4, r2
 80076e6:	f7ff ffdd 	bl	80076a4 <__mcmp>
 80076ea:	1e06      	subs	r6, r0, #0
 80076ec:	d108      	bne.n	8007700 <__mdiff+0x28>
 80076ee:	4631      	mov	r1, r6
 80076f0:	4638      	mov	r0, r7
 80076f2:	f7ff fdc2 	bl	800727a <_Balloc>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80076fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007700:	bfa4      	itt	ge
 8007702:	4623      	movge	r3, r4
 8007704:	462c      	movge	r4, r5
 8007706:	4638      	mov	r0, r7
 8007708:	6861      	ldr	r1, [r4, #4]
 800770a:	bfa6      	itte	ge
 800770c:	461d      	movge	r5, r3
 800770e:	2600      	movge	r6, #0
 8007710:	2601      	movlt	r6, #1
 8007712:	f7ff fdb2 	bl	800727a <_Balloc>
 8007716:	f04f 0e00 	mov.w	lr, #0
 800771a:	60c6      	str	r6, [r0, #12]
 800771c:	692b      	ldr	r3, [r5, #16]
 800771e:	6926      	ldr	r6, [r4, #16]
 8007720:	f104 0214 	add.w	r2, r4, #20
 8007724:	f105 0914 	add.w	r9, r5, #20
 8007728:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800772c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007730:	f100 0114 	add.w	r1, r0, #20
 8007734:	f852 ab04 	ldr.w	sl, [r2], #4
 8007738:	f859 5b04 	ldr.w	r5, [r9], #4
 800773c:	fa1f f38a 	uxth.w	r3, sl
 8007740:	4473      	add	r3, lr
 8007742:	b2ac      	uxth	r4, r5
 8007744:	1b1b      	subs	r3, r3, r4
 8007746:	0c2c      	lsrs	r4, r5, #16
 8007748:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800774c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007750:	b29b      	uxth	r3, r3
 8007752:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007756:	45c8      	cmp	r8, r9
 8007758:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800775c:	4694      	mov	ip, r2
 800775e:	f841 4b04 	str.w	r4, [r1], #4
 8007762:	d8e7      	bhi.n	8007734 <__mdiff+0x5c>
 8007764:	45bc      	cmp	ip, r7
 8007766:	d304      	bcc.n	8007772 <__mdiff+0x9a>
 8007768:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800776c:	b183      	cbz	r3, 8007790 <__mdiff+0xb8>
 800776e:	6106      	str	r6, [r0, #16]
 8007770:	e7c4      	b.n	80076fc <__mdiff+0x24>
 8007772:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007776:	b2a2      	uxth	r2, r4
 8007778:	4472      	add	r2, lr
 800777a:	1413      	asrs	r3, r2, #16
 800777c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007780:	b292      	uxth	r2, r2
 8007782:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007786:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800778a:	f841 2b04 	str.w	r2, [r1], #4
 800778e:	e7e9      	b.n	8007764 <__mdiff+0x8c>
 8007790:	3e01      	subs	r6, #1
 8007792:	e7e9      	b.n	8007768 <__mdiff+0x90>

08007794 <__d2b>:
 8007794:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007798:	461c      	mov	r4, r3
 800779a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800779e:	2101      	movs	r1, #1
 80077a0:	4690      	mov	r8, r2
 80077a2:	f7ff fd6a 	bl	800727a <_Balloc>
 80077a6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80077aa:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80077ae:	4607      	mov	r7, r0
 80077b0:	bb34      	cbnz	r4, 8007800 <__d2b+0x6c>
 80077b2:	9201      	str	r2, [sp, #4]
 80077b4:	f1b8 0200 	subs.w	r2, r8, #0
 80077b8:	d027      	beq.n	800780a <__d2b+0x76>
 80077ba:	a802      	add	r0, sp, #8
 80077bc:	f840 2d08 	str.w	r2, [r0, #-8]!
 80077c0:	f7ff fe00 	bl	80073c4 <__lo0bits>
 80077c4:	9900      	ldr	r1, [sp, #0]
 80077c6:	b1f0      	cbz	r0, 8007806 <__d2b+0x72>
 80077c8:	9a01      	ldr	r2, [sp, #4]
 80077ca:	f1c0 0320 	rsb	r3, r0, #32
 80077ce:	fa02 f303 	lsl.w	r3, r2, r3
 80077d2:	430b      	orrs	r3, r1
 80077d4:	40c2      	lsrs	r2, r0
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	9201      	str	r2, [sp, #4]
 80077da:	9b01      	ldr	r3, [sp, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	bf14      	ite	ne
 80077e0:	2102      	movne	r1, #2
 80077e2:	2101      	moveq	r1, #1
 80077e4:	61bb      	str	r3, [r7, #24]
 80077e6:	6139      	str	r1, [r7, #16]
 80077e8:	b1c4      	cbz	r4, 800781c <__d2b+0x88>
 80077ea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80077ee:	4404      	add	r4, r0
 80077f0:	6034      	str	r4, [r6, #0]
 80077f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077f6:	6028      	str	r0, [r5, #0]
 80077f8:	4638      	mov	r0, r7
 80077fa:	b002      	add	sp, #8
 80077fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007800:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007804:	e7d5      	b.n	80077b2 <__d2b+0x1e>
 8007806:	6179      	str	r1, [r7, #20]
 8007808:	e7e7      	b.n	80077da <__d2b+0x46>
 800780a:	a801      	add	r0, sp, #4
 800780c:	f7ff fdda 	bl	80073c4 <__lo0bits>
 8007810:	2101      	movs	r1, #1
 8007812:	9b01      	ldr	r3, [sp, #4]
 8007814:	6139      	str	r1, [r7, #16]
 8007816:	617b      	str	r3, [r7, #20]
 8007818:	3020      	adds	r0, #32
 800781a:	e7e5      	b.n	80077e8 <__d2b+0x54>
 800781c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007820:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007824:	6030      	str	r0, [r6, #0]
 8007826:	6918      	ldr	r0, [r3, #16]
 8007828:	f7ff fdad 	bl	8007386 <__hi0bits>
 800782c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007830:	e7e1      	b.n	80077f6 <__d2b+0x62>

08007832 <_calloc_r>:
 8007832:	b538      	push	{r3, r4, r5, lr}
 8007834:	fb02 f401 	mul.w	r4, r2, r1
 8007838:	4621      	mov	r1, r4
 800783a:	f000 f855 	bl	80078e8 <_malloc_r>
 800783e:	4605      	mov	r5, r0
 8007840:	b118      	cbz	r0, 800784a <_calloc_r+0x18>
 8007842:	4622      	mov	r2, r4
 8007844:	2100      	movs	r1, #0
 8007846:	f7fd ff97 	bl	8005778 <memset>
 800784a:	4628      	mov	r0, r5
 800784c:	bd38      	pop	{r3, r4, r5, pc}
	...

08007850 <_free_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4605      	mov	r5, r0
 8007854:	2900      	cmp	r1, #0
 8007856:	d043      	beq.n	80078e0 <_free_r+0x90>
 8007858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800785c:	1f0c      	subs	r4, r1, #4
 800785e:	2b00      	cmp	r3, #0
 8007860:	bfb8      	it	lt
 8007862:	18e4      	addlt	r4, r4, r3
 8007864:	f000 fa94 	bl	8007d90 <__malloc_lock>
 8007868:	4a1e      	ldr	r2, [pc, #120]	; (80078e4 <_free_r+0x94>)
 800786a:	6813      	ldr	r3, [r2, #0]
 800786c:	4610      	mov	r0, r2
 800786e:	b933      	cbnz	r3, 800787e <_free_r+0x2e>
 8007870:	6063      	str	r3, [r4, #4]
 8007872:	6014      	str	r4, [r2, #0]
 8007874:	4628      	mov	r0, r5
 8007876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800787a:	f000 ba8a 	b.w	8007d92 <__malloc_unlock>
 800787e:	42a3      	cmp	r3, r4
 8007880:	d90b      	bls.n	800789a <_free_r+0x4a>
 8007882:	6821      	ldr	r1, [r4, #0]
 8007884:	1862      	adds	r2, r4, r1
 8007886:	4293      	cmp	r3, r2
 8007888:	bf01      	itttt	eq
 800788a:	681a      	ldreq	r2, [r3, #0]
 800788c:	685b      	ldreq	r3, [r3, #4]
 800788e:	1852      	addeq	r2, r2, r1
 8007890:	6022      	streq	r2, [r4, #0]
 8007892:	6063      	str	r3, [r4, #4]
 8007894:	6004      	str	r4, [r0, #0]
 8007896:	e7ed      	b.n	8007874 <_free_r+0x24>
 8007898:	4613      	mov	r3, r2
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	b10a      	cbz	r2, 80078a2 <_free_r+0x52>
 800789e:	42a2      	cmp	r2, r4
 80078a0:	d9fa      	bls.n	8007898 <_free_r+0x48>
 80078a2:	6819      	ldr	r1, [r3, #0]
 80078a4:	1858      	adds	r0, r3, r1
 80078a6:	42a0      	cmp	r0, r4
 80078a8:	d10b      	bne.n	80078c2 <_free_r+0x72>
 80078aa:	6820      	ldr	r0, [r4, #0]
 80078ac:	4401      	add	r1, r0
 80078ae:	1858      	adds	r0, r3, r1
 80078b0:	4282      	cmp	r2, r0
 80078b2:	6019      	str	r1, [r3, #0]
 80078b4:	d1de      	bne.n	8007874 <_free_r+0x24>
 80078b6:	6810      	ldr	r0, [r2, #0]
 80078b8:	6852      	ldr	r2, [r2, #4]
 80078ba:	4401      	add	r1, r0
 80078bc:	6019      	str	r1, [r3, #0]
 80078be:	605a      	str	r2, [r3, #4]
 80078c0:	e7d8      	b.n	8007874 <_free_r+0x24>
 80078c2:	d902      	bls.n	80078ca <_free_r+0x7a>
 80078c4:	230c      	movs	r3, #12
 80078c6:	602b      	str	r3, [r5, #0]
 80078c8:	e7d4      	b.n	8007874 <_free_r+0x24>
 80078ca:	6820      	ldr	r0, [r4, #0]
 80078cc:	1821      	adds	r1, r4, r0
 80078ce:	428a      	cmp	r2, r1
 80078d0:	bf01      	itttt	eq
 80078d2:	6811      	ldreq	r1, [r2, #0]
 80078d4:	6852      	ldreq	r2, [r2, #4]
 80078d6:	1809      	addeq	r1, r1, r0
 80078d8:	6021      	streq	r1, [r4, #0]
 80078da:	6062      	str	r2, [r4, #4]
 80078dc:	605c      	str	r4, [r3, #4]
 80078de:	e7c9      	b.n	8007874 <_free_r+0x24>
 80078e0:	bd38      	pop	{r3, r4, r5, pc}
 80078e2:	bf00      	nop
 80078e4:	20000200 	.word	0x20000200

080078e8 <_malloc_r>:
 80078e8:	b570      	push	{r4, r5, r6, lr}
 80078ea:	1ccd      	adds	r5, r1, #3
 80078ec:	f025 0503 	bic.w	r5, r5, #3
 80078f0:	3508      	adds	r5, #8
 80078f2:	2d0c      	cmp	r5, #12
 80078f4:	bf38      	it	cc
 80078f6:	250c      	movcc	r5, #12
 80078f8:	2d00      	cmp	r5, #0
 80078fa:	4606      	mov	r6, r0
 80078fc:	db01      	blt.n	8007902 <_malloc_r+0x1a>
 80078fe:	42a9      	cmp	r1, r5
 8007900:	d903      	bls.n	800790a <_malloc_r+0x22>
 8007902:	230c      	movs	r3, #12
 8007904:	6033      	str	r3, [r6, #0]
 8007906:	2000      	movs	r0, #0
 8007908:	bd70      	pop	{r4, r5, r6, pc}
 800790a:	f000 fa41 	bl	8007d90 <__malloc_lock>
 800790e:	4a21      	ldr	r2, [pc, #132]	; (8007994 <_malloc_r+0xac>)
 8007910:	6814      	ldr	r4, [r2, #0]
 8007912:	4621      	mov	r1, r4
 8007914:	b991      	cbnz	r1, 800793c <_malloc_r+0x54>
 8007916:	4c20      	ldr	r4, [pc, #128]	; (8007998 <_malloc_r+0xb0>)
 8007918:	6823      	ldr	r3, [r4, #0]
 800791a:	b91b      	cbnz	r3, 8007924 <_malloc_r+0x3c>
 800791c:	4630      	mov	r0, r6
 800791e:	f000 f97b 	bl	8007c18 <_sbrk_r>
 8007922:	6020      	str	r0, [r4, #0]
 8007924:	4629      	mov	r1, r5
 8007926:	4630      	mov	r0, r6
 8007928:	f000 f976 	bl	8007c18 <_sbrk_r>
 800792c:	1c43      	adds	r3, r0, #1
 800792e:	d124      	bne.n	800797a <_malloc_r+0x92>
 8007930:	230c      	movs	r3, #12
 8007932:	4630      	mov	r0, r6
 8007934:	6033      	str	r3, [r6, #0]
 8007936:	f000 fa2c 	bl	8007d92 <__malloc_unlock>
 800793a:	e7e4      	b.n	8007906 <_malloc_r+0x1e>
 800793c:	680b      	ldr	r3, [r1, #0]
 800793e:	1b5b      	subs	r3, r3, r5
 8007940:	d418      	bmi.n	8007974 <_malloc_r+0x8c>
 8007942:	2b0b      	cmp	r3, #11
 8007944:	d90f      	bls.n	8007966 <_malloc_r+0x7e>
 8007946:	600b      	str	r3, [r1, #0]
 8007948:	18cc      	adds	r4, r1, r3
 800794a:	50cd      	str	r5, [r1, r3]
 800794c:	4630      	mov	r0, r6
 800794e:	f000 fa20 	bl	8007d92 <__malloc_unlock>
 8007952:	f104 000b 	add.w	r0, r4, #11
 8007956:	1d23      	adds	r3, r4, #4
 8007958:	f020 0007 	bic.w	r0, r0, #7
 800795c:	1ac3      	subs	r3, r0, r3
 800795e:	d0d3      	beq.n	8007908 <_malloc_r+0x20>
 8007960:	425a      	negs	r2, r3
 8007962:	50e2      	str	r2, [r4, r3]
 8007964:	e7d0      	b.n	8007908 <_malloc_r+0x20>
 8007966:	684b      	ldr	r3, [r1, #4]
 8007968:	428c      	cmp	r4, r1
 800796a:	bf16      	itet	ne
 800796c:	6063      	strne	r3, [r4, #4]
 800796e:	6013      	streq	r3, [r2, #0]
 8007970:	460c      	movne	r4, r1
 8007972:	e7eb      	b.n	800794c <_malloc_r+0x64>
 8007974:	460c      	mov	r4, r1
 8007976:	6849      	ldr	r1, [r1, #4]
 8007978:	e7cc      	b.n	8007914 <_malloc_r+0x2c>
 800797a:	1cc4      	adds	r4, r0, #3
 800797c:	f024 0403 	bic.w	r4, r4, #3
 8007980:	42a0      	cmp	r0, r4
 8007982:	d005      	beq.n	8007990 <_malloc_r+0xa8>
 8007984:	1a21      	subs	r1, r4, r0
 8007986:	4630      	mov	r0, r6
 8007988:	f000 f946 	bl	8007c18 <_sbrk_r>
 800798c:	3001      	adds	r0, #1
 800798e:	d0cf      	beq.n	8007930 <_malloc_r+0x48>
 8007990:	6025      	str	r5, [r4, #0]
 8007992:	e7db      	b.n	800794c <_malloc_r+0x64>
 8007994:	20000200 	.word	0x20000200
 8007998:	20000204 	.word	0x20000204

0800799c <__sfputc_r>:
 800799c:	6893      	ldr	r3, [r2, #8]
 800799e:	b410      	push	{r4}
 80079a0:	3b01      	subs	r3, #1
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	6093      	str	r3, [r2, #8]
 80079a6:	da07      	bge.n	80079b8 <__sfputc_r+0x1c>
 80079a8:	6994      	ldr	r4, [r2, #24]
 80079aa:	42a3      	cmp	r3, r4
 80079ac:	db01      	blt.n	80079b2 <__sfputc_r+0x16>
 80079ae:	290a      	cmp	r1, #10
 80079b0:	d102      	bne.n	80079b8 <__sfputc_r+0x1c>
 80079b2:	bc10      	pop	{r4}
 80079b4:	f7fe bb50 	b.w	8006058 <__swbuf_r>
 80079b8:	6813      	ldr	r3, [r2, #0]
 80079ba:	1c58      	adds	r0, r3, #1
 80079bc:	6010      	str	r0, [r2, #0]
 80079be:	7019      	strb	r1, [r3, #0]
 80079c0:	4608      	mov	r0, r1
 80079c2:	bc10      	pop	{r4}
 80079c4:	4770      	bx	lr

080079c6 <__sfputs_r>:
 80079c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c8:	4606      	mov	r6, r0
 80079ca:	460f      	mov	r7, r1
 80079cc:	4614      	mov	r4, r2
 80079ce:	18d5      	adds	r5, r2, r3
 80079d0:	42ac      	cmp	r4, r5
 80079d2:	d101      	bne.n	80079d8 <__sfputs_r+0x12>
 80079d4:	2000      	movs	r0, #0
 80079d6:	e007      	b.n	80079e8 <__sfputs_r+0x22>
 80079d8:	463a      	mov	r2, r7
 80079da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079de:	4630      	mov	r0, r6
 80079e0:	f7ff ffdc 	bl	800799c <__sfputc_r>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	d1f3      	bne.n	80079d0 <__sfputs_r+0xa>
 80079e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079ec <_vfiprintf_r>:
 80079ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f0:	460c      	mov	r4, r1
 80079f2:	b09d      	sub	sp, #116	; 0x74
 80079f4:	4617      	mov	r7, r2
 80079f6:	461d      	mov	r5, r3
 80079f8:	4606      	mov	r6, r0
 80079fa:	b118      	cbz	r0, 8007a04 <_vfiprintf_r+0x18>
 80079fc:	6983      	ldr	r3, [r0, #24]
 80079fe:	b90b      	cbnz	r3, 8007a04 <_vfiprintf_r+0x18>
 8007a00:	f7ff fb1e 	bl	8007040 <__sinit>
 8007a04:	4b7c      	ldr	r3, [pc, #496]	; (8007bf8 <_vfiprintf_r+0x20c>)
 8007a06:	429c      	cmp	r4, r3
 8007a08:	d158      	bne.n	8007abc <_vfiprintf_r+0xd0>
 8007a0a:	6874      	ldr	r4, [r6, #4]
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	0718      	lsls	r0, r3, #28
 8007a10:	d55e      	bpl.n	8007ad0 <_vfiprintf_r+0xe4>
 8007a12:	6923      	ldr	r3, [r4, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d05b      	beq.n	8007ad0 <_vfiprintf_r+0xe4>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a1c:	2320      	movs	r3, #32
 8007a1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a22:	2330      	movs	r3, #48	; 0x30
 8007a24:	f04f 0b01 	mov.w	fp, #1
 8007a28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a2c:	9503      	str	r5, [sp, #12]
 8007a2e:	46b8      	mov	r8, r7
 8007a30:	4645      	mov	r5, r8
 8007a32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007a36:	b10b      	cbz	r3, 8007a3c <_vfiprintf_r+0x50>
 8007a38:	2b25      	cmp	r3, #37	; 0x25
 8007a3a:	d154      	bne.n	8007ae6 <_vfiprintf_r+0xfa>
 8007a3c:	ebb8 0a07 	subs.w	sl, r8, r7
 8007a40:	d00b      	beq.n	8007a5a <_vfiprintf_r+0x6e>
 8007a42:	4653      	mov	r3, sl
 8007a44:	463a      	mov	r2, r7
 8007a46:	4621      	mov	r1, r4
 8007a48:	4630      	mov	r0, r6
 8007a4a:	f7ff ffbc 	bl	80079c6 <__sfputs_r>
 8007a4e:	3001      	adds	r0, #1
 8007a50:	f000 80c2 	beq.w	8007bd8 <_vfiprintf_r+0x1ec>
 8007a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a56:	4453      	add	r3, sl
 8007a58:	9309      	str	r3, [sp, #36]	; 0x24
 8007a5a:	f898 3000 	ldrb.w	r3, [r8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f000 80ba 	beq.w	8007bd8 <_vfiprintf_r+0x1ec>
 8007a64:	2300      	movs	r3, #0
 8007a66:	f04f 32ff 	mov.w	r2, #4294967295
 8007a6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a6e:	9304      	str	r3, [sp, #16]
 8007a70:	9307      	str	r3, [sp, #28]
 8007a72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a76:	931a      	str	r3, [sp, #104]	; 0x68
 8007a78:	46a8      	mov	r8, r5
 8007a7a:	2205      	movs	r2, #5
 8007a7c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007a80:	485e      	ldr	r0, [pc, #376]	; (8007bfc <_vfiprintf_r+0x210>)
 8007a82:	f7ff fbe1 	bl	8007248 <memchr>
 8007a86:	9b04      	ldr	r3, [sp, #16]
 8007a88:	bb78      	cbnz	r0, 8007aea <_vfiprintf_r+0xfe>
 8007a8a:	06d9      	lsls	r1, r3, #27
 8007a8c:	bf44      	itt	mi
 8007a8e:	2220      	movmi	r2, #32
 8007a90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a94:	071a      	lsls	r2, r3, #28
 8007a96:	bf44      	itt	mi
 8007a98:	222b      	movmi	r2, #43	; 0x2b
 8007a9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a9e:	782a      	ldrb	r2, [r5, #0]
 8007aa0:	2a2a      	cmp	r2, #42	; 0x2a
 8007aa2:	d02a      	beq.n	8007afa <_vfiprintf_r+0x10e>
 8007aa4:	46a8      	mov	r8, r5
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	250a      	movs	r5, #10
 8007aaa:	9a07      	ldr	r2, [sp, #28]
 8007aac:	4641      	mov	r1, r8
 8007aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ab2:	3b30      	subs	r3, #48	; 0x30
 8007ab4:	2b09      	cmp	r3, #9
 8007ab6:	d969      	bls.n	8007b8c <_vfiprintf_r+0x1a0>
 8007ab8:	b360      	cbz	r0, 8007b14 <_vfiprintf_r+0x128>
 8007aba:	e024      	b.n	8007b06 <_vfiprintf_r+0x11a>
 8007abc:	4b50      	ldr	r3, [pc, #320]	; (8007c00 <_vfiprintf_r+0x214>)
 8007abe:	429c      	cmp	r4, r3
 8007ac0:	d101      	bne.n	8007ac6 <_vfiprintf_r+0xda>
 8007ac2:	68b4      	ldr	r4, [r6, #8]
 8007ac4:	e7a2      	b.n	8007a0c <_vfiprintf_r+0x20>
 8007ac6:	4b4f      	ldr	r3, [pc, #316]	; (8007c04 <_vfiprintf_r+0x218>)
 8007ac8:	429c      	cmp	r4, r3
 8007aca:	bf08      	it	eq
 8007acc:	68f4      	ldreq	r4, [r6, #12]
 8007ace:	e79d      	b.n	8007a0c <_vfiprintf_r+0x20>
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f7fe fb12 	bl	80060fc <__swsetup_r>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d09d      	beq.n	8007a18 <_vfiprintf_r+0x2c>
 8007adc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae0:	b01d      	add	sp, #116	; 0x74
 8007ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae6:	46a8      	mov	r8, r5
 8007ae8:	e7a2      	b.n	8007a30 <_vfiprintf_r+0x44>
 8007aea:	4a44      	ldr	r2, [pc, #272]	; (8007bfc <_vfiprintf_r+0x210>)
 8007aec:	4645      	mov	r5, r8
 8007aee:	1a80      	subs	r0, r0, r2
 8007af0:	fa0b f000 	lsl.w	r0, fp, r0
 8007af4:	4318      	orrs	r0, r3
 8007af6:	9004      	str	r0, [sp, #16]
 8007af8:	e7be      	b.n	8007a78 <_vfiprintf_r+0x8c>
 8007afa:	9a03      	ldr	r2, [sp, #12]
 8007afc:	1d11      	adds	r1, r2, #4
 8007afe:	6812      	ldr	r2, [r2, #0]
 8007b00:	9103      	str	r1, [sp, #12]
 8007b02:	2a00      	cmp	r2, #0
 8007b04:	db01      	blt.n	8007b0a <_vfiprintf_r+0x11e>
 8007b06:	9207      	str	r2, [sp, #28]
 8007b08:	e004      	b.n	8007b14 <_vfiprintf_r+0x128>
 8007b0a:	4252      	negs	r2, r2
 8007b0c:	f043 0302 	orr.w	r3, r3, #2
 8007b10:	9207      	str	r2, [sp, #28]
 8007b12:	9304      	str	r3, [sp, #16]
 8007b14:	f898 3000 	ldrb.w	r3, [r8]
 8007b18:	2b2e      	cmp	r3, #46	; 0x2e
 8007b1a:	d10e      	bne.n	8007b3a <_vfiprintf_r+0x14e>
 8007b1c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007b20:	2b2a      	cmp	r3, #42	; 0x2a
 8007b22:	d138      	bne.n	8007b96 <_vfiprintf_r+0x1aa>
 8007b24:	9b03      	ldr	r3, [sp, #12]
 8007b26:	f108 0802 	add.w	r8, r8, #2
 8007b2a:	1d1a      	adds	r2, r3, #4
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	9203      	str	r2, [sp, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	bfb8      	it	lt
 8007b34:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b38:	9305      	str	r3, [sp, #20]
 8007b3a:	4d33      	ldr	r5, [pc, #204]	; (8007c08 <_vfiprintf_r+0x21c>)
 8007b3c:	2203      	movs	r2, #3
 8007b3e:	f898 1000 	ldrb.w	r1, [r8]
 8007b42:	4628      	mov	r0, r5
 8007b44:	f7ff fb80 	bl	8007248 <memchr>
 8007b48:	b140      	cbz	r0, 8007b5c <_vfiprintf_r+0x170>
 8007b4a:	2340      	movs	r3, #64	; 0x40
 8007b4c:	1b40      	subs	r0, r0, r5
 8007b4e:	fa03 f000 	lsl.w	r0, r3, r0
 8007b52:	9b04      	ldr	r3, [sp, #16]
 8007b54:	f108 0801 	add.w	r8, r8, #1
 8007b58:	4303      	orrs	r3, r0
 8007b5a:	9304      	str	r3, [sp, #16]
 8007b5c:	f898 1000 	ldrb.w	r1, [r8]
 8007b60:	2206      	movs	r2, #6
 8007b62:	482a      	ldr	r0, [pc, #168]	; (8007c0c <_vfiprintf_r+0x220>)
 8007b64:	f108 0701 	add.w	r7, r8, #1
 8007b68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b6c:	f7ff fb6c 	bl	8007248 <memchr>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	d037      	beq.n	8007be4 <_vfiprintf_r+0x1f8>
 8007b74:	4b26      	ldr	r3, [pc, #152]	; (8007c10 <_vfiprintf_r+0x224>)
 8007b76:	bb1b      	cbnz	r3, 8007bc0 <_vfiprintf_r+0x1d4>
 8007b78:	9b03      	ldr	r3, [sp, #12]
 8007b7a:	3307      	adds	r3, #7
 8007b7c:	f023 0307 	bic.w	r3, r3, #7
 8007b80:	3308      	adds	r3, #8
 8007b82:	9303      	str	r3, [sp, #12]
 8007b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b86:	444b      	add	r3, r9
 8007b88:	9309      	str	r3, [sp, #36]	; 0x24
 8007b8a:	e750      	b.n	8007a2e <_vfiprintf_r+0x42>
 8007b8c:	fb05 3202 	mla	r2, r5, r2, r3
 8007b90:	2001      	movs	r0, #1
 8007b92:	4688      	mov	r8, r1
 8007b94:	e78a      	b.n	8007aac <_vfiprintf_r+0xc0>
 8007b96:	2300      	movs	r3, #0
 8007b98:	250a      	movs	r5, #10
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	f108 0801 	add.w	r8, r8, #1
 8007ba0:	9305      	str	r3, [sp, #20]
 8007ba2:	4640      	mov	r0, r8
 8007ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ba8:	3a30      	subs	r2, #48	; 0x30
 8007baa:	2a09      	cmp	r2, #9
 8007bac:	d903      	bls.n	8007bb6 <_vfiprintf_r+0x1ca>
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d0c3      	beq.n	8007b3a <_vfiprintf_r+0x14e>
 8007bb2:	9105      	str	r1, [sp, #20]
 8007bb4:	e7c1      	b.n	8007b3a <_vfiprintf_r+0x14e>
 8007bb6:	fb05 2101 	mla	r1, r5, r1, r2
 8007bba:	2301      	movs	r3, #1
 8007bbc:	4680      	mov	r8, r0
 8007bbe:	e7f0      	b.n	8007ba2 <_vfiprintf_r+0x1b6>
 8007bc0:	ab03      	add	r3, sp, #12
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	4622      	mov	r2, r4
 8007bc6:	4b13      	ldr	r3, [pc, #76]	; (8007c14 <_vfiprintf_r+0x228>)
 8007bc8:	a904      	add	r1, sp, #16
 8007bca:	4630      	mov	r0, r6
 8007bcc:	f7fd fe6e 	bl	80058ac <_printf_float>
 8007bd0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007bd4:	4681      	mov	r9, r0
 8007bd6:	d1d5      	bne.n	8007b84 <_vfiprintf_r+0x198>
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	065b      	lsls	r3, r3, #25
 8007bdc:	f53f af7e 	bmi.w	8007adc <_vfiprintf_r+0xf0>
 8007be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007be2:	e77d      	b.n	8007ae0 <_vfiprintf_r+0xf4>
 8007be4:	ab03      	add	r3, sp, #12
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	4622      	mov	r2, r4
 8007bea:	4b0a      	ldr	r3, [pc, #40]	; (8007c14 <_vfiprintf_r+0x228>)
 8007bec:	a904      	add	r1, sp, #16
 8007bee:	4630      	mov	r0, r6
 8007bf0:	f7fe f908 	bl	8005e04 <_printf_i>
 8007bf4:	e7ec      	b.n	8007bd0 <_vfiprintf_r+0x1e4>
 8007bf6:	bf00      	nop
 8007bf8:	08007f44 	.word	0x08007f44
 8007bfc:	08008084 	.word	0x08008084
 8007c00:	08007f64 	.word	0x08007f64
 8007c04:	08007f24 	.word	0x08007f24
 8007c08:	0800808a 	.word	0x0800808a
 8007c0c:	0800808e 	.word	0x0800808e
 8007c10:	080058ad 	.word	0x080058ad
 8007c14:	080079c7 	.word	0x080079c7

08007c18 <_sbrk_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	4c05      	ldr	r4, [pc, #20]	; (8007c34 <_sbrk_r+0x1c>)
 8007c1e:	4605      	mov	r5, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	6023      	str	r3, [r4, #0]
 8007c24:	f7f9 ff84 	bl	8001b30 <_sbrk>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d102      	bne.n	8007c32 <_sbrk_r+0x1a>
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	b103      	cbz	r3, 8007c32 <_sbrk_r+0x1a>
 8007c30:	602b      	str	r3, [r5, #0]
 8007c32:	bd38      	pop	{r3, r4, r5, pc}
 8007c34:	200003b0 	.word	0x200003b0

08007c38 <__sread>:
 8007c38:	b510      	push	{r4, lr}
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c40:	f000 f8a8 	bl	8007d94 <_read_r>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	bfab      	itete	ge
 8007c48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c4a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c4c:	181b      	addge	r3, r3, r0
 8007c4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c52:	bfac      	ite	ge
 8007c54:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c56:	81a3      	strhlt	r3, [r4, #12]
 8007c58:	bd10      	pop	{r4, pc}

08007c5a <__swrite>:
 8007c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5e:	461f      	mov	r7, r3
 8007c60:	898b      	ldrh	r3, [r1, #12]
 8007c62:	4605      	mov	r5, r0
 8007c64:	05db      	lsls	r3, r3, #23
 8007c66:	460c      	mov	r4, r1
 8007c68:	4616      	mov	r6, r2
 8007c6a:	d505      	bpl.n	8007c78 <__swrite+0x1e>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c74:	f000 f868 	bl	8007d48 <_lseek_r>
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	4632      	mov	r2, r6
 8007c7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c80:	81a3      	strh	r3, [r4, #12]
 8007c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c86:	463b      	mov	r3, r7
 8007c88:	4628      	mov	r0, r5
 8007c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8e:	f000 b817 	b.w	8007cc0 <_write_r>

08007c92 <__sseek>:
 8007c92:	b510      	push	{r4, lr}
 8007c94:	460c      	mov	r4, r1
 8007c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c9a:	f000 f855 	bl	8007d48 <_lseek_r>
 8007c9e:	1c43      	adds	r3, r0, #1
 8007ca0:	89a3      	ldrh	r3, [r4, #12]
 8007ca2:	bf15      	itete	ne
 8007ca4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007caa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cae:	81a3      	strheq	r3, [r4, #12]
 8007cb0:	bf18      	it	ne
 8007cb2:	81a3      	strhne	r3, [r4, #12]
 8007cb4:	bd10      	pop	{r4, pc}

08007cb6 <__sclose>:
 8007cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cba:	f000 b813 	b.w	8007ce4 <_close_r>
	...

08007cc0 <_write_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4605      	mov	r5, r0
 8007cc4:	4608      	mov	r0, r1
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	2200      	movs	r2, #0
 8007cca:	4c05      	ldr	r4, [pc, #20]	; (8007ce0 <_write_r+0x20>)
 8007ccc:	6022      	str	r2, [r4, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	f7f9 fee1 	bl	8001a96 <_write>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	d102      	bne.n	8007cde <_write_r+0x1e>
 8007cd8:	6823      	ldr	r3, [r4, #0]
 8007cda:	b103      	cbz	r3, 8007cde <_write_r+0x1e>
 8007cdc:	602b      	str	r3, [r5, #0]
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	200003b0 	.word	0x200003b0

08007ce4 <_close_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	4c05      	ldr	r4, [pc, #20]	; (8007d00 <_close_r+0x1c>)
 8007cea:	4605      	mov	r5, r0
 8007cec:	4608      	mov	r0, r1
 8007cee:	6023      	str	r3, [r4, #0]
 8007cf0:	f7f9 feed 	bl	8001ace <_close>
 8007cf4:	1c43      	adds	r3, r0, #1
 8007cf6:	d102      	bne.n	8007cfe <_close_r+0x1a>
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	b103      	cbz	r3, 8007cfe <_close_r+0x1a>
 8007cfc:	602b      	str	r3, [r5, #0]
 8007cfe:	bd38      	pop	{r3, r4, r5, pc}
 8007d00:	200003b0 	.word	0x200003b0

08007d04 <_fstat_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	2300      	movs	r3, #0
 8007d08:	4c06      	ldr	r4, [pc, #24]	; (8007d24 <_fstat_r+0x20>)
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	4608      	mov	r0, r1
 8007d0e:	4611      	mov	r1, r2
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	f7f9 fee7 	bl	8001ae4 <_fstat>
 8007d16:	1c43      	adds	r3, r0, #1
 8007d18:	d102      	bne.n	8007d20 <_fstat_r+0x1c>
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	b103      	cbz	r3, 8007d20 <_fstat_r+0x1c>
 8007d1e:	602b      	str	r3, [r5, #0]
 8007d20:	bd38      	pop	{r3, r4, r5, pc}
 8007d22:	bf00      	nop
 8007d24:	200003b0 	.word	0x200003b0

08007d28 <_isatty_r>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	4c05      	ldr	r4, [pc, #20]	; (8007d44 <_isatty_r+0x1c>)
 8007d2e:	4605      	mov	r5, r0
 8007d30:	4608      	mov	r0, r1
 8007d32:	6023      	str	r3, [r4, #0]
 8007d34:	f7f9 fee5 	bl	8001b02 <_isatty>
 8007d38:	1c43      	adds	r3, r0, #1
 8007d3a:	d102      	bne.n	8007d42 <_isatty_r+0x1a>
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	b103      	cbz	r3, 8007d42 <_isatty_r+0x1a>
 8007d40:	602b      	str	r3, [r5, #0]
 8007d42:	bd38      	pop	{r3, r4, r5, pc}
 8007d44:	200003b0 	.word	0x200003b0

08007d48 <_lseek_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	4605      	mov	r5, r0
 8007d4c:	4608      	mov	r0, r1
 8007d4e:	4611      	mov	r1, r2
 8007d50:	2200      	movs	r2, #0
 8007d52:	4c05      	ldr	r4, [pc, #20]	; (8007d68 <_lseek_r+0x20>)
 8007d54:	6022      	str	r2, [r4, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	f7f9 fedd 	bl	8001b16 <_lseek>
 8007d5c:	1c43      	adds	r3, r0, #1
 8007d5e:	d102      	bne.n	8007d66 <_lseek_r+0x1e>
 8007d60:	6823      	ldr	r3, [r4, #0]
 8007d62:	b103      	cbz	r3, 8007d66 <_lseek_r+0x1e>
 8007d64:	602b      	str	r3, [r5, #0]
 8007d66:	bd38      	pop	{r3, r4, r5, pc}
 8007d68:	200003b0 	.word	0x200003b0

08007d6c <__ascii_mbtowc>:
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	b901      	cbnz	r1, 8007d72 <__ascii_mbtowc+0x6>
 8007d70:	a901      	add	r1, sp, #4
 8007d72:	b142      	cbz	r2, 8007d86 <__ascii_mbtowc+0x1a>
 8007d74:	b14b      	cbz	r3, 8007d8a <__ascii_mbtowc+0x1e>
 8007d76:	7813      	ldrb	r3, [r2, #0]
 8007d78:	600b      	str	r3, [r1, #0]
 8007d7a:	7812      	ldrb	r2, [r2, #0]
 8007d7c:	1c10      	adds	r0, r2, #0
 8007d7e:	bf18      	it	ne
 8007d80:	2001      	movne	r0, #1
 8007d82:	b002      	add	sp, #8
 8007d84:	4770      	bx	lr
 8007d86:	4610      	mov	r0, r2
 8007d88:	e7fb      	b.n	8007d82 <__ascii_mbtowc+0x16>
 8007d8a:	f06f 0001 	mvn.w	r0, #1
 8007d8e:	e7f8      	b.n	8007d82 <__ascii_mbtowc+0x16>

08007d90 <__malloc_lock>:
 8007d90:	4770      	bx	lr

08007d92 <__malloc_unlock>:
 8007d92:	4770      	bx	lr

08007d94 <_read_r>:
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	4605      	mov	r5, r0
 8007d98:	4608      	mov	r0, r1
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	4c05      	ldr	r4, [pc, #20]	; (8007db4 <_read_r+0x20>)
 8007da0:	6022      	str	r2, [r4, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	f7f9 fe5a 	bl	8001a5c <_read>
 8007da8:	1c43      	adds	r3, r0, #1
 8007daa:	d102      	bne.n	8007db2 <_read_r+0x1e>
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	b103      	cbz	r3, 8007db2 <_read_r+0x1e>
 8007db0:	602b      	str	r3, [r5, #0]
 8007db2:	bd38      	pop	{r3, r4, r5, pc}
 8007db4:	200003b0 	.word	0x200003b0

08007db8 <__ascii_wctomb>:
 8007db8:	b149      	cbz	r1, 8007dce <__ascii_wctomb+0x16>
 8007dba:	2aff      	cmp	r2, #255	; 0xff
 8007dbc:	bf8b      	itete	hi
 8007dbe:	238a      	movhi	r3, #138	; 0x8a
 8007dc0:	700a      	strbls	r2, [r1, #0]
 8007dc2:	6003      	strhi	r3, [r0, #0]
 8007dc4:	2001      	movls	r0, #1
 8007dc6:	bf88      	it	hi
 8007dc8:	f04f 30ff 	movhi.w	r0, #4294967295
 8007dcc:	4770      	bx	lr
 8007dce:	4608      	mov	r0, r1
 8007dd0:	4770      	bx	lr
	...

08007dd4 <_init>:
 8007dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd6:	bf00      	nop
 8007dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dda:	bc08      	pop	{r3}
 8007ddc:	469e      	mov	lr, r3
 8007dde:	4770      	bx	lr

08007de0 <_fini>:
 8007de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de2:	bf00      	nop
 8007de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de6:	bc08      	pop	{r3}
 8007de8:	469e      	mov	lr, r3
 8007dea:	4770      	bx	lr
